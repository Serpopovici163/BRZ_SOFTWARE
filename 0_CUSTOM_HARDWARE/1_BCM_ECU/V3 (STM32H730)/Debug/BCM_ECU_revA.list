
BCM_ECU_revA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fb0  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800a27c  0800a27c  0000b27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a2d8  0800a2d8  0000b2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800a2dc  0800a2dc  0000b2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000088  24000000  0800a2e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000468  24000088  0800a368  0000c088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240004f0  0800a368  0000c4f0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ce88  00000000  00000000  0000c0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000311f  00000000  00000000  00028f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001950  00000000  00000000  0002c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000013b6  00000000  00000000  0002d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036a3c  00000000  00000000  0002ed66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001ebb4  00000000  00000000  000657a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00160424  00000000  00000000  00084356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001e477a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006e50  00000000  00000000  001e47c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000009e  00000000  00000000  001eb610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000088 	.word	0x24000088
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a264 	.word	0x0800a264

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400008c 	.word	0x2400008c
 8000308:	0800a264 	.word	0x0800a264

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000310:	f000 fe06 	bl	8000f20 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f001 fb2a 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f868 	bl	80003ec <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800031c:	f000 f8d8 	bl	80004d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000320:	f000 fcac 	bl	8000c7c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000324:	f000 f90a 	bl	800053c <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8000328:	f000 f96c 	bl	8000604 <MX_I2C4_Init>
  MX_SDMMC1_SD_Init();
 800032c:	f000 f9a8 	bl	8000680 <MX_SDMMC1_SD_Init>
  MX_SPI4_Init();
 8000330:	f000 f9ca 	bl	80006c8 <MX_SPI4_Init>
  MX_SPI6_Init();
 8000334:	f000 fa1e 	bl	8000774 <MX_SPI6_Init>
  MX_TIM1_Init();
 8000338:	f000 fa72 	bl	8000820 <MX_TIM1_Init>
  MX_TIM2_Init();
 800033c:	f000 fb00 	bl	8000940 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000340:	f000 fb58 	bl	80009f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000344:	f000 fbb0 	bl	8000aa8 <MX_TIM4_Init>
  MX_TIM12_Init();
 8000348:	f000 fc3e 	bl	8000bc8 <MX_TIM12_Init>
  MX_TIM6_Init();
 800034c:	f000 fc06 	bl	8000b5c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  ADC108S022_Init(&ADC_MOS_0);
 8000350:	4813      	ldr	r0, [pc, #76]	@ (80003a0 <main+0x94>)
 8000352:	f001 fabc 	bl	80018ce <ADC108S022_Init>
  ADC108S022_Init(&ADC_MOS_1);
 8000356:	4813      	ldr	r0, [pc, #76]	@ (80003a4 <main+0x98>)
 8000358:	f001 fab9 	bl	80018ce <ADC108S022_Init>
  ADC108S022_Init(&ADC_MOS_2);
 800035c:	4812      	ldr	r0, [pc, #72]	@ (80003a8 <main+0x9c>)
 800035e:	f001 fab6 	bl	80018ce <ADC108S022_Init>
  ADC108S022_Init(&ADC_MOS_3);
 8000362:	4812      	ldr	r0, [pc, #72]	@ (80003ac <main+0xa0>)
 8000364:	f001 fab3 	bl	80018ce <ADC108S022_Init>
  ADC108S022_Init(&ADC_GEN_0);
 8000368:	4811      	ldr	r0, [pc, #68]	@ (80003b0 <main+0xa4>)
 800036a:	f001 fab0 	bl	80018ce <ADC108S022_Init>
  ADC108S022_Init(&ADC_GEN_1);
 800036e:	4811      	ldr	r0, [pc, #68]	@ (80003b4 <main+0xa8>)
 8000370:	f001 faad 	bl	80018ce <ADC108S022_Init>
  ADC108S022_Init(&ADC_GEN_2);
 8000374:	4810      	ldr	r0, [pc, #64]	@ (80003b8 <main+0xac>)
 8000376:	f001 faaa 	bl	80018ce <ADC108S022_Init>

  MCP23017_Init(&MCP23017_0);
 800037a:	4810      	ldr	r0, [pc, #64]	@ (80003bc <main+0xb0>)
 800037c:	f001 fad0 	bl	8001920 <MCP23017_Init>
  MCP23017_Init(&MCP23017_1);
 8000380:	480f      	ldr	r0, [pc, #60]	@ (80003c0 <main+0xb4>)
 8000382:	f001 facd 	bl	8001920 <MCP23017_Init>

  TCAN1146_Init(&tcan, wake_id, wake_payload, wake_payload_length);
 8000386:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <main+0xb8>)
 8000388:	6819      	ldr	r1, [r3, #0]
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <main+0xbc>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	4a0f      	ldr	r2, [pc, #60]	@ (80003cc <main+0xc0>)
 8000390:	480f      	ldr	r0, [pc, #60]	@ (80003d0 <main+0xc4>)
 8000392:	f009 fea8 	bl	800a0e6 <TCAN1146_Init>

  //TIM6 is used for regular lighting update interrupts
  HAL_TIM_Base_Start_IT(&htim6);  // Start TIM6 interrupts
 8000396:	480f      	ldr	r0, [pc, #60]	@ (80003d4 <main+0xc8>)
 8000398:	f008 f96a 	bl	8008670 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <main+0x90>
 80003a0:	24000000 	.word	0x24000000
 80003a4:	2400000c 	.word	0x2400000c
 80003a8:	24000018 	.word	0x24000018
 80003ac:	24000024 	.word	0x24000024
 80003b0:	24000030 	.word	0x24000030
 80003b4:	2400003c 	.word	0x2400003c
 80003b8:	24000048 	.word	0x24000048
 80003bc:	24000054 	.word	0x24000054
 80003c0:	2400005c 	.word	0x2400005c
 80003c4:	24000070 	.word	0x24000070
 80003c8:	24000076 	.word	0x24000076
 80003cc:	24000074 	.word	0x24000074
 80003d0:	24000064 	.word	0x24000064
 80003d4:	24000454 	.word	0x24000454

080003d8 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END 3 */
}

// Callback for interrupts caused by timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
    if (htim == &htim6) {
        //update lights
    }
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b09c      	sub	sp, #112	@ 0x70
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003f6:	224c      	movs	r2, #76	@ 0x4c
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f009 fef8 	bl	800a1f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2220      	movs	r2, #32
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f009 fef2 	bl	800a1f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800040c:	2002      	movs	r0, #2
 800040e:	f002 fe8d 	bl	800312c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000412:	2300      	movs	r3, #0
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <SystemClock_Config+0xe0>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800041e:	4a2b      	ldr	r2, [pc, #172]	@ (80004cc <SystemClock_Config+0xe0>)
 8000420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b29      	ldr	r3, [pc, #164]	@ (80004cc <SystemClock_Config+0xe0>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000432:	bf00      	nop
 8000434:	4b25      	ldr	r3, [pc, #148]	@ (80004cc <SystemClock_Config+0xe0>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800043c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000440:	d1f8      	bne.n	8000434 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8000442:	2311      	movs	r3, #17
 8000444:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000446:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800044a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800044c:	2380      	movs	r3, #128	@ 0x80
 800044e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000450:	2310      	movs	r3, #16
 8000452:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000454:	2302      	movs	r3, #2
 8000456:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000458:	2302      	movs	r3, #2
 800045a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800045c:	2305      	movs	r3, #5
 800045e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000460:	2330      	movs	r3, #48	@ 0x30
 8000462:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000464:	2302      	movs	r3, #2
 8000466:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000468:	2303      	movs	r3, #3
 800046a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800046c:	2302      	movs	r3, #2
 800046e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000470:	2308      	movs	r3, #8
 8000472:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000474:	2300      	movs	r3, #0
 8000476:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000480:	4618      	mov	r0, r3
 8000482:	f002 fe8d 	bl	80031a0 <HAL_RCC_OscConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800048c:	f000 fd74 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000490:	233f      	movs	r3, #63	@ 0x3f
 8000492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000494:	2303      	movs	r3, #3
 8000496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV8;
 800049c:	230a      	movs	r3, #10
 800049e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2100      	movs	r1, #0
 80004b4:	4618      	mov	r0, r3
 80004b6:	f003 fa4d 	bl	8003954 <HAL_RCC_ClockConfig>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80004c0:	f000 fd5a 	bl	8000f78 <Error_Handler>
  }
}
 80004c4:	bf00      	nop
 80004c6:	3770      	adds	r7, #112	@ 0x70
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	58024800 	.word	0x58024800

080004d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b0ae      	sub	sp, #184	@ 0xb8
 80004d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004d6:	463b      	mov	r3, r7
 80004d8:	22b8      	movs	r2, #184	@ 0xb8
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f009 fe87 	bl	800a1f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6|RCC_PERIPHCLK_SPI4
 80004e2:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80004e6:	f04f 0300 	mov.w	r3, #0
 80004ea:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80004ee:	2305      	movs	r3, #5
 80004f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 48;
 80004f2:	2330      	movs	r3, #48	@ 0x30
 80004f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 96;
 80004fa:	2360      	movs	r3, #96	@ 0x60
 80004fc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004fe:	2302      	movs	r3, #2
 8000500:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000502:	2380      	movs	r3, #128	@ 0x80
 8000504:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000506:	2300      	movs	r3, #0
 8000508:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800050e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000512:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000514:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000518:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL2;
 800051a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800051e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000522:	463b      	mov	r3, r7
 8000524:	4618      	mov	r0, r3
 8000526:	f003 fd8b 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <PeriphCommonClock_Config+0x64>
  {
    Error_Handler();
 8000530:	f000 fd22 	bl	8000f78 <Error_Handler>
  }
}
 8000534:	bf00      	nop
 8000536:	37b8      	adds	r7, #184	@ 0xb8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000540:	4b2e      	ldr	r3, [pc, #184]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 8000542:	4a2f      	ldr	r2, [pc, #188]	@ (8000600 <MX_FDCAN1_Init+0xc4>)
 8000544:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000546:	4b2d      	ldr	r3, [pc, #180]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800054c:	4b2b      	ldr	r3, [pc, #172]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000552:	4b2a      	ldr	r3, [pc, #168]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 8000554:	2200      	movs	r2, #0
 8000556:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000558:	4b28      	ldr	r3, [pc, #160]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 800055a:	2200      	movs	r2, #0
 800055c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800055e:	4b27      	ldr	r3, [pc, #156]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 8000560:	2200      	movs	r2, #0
 8000562:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000564:	4b25      	ldr	r3, [pc, #148]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 8000566:	2210      	movs	r2, #16
 8000568:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800056a:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 800056c:	2201      	movs	r2, #1
 800056e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8000570:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 8000572:	2201      	movs	r2, #1
 8000574:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000576:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 8000578:	2201      	movs	r2, #1
 800057a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800057c:	4b1f      	ldr	r3, [pc, #124]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 800057e:	2201      	movs	r2, #1
 8000580:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000582:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 8000584:	2201      	movs	r2, #1
 8000586:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000588:	4b1c      	ldr	r3, [pc, #112]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 800058a:	2201      	movs	r2, #1
 800058c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 8000590:	2201      	movs	r2, #1
 8000592:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000594:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 8000596:	2200      	movs	r2, #0
 8000598:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800059a:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 800059c:	2200      	movs	r2, #0
 800059e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80005a0:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005ae:	2204      	movs	r2, #4
 80005b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80005b8:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80005c4:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80005ca:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80005d6:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005dc:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80005e2:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005e4:	2204      	movs	r2, #4
 80005e6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005e8:	4804      	ldr	r0, [pc, #16]	@ (80005fc <MX_FDCAN1_Init+0xc0>)
 80005ea:	f001 fc13 	bl	8001e14 <HAL_FDCAN_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80005f4:	f000 fcc0 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	240000a4 	.word	0x240000a4
 8000600:	4000a000 	.word	0x4000a000

08000604 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_I2C4_Init+0x74>)
 800060a:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <MX_I2C4_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00000E14;
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_I2C4_Init+0x74>)
 8000610:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000614:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_I2C4_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_I2C4_Init+0x74>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_I2C4_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000628:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_I2C4_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800062e:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_I2C4_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <MX_I2C4_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_I2C4_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000640:	480d      	ldr	r0, [pc, #52]	@ (8000678 <MX_I2C4_Init+0x74>)
 8000642:	f002 f90d 	bl	8002860 <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C4_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 fc94 	bl	8000f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	4809      	ldr	r0, [pc, #36]	@ (8000678 <MX_I2C4_Init+0x74>)
 8000654:	f002 fcd2 	bl	8002ffc <HAL_I2CEx_ConfigAnalogFilter>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 800065e:	f000 fc8b 	bl	8000f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000662:	2100      	movs	r1, #0
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <MX_I2C4_Init+0x74>)
 8000666:	f002 fd14 	bl	8003092 <HAL_I2CEx_ConfigDigitalFilter>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000670:	f000 fc82 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	24000144 	.word	0x24000144
 800067c:	58001c00 	.word	0x58001c00

08000680 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_SDMMC1_SD_Init+0x40>)
 8000686:	4a0f      	ldr	r2, [pc, #60]	@ (80006c4 <MX_SDMMC1_SD_Init+0x44>)
 8000688:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <MX_SDMMC1_SD_Init+0x40>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_SDMMC1_SD_Init+0x40>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000696:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_SDMMC1_SD_Init+0x40>)
 8000698:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800069c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_SDMMC1_SD_Init+0x40>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_SDMMC1_SD_Init+0x40>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_SDMMC1_SD_Init+0x40>)
 80006ac:	f006 f8ae 	bl	800680c <HAL_SD_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80006b6:	f000 fc5f 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	24000198 	.word	0x24000198
 80006c4:	52007000 	.word	0x52007000

080006c8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <MX_SPI4_Init+0xa4>)
 80006ce:	4a28      	ldr	r2, [pc, #160]	@ (8000770 <MX_SPI4_Init+0xa8>)
 80006d0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80006d2:	4b26      	ldr	r3, [pc, #152]	@ (800076c <MX_SPI4_Init+0xa4>)
 80006d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006d8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80006da:	4b24      	ldr	r3, [pc, #144]	@ (800076c <MX_SPI4_Init+0xa4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <MX_SPI4_Init+0xa4>)
 80006e2:	2203      	movs	r2, #3
 80006e4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <MX_SPI4_Init+0xa4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_SPI4_Init+0xa4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <MX_SPI4_Init+0xa4>)
 80006f4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80006f8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_SPI4_Init+0xa4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_SPI4_Init+0xa4>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_SPI4_Init+0xa4>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070c:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_SPI4_Init+0xa4>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <MX_SPI4_Init+0xa4>)
 8000714:	2200      	movs	r2, #0
 8000716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_SPI4_Init+0xa4>)
 800071a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_SPI4_Init+0xa4>)
 8000722:	2200      	movs	r2, #0
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_SPI4_Init+0xa4>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_SPI4_Init+0xa4>)
 800072e:	2200      	movs	r2, #0
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_SPI4_Init+0xa4>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_SPI4_Init+0xa4>)
 800073a:	2200      	movs	r2, #0
 800073c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_SPI4_Init+0xa4>)
 8000740:	2200      	movs	r2, #0
 8000742:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_SPI4_Init+0xa4>)
 8000746:	2200      	movs	r2, #0
 8000748:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_SPI4_Init+0xa4>)
 800074c:	2200      	movs	r2, #0
 800074e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_SPI4_Init+0xa4>)
 8000752:	2200      	movs	r2, #0
 8000754:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_SPI4_Init+0xa4>)
 8000758:	f007 f8c6 	bl	80078e8 <HAL_SPI_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000762:	f000 fc09 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	24000214 	.word	0x24000214
 8000770:	40013400 	.word	0x40013400

08000774 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000778:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <MX_SPI6_Init+0xa4>)
 800077a:	4a28      	ldr	r2, [pc, #160]	@ (800081c <MX_SPI6_Init+0xa8>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b26      	ldr	r3, [pc, #152]	@ (8000818 <MX_SPI6_Init+0xa4>)
 8000780:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000784:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <MX_SPI6_Init+0xa4>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 800078c:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <MX_SPI6_Init+0xa4>)
 800078e:	2203      	movs	r2, #3
 8000790:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <MX_SPI6_Init+0xa4>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <MX_SPI6_Init+0xa4>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007a0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80007a4:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 80007be:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ca:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_SPI6_Init+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_SPI6_Init+0xa4>)
 8000804:	f007 f870 	bl	80078e8 <HAL_SPI_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 800080e:	f000 fbb3 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2400029c 	.word	0x2400029c
 800081c:	58001400 	.word	0x58001400

08000820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b098      	sub	sp, #96	@ 0x60
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000826:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000832:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2234      	movs	r2, #52	@ 0x34
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f009 fccf 	bl	800a1f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000852:	4b39      	ldr	r3, [pc, #228]	@ (8000938 <MX_TIM1_Init+0x118>)
 8000854:	4a39      	ldr	r2, [pc, #228]	@ (800093c <MX_TIM1_Init+0x11c>)
 8000856:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000858:	4b37      	ldr	r3, [pc, #220]	@ (8000938 <MX_TIM1_Init+0x118>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b36      	ldr	r3, [pc, #216]	@ (8000938 <MX_TIM1_Init+0x118>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000864:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <MX_TIM1_Init+0x118>)
 8000866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800086a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b32      	ldr	r3, [pc, #200]	@ (8000938 <MX_TIM1_Init+0x118>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000872:	4b31      	ldr	r3, [pc, #196]	@ (8000938 <MX_TIM1_Init+0x118>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000878:	4b2f      	ldr	r3, [pc, #188]	@ (8000938 <MX_TIM1_Init+0x118>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800087e:	482e      	ldr	r0, [pc, #184]	@ (8000938 <MX_TIM1_Init+0x118>)
 8000880:	f007 ff7c 	bl	800877c <HAL_TIM_PWM_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 fb75 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800089a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800089e:	4619      	mov	r1, r3
 80008a0:	4825      	ldr	r0, [pc, #148]	@ (8000938 <MX_TIM1_Init+0x118>)
 80008a2:	f008 fd87 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008ac:	f000 fb64 	bl	8000f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b0:	2360      	movs	r3, #96	@ 0x60
 80008b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b8:	2300      	movs	r3, #0
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008bc:	2300      	movs	r3, #0
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4818      	ldr	r0, [pc, #96]	@ (8000938 <MX_TIM1_Init+0x118>)
 80008d6:	f008 f8af 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008e0:	f000 fb4a 	bl	8000f78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000906:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4807      	ldr	r0, [pc, #28]	@ (8000938 <MX_TIM1_Init+0x118>)
 800091a:	f008 fde7 	bl	80094ec <HAL_TIMEx_ConfigBreakDeadTime>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000924:	f000 fb28 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000928:	4803      	ldr	r0, [pc, #12]	@ (8000938 <MX_TIM1_Init+0x118>)
 800092a:	f000 fdd5 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 800092e:	bf00      	nop
 8000930:	3760      	adds	r7, #96	@ 0x60
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000324 	.word	0x24000324
 800093c:	40010000 	.word	0x40010000

08000940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	@ 0x28
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	615a      	str	r2, [r3, #20]
 8000962:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000964:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 8000966:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800096a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800096c:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 800097a:	f04f 32ff 	mov.w	r2, #4294967295
 800097e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800098c:	4818      	ldr	r0, [pc, #96]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 800098e:	f007 fef5 	bl	800877c <HAL_TIM_PWM_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000998:	f000 faee 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 80009ac:	f008 fd02 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80009b6:	f000 fadf 	bl	8000f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	@ 0x60
 80009bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	2208      	movs	r2, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	4807      	ldr	r0, [pc, #28]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 80009d2:	f008 f831 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80009dc:	f000 facc 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 80009e2:	f000 fd79 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	24000370 	.word	0x24000370

080009f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a1a:	4a22      	ldr	r2, [pc, #136]	@ (8000aa4 <MX_TIM3_Init+0xb0>)
 8000a1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a3e:	4818      	ldr	r0, [pc, #96]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a40:	f007 fe9c 	bl	800877c <HAL_TIM_PWM_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000a4a:	f000 fa95 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4810      	ldr	r0, [pc, #64]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a5e:	f008 fca9 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000a68:	f000 fa86 	bl	8000f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6c:	2360      	movs	r3, #96	@ 0x60
 8000a6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a84:	f007 ffd8 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a8e:	f000 fa73 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a92:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a94:	f000 fd20 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	@ 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	240003bc 	.word	0x240003bc
 8000aa4:	40000400 	.word	0x40000400

08000aa8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aba:	463b      	mov	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]
 8000aca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000acc:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_TIM4_Init+0xac>)
 8000ace:	4a22      	ldr	r2, [pc, #136]	@ (8000b58 <MX_TIM4_Init+0xb0>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <MX_TIM4_Init+0xac>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <MX_TIM4_Init+0xac>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_TIM4_Init+0xac>)
 8000ae0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <MX_TIM4_Init+0xac>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_TIM4_Init+0xac>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000af2:	4818      	ldr	r0, [pc, #96]	@ (8000b54 <MX_TIM4_Init+0xac>)
 8000af4:	f007 fe42 	bl	800877c <HAL_TIM_PWM_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000afe:	f000 fa3b 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4810      	ldr	r0, [pc, #64]	@ (8000b54 <MX_TIM4_Init+0xac>)
 8000b12:	f008 fc4f 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000b1c:	f000 fa2c 	bl	8000f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b20:	2360      	movs	r3, #96	@ 0x60
 8000b22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	4807      	ldr	r0, [pc, #28]	@ (8000b54 <MX_TIM4_Init+0xac>)
 8000b38:	f007 ff7e 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000b42:	f000 fa19 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b46:	4803      	ldr	r0, [pc, #12]	@ (8000b54 <MX_TIM4_Init+0xac>)
 8000b48:	f000 fcc6 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	24000408 	.word	0x24000408
 8000b58:	40000800 	.word	0x40000800

08000b5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_TIM6_Init+0x64>)
 8000b6e:	4a15      	ldr	r2, [pc, #84]	@ (8000bc4 <MX_TIM6_Init+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1499;
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <MX_TIM6_Init+0x64>)
 8000b74:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000b78:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_TIM6_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_TIM6_Init+0x64>)
 8000b82:	2263      	movs	r2, #99	@ 0x63
 8000b84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_TIM6_Init+0x64>)
 8000b88:	2280      	movs	r2, #128	@ 0x80
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <MX_TIM6_Init+0x64>)
 8000b8e:	f007 fd18 	bl	80085c2 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b98:	f000 f9ee 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_TIM6_Init+0x64>)
 8000baa:	f008 fc03 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bb4:	f000 f9e0 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	24000454 	.word	0x24000454
 8000bc4:	40001000 	.word	0x40001000

08000bc8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
 8000be8:	615a      	str	r2, [r3, #20]
 8000bea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000bec:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <MX_TIM12_Init+0xac>)
 8000bee:	4a22      	ldr	r2, [pc, #136]	@ (8000c78 <MX_TIM12_Init+0xb0>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000bf2:	4b20      	ldr	r3, [pc, #128]	@ (8000c74 <MX_TIM12_Init+0xac>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <MX_TIM12_Init+0xac>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <MX_TIM12_Init+0xac>)
 8000c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c04:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <MX_TIM12_Init+0xac>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <MX_TIM12_Init+0xac>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000c12:	4818      	ldr	r0, [pc, #96]	@ (8000c74 <MX_TIM12_Init+0xac>)
 8000c14:	f007 fdb2 	bl	800877c <HAL_TIM_PWM_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8000c1e:	f000 f9ab 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4810      	ldr	r0, [pc, #64]	@ (8000c74 <MX_TIM12_Init+0xac>)
 8000c32:	f008 fbbf 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000c3c:	f000 f99c 	bl	8000f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c40:	2360      	movs	r3, #96	@ 0x60
 8000c42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c50:	463b      	mov	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	4619      	mov	r1, r3
 8000c56:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <MX_TIM12_Init+0xac>)
 8000c58:	f007 feee 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8000c62:	f000 f989 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000c66:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <MX_TIM12_Init+0xac>)
 8000c68:	f000 fc36 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	@ 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	240004a0 	.word	0x240004a0
 8000c78:	40001800 	.word	0x40001800

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	@ 0x30
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c92:	4b9d      	ldr	r3, [pc, #628]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	4a9b      	ldr	r2, [pc, #620]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca2:	4b99      	ldr	r3, [pc, #612]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	61bb      	str	r3, [r7, #24]
 8000cae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	4b95      	ldr	r3, [pc, #596]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	4a94      	ldr	r2, [pc, #592]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc0:	4b91      	ldr	r3, [pc, #580]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	4b8e      	ldr	r3, [pc, #568]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	4a8c      	ldr	r2, [pc, #560]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cde:	4b8a      	ldr	r3, [pc, #552]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b86      	ldr	r3, [pc, #536]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	4a85      	ldr	r2, [pc, #532]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfc:	4b82      	ldr	r3, [pc, #520]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	4a7d      	ldr	r2, [pc, #500]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d28:	4b77      	ldr	r3, [pc, #476]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	4a76      	ldr	r2, [pc, #472]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d38:	4b73      	ldr	r3, [pc, #460]	@ (8000f08 <MX_GPIO_Init+0x28c>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CAN_SPI_CAN_nCS_Pin|EEPROM_nHOLD_Pin|MCU_G_LED_Pin|MCU_R_LED_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	211b      	movs	r1, #27
 8000d4a:	4870      	ldr	r0, [pc, #448]	@ (8000f0c <MX_GPIO_Init+0x290>)
 8000d4c:	f001 fd6e 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_SPI_EEPROM_nCS_Pin|M1_4_TRIG_Pin|HORN_nRST_Pin|M0_4_TRIG_Pin
 8000d50:	2200      	movs	r2, #0
 8000d52:	f242 11b9 	movw	r1, #8633	@ 0x21b9
 8000d56:	486e      	ldr	r0, [pc, #440]	@ (8000f10 <MX_GPIO_Init+0x294>)
 8000d58:	f001 fd68 	bl	800282c <HAL_GPIO_WritePin>
                          |M0_3_TRIG_Pin|MOS_SPI_M1_ADC_nCS_Pin|MOS_SPI_M2_ADC_nCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_3_TRIG_Pin|M1_2_TRIG_Pin|M1_1_TRIG_Pin|MOS_SPI_M0_ADC_nCS_Pin
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f648 511b 	movw	r1, #36123	@ 0x8d1b
 8000d62:	486c      	ldr	r0, [pc, #432]	@ (8000f14 <MX_GPIO_Init+0x298>)
 8000d64:	f001 fd62 	bl	800282c <HAL_GPIO_WritePin>
                          |M3_4_TRIG_Pin|M3_3_TRIG_Pin|M3_2_TRIG_Pin|M3_1_TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_2_TRIG_Pin|M0_1_TRIG_Pin|HORN_AMP_EN_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f640 0106 	movw	r1, #2054	@ 0x806
 8000d6e:	486a      	ldr	r0, [pc, #424]	@ (8000f18 <MX_GPIO_Init+0x29c>)
 8000d70:	f001 fd5c 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOS_SPI_ADC_0_nCS_Pin|MOS_SPI_M3_ADC_nCS_Pin|MOS_SPI_ADC_2_nCS_Pin|MOS_SPI_ADC_1_nCS_Pin
 8000d74:	2200      	movs	r2, #0
 8000d76:	f648 71d9 	movw	r1, #36825	@ 0x8fd9
 8000d7a:	4868      	ldr	r0, [pc, #416]	@ (8000f1c <MX_GPIO_Init+0x2a0>)
 8000d7c:	f001 fd56 	bl	800282c <HAL_GPIO_WritePin>
                          |IO_CHK_0_nRST_Pin|M2_4_TRIG_Pin|M2_3_TRIG_Pin|M2_2_TRIG_Pin
                          |M2_1_TRIG_Pin|IO_CHK_1_nRST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CAN_SPI_CAN_nCS_Pin EEPROM_nHOLD_Pin MCU_G_LED_Pin MCU_R_LED_Pin */
  GPIO_InitStruct.Pin = CAN_SPI_CAN_nCS_Pin|EEPROM_nHOLD_Pin|MCU_G_LED_Pin|MCU_R_LED_Pin;
 8000d80:	231b      	movs	r3, #27
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	485d      	ldr	r0, [pc, #372]	@ (8000f0c <MX_GPIO_Init+0x290>)
 8000d98:	f001 fba0 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_SPI_EEPROM_nCS_Pin M1_4_TRIG_Pin HORN_nRST_Pin M0_4_TRIG_Pin
                           M0_3_TRIG_Pin MOS_SPI_M1_ADC_nCS_Pin MOS_SPI_M2_ADC_nCS_Pin */
  GPIO_InitStruct.Pin = CAN_SPI_EEPROM_nCS_Pin|M1_4_TRIG_Pin|HORN_nRST_Pin|M0_4_TRIG_Pin
 8000d9c:	f242 13b9 	movw	r3, #8633	@ 0x21b9
 8000da0:	61fb      	str	r3, [r7, #28]
                          |M0_3_TRIG_Pin|MOS_SPI_M1_ADC_nCS_Pin|MOS_SPI_M2_ADC_nCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4856      	ldr	r0, [pc, #344]	@ (8000f10 <MX_GPIO_Init+0x294>)
 8000db6:	f001 fb91 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_STAT_34_Pin HORN_nCLIP_Pin */
  GPIO_InitStruct.Pin = M1_STAT_34_Pin|HORN_nCLIP_Pin;
 8000dba:	2306      	movs	r3, #6
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4850      	ldr	r0, [pc, #320]	@ (8000f10 <MX_GPIO_Init+0x294>)
 8000dce:	f001 fb85 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_3_TRIG_Pin M1_2_TRIG_Pin M1_1_TRIG_Pin MOS_SPI_M0_ADC_nCS_Pin
                           M3_4_TRIG_Pin M3_3_TRIG_Pin M3_2_TRIG_Pin M3_1_TRIG_Pin */
  GPIO_InitStruct.Pin = M1_3_TRIG_Pin|M1_2_TRIG_Pin|M1_1_TRIG_Pin|MOS_SPI_M0_ADC_nCS_Pin
 8000dd2:	f648 531b 	movw	r3, #36123	@ 0x8d1b
 8000dd6:	61fb      	str	r3, [r7, #28]
                          |M3_4_TRIG_Pin|M3_3_TRIG_Pin|M3_2_TRIG_Pin|M3_1_TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	484a      	ldr	r0, [pc, #296]	@ (8000f14 <MX_GPIO_Init+0x298>)
 8000dec:	f001 fb76 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_STAT_12_Pin M3_STAT_34_Pin M3_STAT_12_Pin */
  GPIO_InitStruct.Pin = M1_STAT_12_Pin|M3_STAT_34_Pin|M3_STAT_12_Pin;
 8000df0:	f241 2304 	movw	r3, #4612	@ 0x1204
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4843      	ldr	r0, [pc, #268]	@ (8000f14 <MX_GPIO_Init+0x298>)
 8000e06:	f001 fb69 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_34_STAT_Pin HORN_nFLT_Pin */
  GPIO_InitStruct.Pin = M0_34_STAT_Pin|HORN_nFLT_Pin;
 8000e0a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	483e      	ldr	r0, [pc, #248]	@ (8000f18 <MX_GPIO_Init+0x29c>)
 8000e20:	f001 fb5c 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_2_TRIG_Pin M0_1_TRIG_Pin HORN_AMP_EN_Pin */
  GPIO_InitStruct.Pin = M0_2_TRIG_Pin|M0_1_TRIG_Pin|HORN_AMP_EN_Pin;
 8000e24:	f640 0306 	movw	r3, #2054	@ 0x806
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4836      	ldr	r0, [pc, #216]	@ (8000f18 <MX_GPIO_Init+0x29c>)
 8000e3e:	f001 fb4d 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_STAT_12_Pin VCC_I_nFLT_Pin LED_A_SUP_nFLT_Pin LED_B_SUP_nFLT_Pin
                           LED_C_SUP_nFLT_Pin LED_D_SUP_nFLT_Pin BCM_SUP_nFLT_Pin HORN_SUP_nFLT_Pin */
  GPIO_InitStruct.Pin = M0_STAT_12_Pin|VCC_I_nFLT_Pin|LED_A_SUP_nFLT_Pin|LED_B_SUP_nFLT_Pin
 8000e42:	f64f 5380 	movw	r3, #64896	@ 0xfd80
 8000e46:	61fb      	str	r3, [r7, #28]
                          |LED_C_SUP_nFLT_Pin|LED_D_SUP_nFLT_Pin|BCM_SUP_nFLT_Pin|HORN_SUP_nFLT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	482d      	ldr	r0, [pc, #180]	@ (8000f0c <MX_GPIO_Init+0x290>)
 8000e58:	f001 fb40 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : HORN_I_nFLT_Pin */
  GPIO_InitStruct.Pin = HORN_I_nFLT_Pin;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HORN_I_nFLT_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4829      	ldr	r0, [pc, #164]	@ (8000f18 <MX_GPIO_Init+0x29c>)
 8000e72:	f001 fb33 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : MOS_SPI_ADC_0_nCS_Pin MOS_SPI_M3_ADC_nCS_Pin MOS_SPI_ADC_2_nCS_Pin MOS_SPI_ADC_1_nCS_Pin
                           IO_CHK_0_nRST_Pin M2_4_TRIG_Pin M2_3_TRIG_Pin M2_2_TRIG_Pin
                           M2_1_TRIG_Pin IO_CHK_1_nRST_Pin */
  GPIO_InitStruct.Pin = MOS_SPI_ADC_0_nCS_Pin|MOS_SPI_M3_ADC_nCS_Pin|MOS_SPI_ADC_2_nCS_Pin|MOS_SPI_ADC_1_nCS_Pin
 8000e76:	f648 73d9 	movw	r3, #36825	@ 0x8fd9
 8000e7a:	61fb      	str	r3, [r7, #28]
                          |IO_CHK_0_nRST_Pin|M2_4_TRIG_Pin|M2_3_TRIG_Pin|M2_2_TRIG_Pin
                          |M2_1_TRIG_Pin|IO_CHK_1_nRST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4823      	ldr	r0, [pc, #140]	@ (8000f1c <MX_GPIO_Init+0x2a0>)
 8000e90:	f001 fb24 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_CHK_0_INTB_Pin IO_CHK_0_INTA_Pin */
  GPIO_InitStruct.Pin = IO_CHK_0_INTB_Pin|IO_CHK_0_INTA_Pin;
 8000e94:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	481c      	ldr	r0, [pc, #112]	@ (8000f1c <MX_GPIO_Init+0x2a0>)
 8000eac:	f001 fb16 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_STAT_34_Pin M2_STAT_12_Pin */
  GPIO_InitStruct.Pin = M2_STAT_34_Pin|M2_STAT_12_Pin;
 8000eb0:	2322      	movs	r3, #34	@ 0x22
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4816      	ldr	r0, [pc, #88]	@ (8000f1c <MX_GPIO_Init+0x2a0>)
 8000ec4:	f001 fb0a 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_CHK_1_INTB_Pin IO_CHK_1_INTA_Pin */
  GPIO_InitStruct.Pin = IO_CHK_1_INTB_Pin|IO_CHK_1_INTA_Pin;
 8000ec8:	2330      	movs	r3, #48	@ 0x30
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ecc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	480e      	ldr	r0, [pc, #56]	@ (8000f18 <MX_GPIO_Init+0x29c>)
 8000ede:	f001 fafd 	bl	80024dc <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_CLOSE);
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000ee8:	f000 fdf6 	bl	8001ad8 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_CLOSE);
 8000eec:	2100      	movs	r1, #0
 8000eee:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000ef2:	f000 fdf1 	bl	8001ad8 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_CLOSE);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000efc:	f000 fdec 	bl	8001ad8 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f00:	bf00      	nop
 8000f02:	3730      	adds	r7, #48	@ 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	58024400 	.word	0x58024400
 8000f0c:	58021000 	.word	0x58021000
 8000f10:	58020800 	.word	0x58020800
 8000f14:	58020000 	.word	0x58020000
 8000f18:	58020400 	.word	0x58020400
 8000f1c:	58020c00 	.word	0x58020c00

08000f20 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f32:	f000 fef7 	bl	8001d24 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f42:	231f      	movs	r3, #31
 8000f44:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f46:	2387      	movs	r3, #135	@ 0x87
 8000f48:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f52:	2301      	movs	r3, #1
 8000f54:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f56:	2301      	movs	r3, #1
 8000f58:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f62:	463b      	mov	r3, r7
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 ff15 	bl	8001d94 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f6a:	2004      	movs	r0, #4
 8000f6c:	f000 fef2 	bl	8001d54 <HAL_MPU_Enable>

}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <Error_Handler+0x8>

08000f84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_MspInit+0x30>)
 8000f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f90:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <HAL_MspInit+0x30>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_MspInit+0x30>)
 8000f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	58024400 	.word	0x58024400

08000fb8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001040 <HAL_FDCAN_MspInit+0x88>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d12e      	bne.n	8001038 <HAL_FDCAN_MspInit+0x80>
  {
    /* USER CODE BEGIN FDCAN1_MspInit 0 */

    /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000fda:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <HAL_FDCAN_MspInit+0x8c>)
 8000fdc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000fe0:	4a18      	ldr	r2, [pc, #96]	@ (8001044 <HAL_FDCAN_MspInit+0x8c>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <HAL_FDCAN_MspInit+0x8c>)
 8000fec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_FDCAN_MspInit+0x8c>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffe:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <HAL_FDCAN_MspInit+0x8c>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001008:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <HAL_FDCAN_MspInit+0x8c>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001016:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001028:	2309      	movs	r3, #9
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <HAL_FDCAN_MspInit+0x90>)
 8001034:	f001 fa52 	bl	80024dc <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	@ 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	4000a000 	.word	0x4000a000
 8001044:	58024400 	.word	0x58024400
 8001048:	58020400 	.word	0x58020400

0800104c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0b8      	sub	sp, #224	@ 0xe0
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	22b8      	movs	r2, #184	@ 0xb8
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f009 f8bf 	bl	800a1f0 <memset>
  if(hi2c->Instance==I2C4)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a27      	ldr	r2, [pc, #156]	@ (8001114 <HAL_I2C_MspInit+0xc8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d146      	bne.n	800110a <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800107c:	f04f 0210 	mov.w	r2, #16
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_CSI;
 8001088:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800108c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4618      	mov	r0, r3
 8001096:	f002 ffd3 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80010a0:	f7ff ff6a 	bl	8000f78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <HAL_I2C_MspInit+0xcc>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001118 <HAL_I2C_MspInit+0xcc>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b4:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <HAL_I2C_MspInit+0xcc>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c2:	23c0      	movs	r3, #192	@ 0xc0
 80010c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c8:	2312      	movs	r3, #18
 80010ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80010da:	2306      	movs	r3, #6
 80010dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80010e4:	4619      	mov	r1, r3
 80010e6:	480d      	ldr	r0, [pc, #52]	@ (800111c <HAL_I2C_MspInit+0xd0>)
 80010e8:	f001 f9f8 	bl	80024dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80010ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HAL_I2C_MspInit+0xcc>)
 80010ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010f2:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <HAL_I2C_MspInit+0xcc>)
 80010f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_I2C_MspInit+0xcc>)
 80010fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C4_MspInit 1 */

  }

}
 800110a:	bf00      	nop
 800110c:	37e0      	adds	r7, #224	@ 0xe0
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	58001c00 	.word	0x58001c00
 8001118:	58024400 	.word	0x58024400
 800111c:	58020400 	.word	0x58020400

08001120 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0ba      	sub	sp, #232	@ 0xe8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	22b8      	movs	r2, #184	@ 0xb8
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f009 f855 	bl	800a1f0 <memset>
  if(hsd->Instance==SDMMC1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a4b      	ldr	r2, [pc, #300]	@ (8001278 <HAL_SD_MspInit+0x158>)
 800114c:	4293      	cmp	r3, r2
 800114e:	f040 808f 	bne.w	8001270 <HAL_SD_MspInit+0x150>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001152:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800115e:	2300      	movs	r3, #0
 8001160:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001162:	f107 0318 	add.w	r3, r7, #24
 8001166:	4618      	mov	r0, r3
 8001168:	f002 ff6a 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001172:	f7ff ff01 	bl	8000f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001176:	4b41      	ldr	r3, [pc, #260]	@ (800127c <HAL_SD_MspInit+0x15c>)
 8001178:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800117c:	4a3f      	ldr	r2, [pc, #252]	@ (800127c <HAL_SD_MspInit+0x15c>)
 800117e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001182:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001186:	4b3d      	ldr	r3, [pc, #244]	@ (800127c <HAL_SD_MspInit+0x15c>)
 8001188:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800118c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b39      	ldr	r3, [pc, #228]	@ (800127c <HAL_SD_MspInit+0x15c>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	4a38      	ldr	r2, [pc, #224]	@ (800127c <HAL_SD_MspInit+0x15c>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a4:	4b35      	ldr	r3, [pc, #212]	@ (800127c <HAL_SD_MspInit+0x15c>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4b32      	ldr	r3, [pc, #200]	@ (800127c <HAL_SD_MspInit+0x15c>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b8:	4a30      	ldr	r2, [pc, #192]	@ (800127c <HAL_SD_MspInit+0x15c>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c2:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <HAL_SD_MspInit+0x15c>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <HAL_SD_MspInit+0x15c>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d6:	4a29      	ldr	r2, [pc, #164]	@ (800127c <HAL_SD_MspInit+0x15c>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e0:	4b26      	ldr	r3, [pc, #152]	@ (800127c <HAL_SD_MspInit+0x15c>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001208:	230c      	movs	r3, #12
 800120a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001212:	4619      	mov	r1, r3
 8001214:	481a      	ldr	r0, [pc, #104]	@ (8001280 <HAL_SD_MspInit+0x160>)
 8001216:	f001 f961 	bl	80024dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800121a:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800121e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001234:	230c      	movs	r3, #12
 8001236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800123e:	4619      	mov	r1, r3
 8001240:	4810      	ldr	r0, [pc, #64]	@ (8001284 <HAL_SD_MspInit+0x164>)
 8001242:	f001 f94b 	bl	80024dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001246:	2304      	movs	r3, #4
 8001248:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800125e:	230c      	movs	r3, #12
 8001260:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001264:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001268:	4619      	mov	r1, r3
 800126a:	4807      	ldr	r0, [pc, #28]	@ (8001288 <HAL_SD_MspInit+0x168>)
 800126c:	f001 f936 	bl	80024dc <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001270:	bf00      	nop
 8001272:	37e8      	adds	r7, #232	@ 0xe8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	52007000 	.word	0x52007000
 800127c:	58024400 	.word	0x58024400
 8001280:	58020400 	.word	0x58020400
 8001284:	58020800 	.word	0x58020800
 8001288:	58020c00 	.word	0x58020c00

0800128c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	@ 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a34      	ldr	r2, [pc, #208]	@ (800137c <HAL_SPI_MspInit+0xf0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d12e      	bne.n	800130c <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80012ae:	4b34      	ldr	r3, [pc, #208]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 80012b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012b4:	4a32      	ldr	r2, [pc, #200]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 80012b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012be:	4b30      	ldr	r3, [pc, #192]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 80012c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 80012d4:	f043 0310 	orr.w	r3, r3, #16
 80012d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012dc:	4b28      	ldr	r3, [pc, #160]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80012fa:	2305      	movs	r3, #5
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	481f      	ldr	r0, [pc, #124]	@ (8001384 <HAL_SPI_MspInit+0xf8>)
 8001306:	f001 f8e9 	bl	80024dc <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI6_MspInit 1 */

    /* USER CODE END SPI6_MspInit 1 */
  }

}
 800130a:	e032      	b.n	8001372 <HAL_SPI_MspInit+0xe6>
  else if(hspi->Instance==SPI6)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1d      	ldr	r2, [pc, #116]	@ (8001388 <HAL_SPI_MspInit+0xfc>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12d      	bne.n	8001372 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 8001318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800131c:	4a18      	ldr	r2, [pc, #96]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001326:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 8001328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800132c:	f003 0320 	and.w	r3, r3, #32
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	4a11      	ldr	r2, [pc, #68]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_SPI_MspInit+0xf4>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001352:	23e0      	movs	r3, #224	@ 0xe0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001362:	2308      	movs	r3, #8
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	4807      	ldr	r0, [pc, #28]	@ (800138c <HAL_SPI_MspInit+0x100>)
 800136e:	f001 f8b5 	bl	80024dc <HAL_GPIO_Init>
}
 8001372:	bf00      	nop
 8001374:	3730      	adds	r7, #48	@ 0x30
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40013400 	.word	0x40013400
 8001380:	58024400 	.word	0x58024400
 8001384:	58021000 	.word	0x58021000
 8001388:	58001400 	.word	0x58001400
 800138c:	58020000 	.word	0x58020000

08001390 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a35      	ldr	r2, [pc, #212]	@ (8001474 <HAL_TIM_PWM_MspInit+0xe4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10f      	bne.n	80013c2 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a2:	4b35      	ldr	r3, [pc, #212]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 80013a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013a8:	4a33      	ldr	r2, [pc, #204]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013b2:	4b31      	ldr	r3, [pc, #196]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 80013b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 80013c0:	e052      	b.n	8001468 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013ca:	d10f      	bne.n	80013ec <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 80013ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013d2:	4a29      	ldr	r2, [pc, #164]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013dc:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 80013de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	69bb      	ldr	r3, [r7, #24]
}
 80013ea:	e03d      	b.n	8001468 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM3)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a22      	ldr	r2, [pc, #136]	@ (800147c <HAL_TIM_PWM_MspInit+0xec>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10f      	bne.n	8001416 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 80013f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 80013fe:	f043 0302 	orr.w	r3, r3, #2
 8001402:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 8001408:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
}
 8001414:	e028      	b.n	8001468 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM4)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a19      	ldr	r2, [pc, #100]	@ (8001480 <HAL_TIM_PWM_MspInit+0xf0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d10f      	bne.n	8001440 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 8001422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001426:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001430:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 8001432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
}
 800143e:	e013      	b.n	8001468 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM12)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0f      	ldr	r2, [pc, #60]	@ (8001484 <HAL_TIM_PWM_MspInit+0xf4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10e      	bne.n	8001468 <HAL_TIM_PWM_MspInit+0xd8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 800144c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001450:	4a09      	ldr	r2, [pc, #36]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 8001452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001456:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <HAL_TIM_PWM_MspInit+0xe8>)
 800145c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	bf00      	nop
 800146a:	3724      	adds	r7, #36	@ 0x24
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40010000 	.word	0x40010000
 8001478:	58024400 	.word	0x58024400
 800147c:	40000400 	.word	0x40000400
 8001480:	40000800 	.word	0x40000800
 8001484:	40001800 	.word	0x40001800

08001488 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0e      	ldr	r2, [pc, #56]	@ (80014d0 <HAL_TIM_Base_MspInit+0x48>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d116      	bne.n	80014c8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_TIM_Base_MspInit+0x4c>)
 800149c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014a0:	4a0c      	ldr	r2, [pc, #48]	@ (80014d4 <HAL_TIM_Base_MspInit+0x4c>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_TIM_Base_MspInit+0x4c>)
 80014ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2036      	movs	r0, #54	@ 0x36
 80014be:	f000 fbfc 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014c2:	2036      	movs	r0, #54	@ 0x36
 80014c4:	f000 fc13 	bl	8001cee <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40001000 	.word	0x40001000
 80014d4:	58024400 	.word	0x58024400

080014d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	@ 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a5e      	ldr	r2, [pc, #376]	@ (8001670 <HAL_TIM_MspPostInit+0x198>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d120      	bne.n	800153c <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001500:	4a5c      	ldr	r2, [pc, #368]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150a:	4b5a      	ldr	r3, [pc, #360]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800152a:	2301      	movs	r3, #1
 800152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4850      	ldr	r0, [pc, #320]	@ (8001678 <HAL_TIM_MspPostInit+0x1a0>)
 8001536:	f000 ffd1 	bl	80024dc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800153a:	e095      	b.n	8001668 <HAL_TIM_MspPostInit+0x190>
  else if(htim->Instance==TIM2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001544:	d120      	bne.n	8001588 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b4b      	ldr	r3, [pc, #300]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154c:	4a49      	ldr	r2, [pc, #292]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001556:	4b47      	ldr	r3, [pc, #284]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001564:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001576:	2301      	movs	r3, #1
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	483e      	ldr	r0, [pc, #248]	@ (800167c <HAL_TIM_MspPostInit+0x1a4>)
 8001582:	f000 ffab 	bl	80024dc <HAL_GPIO_Init>
}
 8001586:	e06f      	b.n	8001668 <HAL_TIM_MspPostInit+0x190>
  else if(htim->Instance==TIM3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a3c      	ldr	r2, [pc, #240]	@ (8001680 <HAL_TIM_MspPostInit+0x1a8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d11f      	bne.n	80015d2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001598:	4a36      	ldr	r2, [pc, #216]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a2:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b0:	2340      	movs	r3, #64	@ 0x40
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	482e      	ldr	r0, [pc, #184]	@ (8001684 <HAL_TIM_MspPostInit+0x1ac>)
 80015cc:	f000 ff86 	bl	80024dc <HAL_GPIO_Init>
}
 80015d0:	e04a      	b.n	8001668 <HAL_TIM_MspPostInit+0x190>
  else if(htim->Instance==TIM4)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001688 <HAL_TIM_MspPostInit+0x1b0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d120      	bne.n	800161e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015dc:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e2:	4a24      	ldr	r2, [pc, #144]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ec:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800160c:	2302      	movs	r3, #2
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	481d      	ldr	r0, [pc, #116]	@ (800168c <HAL_TIM_MspPostInit+0x1b4>)
 8001618:	f000 ff60 	bl	80024dc <HAL_GPIO_Init>
}
 800161c:	e024      	b.n	8001668 <HAL_TIM_MspPostInit+0x190>
  else if(htim->Instance==TIM12)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1b      	ldr	r2, [pc, #108]	@ (8001690 <HAL_TIM_MspPostInit+0x1b8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d11f      	bne.n	8001668 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162e:	4a11      	ldr	r2, [pc, #68]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_TIM_MspPostInit+0x19c>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001646:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001658:	2302      	movs	r3, #2
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	4806      	ldr	r0, [pc, #24]	@ (800167c <HAL_TIM_MspPostInit+0x1a4>)
 8001664:	f000 ff3a 	bl	80024dc <HAL_GPIO_Init>
}
 8001668:	bf00      	nop
 800166a:	3730      	adds	r7, #48	@ 0x30
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40010000 	.word	0x40010000
 8001674:	58024400 	.word	0x58024400
 8001678:	58021000 	.word	0x58021000
 800167c:	58020400 	.word	0x58020400
 8001680:	40000400 	.word	0x40000400
 8001684:	58020800 	.word	0x58020800
 8001688:	40000800 	.word	0x40000800
 800168c:	58020c00 	.word	0x58020c00
 8001690:	40001800 	.word	0x40001800

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <NMI_Handler+0x4>

0800169c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <MemManage_Handler+0x4>

080016ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <UsageFault_Handler+0x4>

080016bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ea:	f000 f9b1 	bl	8001a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <TIM6_DAC_IRQHandler+0x10>)
 80016fa:	f007 f896 	bl	800882a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	24000454 	.word	0x24000454

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800170c:	4b3e      	ldr	r3, [pc, #248]	@ (8001808 <SystemInit+0x100>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001712:	4a3d      	ldr	r2, [pc, #244]	@ (8001808 <SystemInit+0x100>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800171c:	4b3b      	ldr	r3, [pc, #236]	@ (800180c <SystemInit+0x104>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	2b06      	cmp	r3, #6
 8001726:	d807      	bhi.n	8001738 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001728:	4b38      	ldr	r3, [pc, #224]	@ (800180c <SystemInit+0x104>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 030f 	bic.w	r3, r3, #15
 8001730:	4a36      	ldr	r2, [pc, #216]	@ (800180c <SystemInit+0x104>)
 8001732:	f043 0307 	orr.w	r3, r3, #7
 8001736:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001738:	4b35      	ldr	r3, [pc, #212]	@ (8001810 <SystemInit+0x108>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a34      	ldr	r2, [pc, #208]	@ (8001810 <SystemInit+0x108>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001744:	4b32      	ldr	r3, [pc, #200]	@ (8001810 <SystemInit+0x108>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800174a:	4b31      	ldr	r3, [pc, #196]	@ (8001810 <SystemInit+0x108>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4930      	ldr	r1, [pc, #192]	@ (8001810 <SystemInit+0x108>)
 8001750:	4b30      	ldr	r3, [pc, #192]	@ (8001814 <SystemInit+0x10c>)
 8001752:	4013      	ands	r3, r2
 8001754:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <SystemInit+0x104>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <SystemInit+0x104>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 030f 	bic.w	r3, r3, #15
 800176a:	4a28      	ldr	r2, [pc, #160]	@ (800180c <SystemInit+0x104>)
 800176c:	f043 0307 	orr.w	r3, r3, #7
 8001770:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001772:	4b27      	ldr	r3, [pc, #156]	@ (8001810 <SystemInit+0x108>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001778:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <SystemInit+0x108>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800177e:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <SystemInit+0x108>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <SystemInit+0x108>)
 8001786:	4a24      	ldr	r2, [pc, #144]	@ (8001818 <SystemInit+0x110>)
 8001788:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <SystemInit+0x108>)
 800178c:	4a23      	ldr	r2, [pc, #140]	@ (800181c <SystemInit+0x114>)
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001790:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <SystemInit+0x108>)
 8001792:	4a23      	ldr	r2, [pc, #140]	@ (8001820 <SystemInit+0x118>)
 8001794:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001796:	4b1e      	ldr	r3, [pc, #120]	@ (8001810 <SystemInit+0x108>)
 8001798:	2200      	movs	r2, #0
 800179a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800179c:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <SystemInit+0x108>)
 800179e:	4a20      	ldr	r2, [pc, #128]	@ (8001820 <SystemInit+0x118>)
 80017a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <SystemInit+0x108>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <SystemInit+0x108>)
 80017aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001820 <SystemInit+0x118>)
 80017ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017ae:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <SystemInit+0x108>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <SystemInit+0x108>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a15      	ldr	r2, [pc, #84]	@ (8001810 <SystemInit+0x108>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <SystemInit+0x108>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80017c6:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <SystemInit+0x108>)
 80017c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d113      	bne.n	80017fc <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <SystemInit+0x108>)
 80017d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017da:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <SystemInit+0x108>)
 80017dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <SystemInit+0x11c>)
 80017e6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017ea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <SystemInit+0x108>)
 80017ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017f2:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <SystemInit+0x108>)
 80017f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00
 800180c:	52002000 	.word	0x52002000
 8001810:	58024400 	.word	0x58024400
 8001814:	eaf6ed7f 	.word	0xeaf6ed7f
 8001818:	02020200 	.word	0x02020200
 800181c:	01ff0000 	.word	0x01ff0000
 8001820:	01010280 	.word	0x01010280
 8001824:	52004000 	.word	0x52004000

08001828 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800182c:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <ExitRun0Mode+0x2c>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4a08      	ldr	r2, [pc, #32]	@ (8001854 <ExitRun0Mode+0x2c>)
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001838:	bf00      	nop
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <ExitRun0Mode+0x2c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f9      	beq.n	800183a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	58024800 	.word	0x58024800

08001858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001858:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001894 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800185c:	f7ff ffe4 	bl	8001828 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001860:	f7ff ff52 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001864:	480c      	ldr	r0, [pc, #48]	@ (8001898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001866:	490d      	ldr	r1, [pc, #52]	@ (800189c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001868:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800186c:	e002      	b.n	8001874 <LoopCopyDataInit>

0800186e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001872:	3304      	adds	r3, #4

08001874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001878:	d3f9      	bcc.n	800186e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187a:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800187c:	4c0a      	ldr	r4, [pc, #40]	@ (80018a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001880:	e001      	b.n	8001886 <LoopFillZerobss>

08001882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001884:	3204      	adds	r2, #4

08001886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001888:	d3fb      	bcc.n	8001882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188a:	f008 fcb9 	bl	800a200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188e:	f7fe fd3d 	bl	800030c <main>
  bx  lr
 8001892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001894:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001898:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800189c:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80018a0:	0800a2e0 	.word	0x0800a2e0
  ldr r2, =_sbss
 80018a4:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80018a8:	240004f0 	.word	0x240004f0

080018ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC3_IRQHandler>

080018ae <_cs_deassert>:
// Static function for software CS control
static void _cs_assert(ADC108S022 *dev) {
    HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
}

static void _cs_deassert(ADC108S022 *dev) {
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6858      	ldr	r0, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	891b      	ldrh	r3, [r3, #8]
 80018be:	2201      	movs	r2, #1
 80018c0:	4619      	mov	r1, r3
 80018c2:	f000 ffb3 	bl	800282c <HAL_GPIO_WritePin>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <ADC108S022_Init>:

static uint8_t _build_control_byte(uint8_t channel) {
    return (channel & 0x07) << 3;  // 0b000DDD00 (DDD = channel)
}

void ADC108S022_Init(ADC108S022 *dev) {
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
    // Ensure CS pin is initialized externally (CubeMX/your code)
    _cs_deassert(dev);  // Start with CS high
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffe9 	bl	80018ae <_cs_deassert>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_write_reg>:
#include "mcp23017.h"

// Private: Write to MCP23017 register
static void _write_reg(MCP23017 *hdev, uint8_t reg, uint8_t value) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
 80018f0:	4613      	mov	r3, r2
 80018f2:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = {reg, value};
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	733b      	strb	r3, [r7, #12]
 80018f8:	78bb      	ldrb	r3, [r7, #2]
 80018fa:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hdev->hi2c, hdev->i2c_addr << 1, data, 2, HAL_MAX_DELAY);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	791b      	ldrb	r3, [r3, #4]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b299      	uxth	r1, r3
 8001908:	f107 020c 	add.w	r2, r7, #12
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2302      	movs	r3, #2
 8001914:	f001 f840 	bl	8002998 <HAL_I2C_Master_Transmit>
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <MCP23017_Init>:
    HAL_I2C_Master_Receive(hdev->hi2c, hdev->i2c_addr << 1, &value, 1, HAL_MAX_DELAY);
    return value;
}

// Initialize MCP23017 (enable interrupts on all pins)
void MCP23017_Init(MCP23017 *hdev) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    // Set all pins as inputs by default (can override later with PinMode)
    _write_reg(hdev, MCP_IODIRA, 0xFF);      // Port A as inputs
 8001928:	22ff      	movs	r2, #255	@ 0xff
 800192a:	2100      	movs	r1, #0
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffd9 	bl	80018e4 <_write_reg>
    _write_reg(hdev, MCP_IODIRA + 1, 0xFF);  // Port B as inputs
 8001932:	22ff      	movs	r2, #255	@ 0xff
 8001934:	2101      	movs	r1, #1
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffd4 	bl	80018e4 <_write_reg>

    // Enable interrupts on all pins (trigger on any change)
    _write_reg(hdev, MCP_GPINTENA, 0xFF);    // Port A: interrupt-on-change
 800193c:	22ff      	movs	r2, #255	@ 0xff
 800193e:	2104      	movs	r1, #4
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ffcf 	bl	80018e4 <_write_reg>
    _write_reg(hdev, MCP_GPINTENB, 0xFF);    // Port B: interrupt-on-change
 8001946:	22ff      	movs	r2, #255	@ 0xff
 8001948:	2105      	movs	r1, #5
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ffca 	bl	80018e4 <_write_reg>
    _write_reg(hdev, MCP_INTCONA, 0x00);     // Trigger on change (not comparison)
 8001950:	2200      	movs	r2, #0
 8001952:	2108      	movs	r1, #8
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffc5 	bl	80018e4 <_write_reg>
    _write_reg(hdev, MCP_INTCONA + 1, 0x00); // Port B same behavior
 800195a:	2200      	movs	r2, #0
 800195c:	2109      	movs	r1, #9
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffc0 	bl	80018e4 <_write_reg>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001972:	2003      	movs	r0, #3
 8001974:	f000 f996 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001978:	f002 f9a2 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_Init+0x68>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	4913      	ldr	r1, [pc, #76]	@ (80019d8 <HAL_Init+0x6c>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001996:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <HAL_Init+0x68>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	4a0e      	ldr	r2, [pc, #56]	@ (80019d8 <HAL_Init+0x6c>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <HAL_Init+0x70>)
 80019ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019b0:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <HAL_Init+0x74>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b6:	200f      	movs	r0, #15
 80019b8:	f000 f814 	bl	80019e4 <HAL_InitTick>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e002      	b.n	80019cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019c6:	f7ff fadd 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	58024400 	.word	0x58024400
 80019d8:	0800a2c8 	.word	0x0800a2c8
 80019dc:	2400007c 	.word	0x2400007c
 80019e0:	24000078 	.word	0x24000078

080019e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019ec:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <HAL_InitTick+0x60>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e021      	b.n	8001a3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019f8:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <HAL_InitTick+0x64>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_InitTick+0x60>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f97b 	bl	8001d0a <HAL_SYSTICK_Config>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00e      	b.n	8001a3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b0f      	cmp	r3, #15
 8001a22:	d80a      	bhi.n	8001a3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f000 f945 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a30:	4a06      	ldr	r2, [pc, #24]	@ (8001a4c <HAL_InitTick+0x68>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	24000084 	.word	0x24000084
 8001a48:	24000078 	.word	0x24000078
 8001a4c:	24000080 	.word	0x24000080

08001a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_IncTick+0x20>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_IncTick+0x24>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <HAL_IncTick+0x24>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	24000084 	.word	0x24000084
 8001a74:	240004ec 	.word	0x240004ec

08001a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	@ (8001a8c <HAL_GetTick+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	240004ec 	.word	0x240004ec

08001a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff ffee 	bl	8001a78 <HAL_GetTick>
 8001a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa8:	d005      	beq.n	8001ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <HAL_Delay+0x44>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab6:	bf00      	nop
 8001ab8:	f7ff ffde 	bl	8001a78 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d8f7      	bhi.n	8001ab8 <HAL_Delay+0x28>
  {
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	24000084 	.word	0x24000084

08001ad8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001ae2:	4b07      	ldr	r3, [pc, #28]	@ (8001b00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	4904      	ldr	r1, [pc, #16]	@ (8001b00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	58000400 	.word	0x58000400

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <__NVIC_SetPriorityGrouping+0x40>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <__NVIC_SetPriorityGrouping+0x40>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00
 8001b48:	05fa0000 	.word	0x05fa0000

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	@ (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	@ (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	@ 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff29 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc8:	f7ff ff40 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f7ff ff90 	bl	8001bf8 <NVIC_EncodePriority>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff5f 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff33 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffa4 	bl	8001c60 <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d28:	f3bf 8f5f 	dmb	sy
}
 8001d2c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d2e:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <HAL_MPU_Disable+0x28>)
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	4a06      	ldr	r2, [pc, #24]	@ (8001d4c <HAL_MPU_Disable+0x28>)
 8001d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d38:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d3a:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_MPU_Disable+0x2c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00
 8001d50:	e000ed90 	.word	0xe000ed90

08001d54 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d8c <HAL_MPU_Enable+0x38>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_MPU_Enable+0x3c>)
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	4a09      	ldr	r2, [pc, #36]	@ (8001d90 <HAL_MPU_Enable+0x3c>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d70:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d72:	f3bf 8f4f 	dsb	sy
}
 8001d76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d78:	f3bf 8f6f 	isb	sy
}
 8001d7c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed90 	.word	0xe000ed90
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	785a      	ldrb	r2, [r3, #1]
 8001da0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_MPU_ConfigRegion+0x7c>)
 8001da2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_MPU_ConfigRegion+0x7c>)
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	4a19      	ldr	r2, [pc, #100]	@ (8001e10 <HAL_MPU_ConfigRegion+0x7c>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001db0:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <HAL_MPU_ConfigRegion+0x7c>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7b1b      	ldrb	r3, [r3, #12]
 8001dbc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7adb      	ldrb	r3, [r3, #11]
 8001dc2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7a9b      	ldrb	r3, [r3, #10]
 8001dca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7b5b      	ldrb	r3, [r3, #13]
 8001dd2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7b9b      	ldrb	r3, [r3, #14]
 8001dda:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ddc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7bdb      	ldrb	r3, [r3, #15]
 8001de2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001de4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7a5b      	ldrb	r3, [r3, #9]
 8001dea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7a1b      	ldrb	r3, [r3, #8]
 8001df2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001df4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dfc:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dfe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e00:	6113      	str	r3, [r2, #16]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed90 	.word	0xe000ed90

08001e14 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b098      	sub	sp, #96	@ 0x60
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001e1c:	4a84      	ldr	r2, [pc, #528]	@ (8002030 <HAL_FDCAN_Init+0x21c>)
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	4611      	mov	r1, r2
 8001e24:	224c      	movs	r2, #76	@ 0x4c
 8001e26:	4618      	mov	r0, r3
 8001e28:	f008 fa0e 	bl	800a248 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e1c6      	b.n	80021c4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002034 <HAL_FDCAN_Init+0x220>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d106      	bne.n	8001e4e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff f8a8 	bl	8000fb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0210 	bic.w	r2, r2, #16
 8001e76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e78:	f7ff fdfe 	bl	8001a78 <HAL_GetTick>
 8001e7c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e7e:	e014      	b.n	8001eaa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001e80:	f7ff fdfa 	bl	8001a78 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b0a      	cmp	r3, #10
 8001e8c:	d90d      	bls.n	8001eaa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e18c      	b.n	80021c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d0e3      	beq.n	8001e80 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec8:	f7ff fdd6 	bl	8001a78 <HAL_GetTick>
 8001ecc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ece:	e014      	b.n	8001efa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ed0:	f7ff fdd2 	bl	8001a78 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b0a      	cmp	r3, #10
 8001edc:	d90d      	bls.n	8001efa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e164      	b.n	80021c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0e3      	beq.n	8001ed0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0202 	orr.w	r2, r2, #2
 8001f16:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7c1b      	ldrb	r3, [r3, #16]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f2e:	619a      	str	r2, [r3, #24]
 8001f30:	e007      	b.n	8001f42 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f40:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7c5b      	ldrb	r3, [r3, #17]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d108      	bne.n	8001f5c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699a      	ldr	r2, [r3, #24]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f58:	619a      	str	r2, [r3, #24]
 8001f5a:	e007      	b.n	8001f6c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f6a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7c9b      	ldrb	r3, [r3, #18]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d108      	bne.n	8001f86 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f82:	619a      	str	r2, [r3, #24]
 8001f84:	e007      	b.n	8001f96 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699a      	ldr	r2, [r3, #24]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001f94:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001fba:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0210 	bic.w	r2, r2, #16
 8001fca:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0204 	orr.w	r2, r2, #4
 8001fe2:	619a      	str	r2, [r3, #24]
 8001fe4:	e030      	b.n	8002048 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d02c      	beq.n	8002048 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d020      	beq.n	8002038 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699a      	ldr	r2, [r3, #24]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002004:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0210 	orr.w	r2, r2, #16
 8002014:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d114      	bne.n	8002048 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0220 	orr.w	r2, r2, #32
 800202c:	619a      	str	r2, [r3, #24]
 800202e:	e00b      	b.n	8002048 <HAL_FDCAN_Init+0x234>
 8002030:	0800a27c 	.word	0x0800a27c
 8002034:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	3b01      	subs	r3, #1
 800204e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	3b01      	subs	r3, #1
 8002056:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002058:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002060:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	3b01      	subs	r3, #1
 800206a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002070:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002072:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800207c:	d115      	bne.n	80020aa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002088:	3b01      	subs	r3, #1
 800208a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800208c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	3b01      	subs	r3, #1
 8002094:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002096:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	3b01      	subs	r3, #1
 80020a0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80020a6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80020a8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d0:	4413      	add	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d011      	beq.n	80020fa <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80020de:	f023 0107 	bic.w	r1, r3, #7
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	3360      	adds	r3, #96	@ 0x60
 80020ea:	443b      	add	r3, r7
 80020ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d011      	beq.n	8002126 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800210a:	f023 0107 	bic.w	r1, r3, #7
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	3360      	adds	r3, #96	@ 0x60
 8002116:	443b      	add	r3, r7
 8002118:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002136:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	3360      	adds	r3, #96	@ 0x60
 8002142:	443b      	add	r3, r7
 8002144:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002148:	011a      	lsls	r2, r3, #4
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002158:	2b00      	cmp	r3, #0
 800215a:	d012      	beq.n	8002182 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002164:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3360      	adds	r3, #96	@ 0x60
 8002170:	443b      	add	r3, r7
 8002172:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002176:	021a      	lsls	r2, r3, #8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a11      	ldr	r2, [pc, #68]	@ (80021cc <HAL_FDCAN_Init+0x3b8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d107      	bne.n	800219c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f022 0203 	bic.w	r2, r2, #3
 800219a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f80b 	bl	80021d0 <FDCAN_CalcultateRamBlockAddresses>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80021c0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3760      	adds	r7, #96	@ 0x60
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	4000a000 	.word	0x4000a000

080021d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021dc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80021e6:	4ba7      	ldr	r3, [pc, #668]	@ (8002484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	0091      	lsls	r1, r2, #2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	430b      	orrs	r3, r1
 80021f4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002200:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	4413      	add	r3, r2
 800221c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002226:	4b97      	ldr	r3, [pc, #604]	@ (8002484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002228:	4013      	ands	r3, r2
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	0091      	lsls	r1, r2, #2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	430b      	orrs	r3, r1
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002240:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002248:	041a      	lsls	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4413      	add	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002268:	4b86      	ldr	r3, [pc, #536]	@ (8002484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800226a:	4013      	ands	r3, r2
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	0091      	lsls	r1, r2, #2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	430b      	orrs	r3, r1
 8002276:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002282:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	041a      	lsls	r2, r3, #16
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	4413      	add	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022b0:	4b74      	ldr	r3, [pc, #464]	@ (8002484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	0091      	lsls	r1, r2, #2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	430b      	orrs	r3, r1
 80022be:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80022ca:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d2:	041a      	lsls	r2, r3, #16
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	4413      	add	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80022f8:	4b62      	ldr	r3, [pc, #392]	@ (8002484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	0091      	lsls	r1, r2, #2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	430b      	orrs	r3, r1
 8002306:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4413      	add	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002324:	4b57      	ldr	r3, [pc, #348]	@ (8002484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002326:	4013      	ands	r3, r2
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	0091      	lsls	r1, r2, #2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	430b      	orrs	r3, r1
 8002332:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800233e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002346:	041a      	lsls	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	4413      	add	r3, r2
 800235c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002366:	4b47      	ldr	r3, [pc, #284]	@ (8002484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002368:	4013      	ands	r3, r2
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	0091      	lsls	r1, r2, #2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	430b      	orrs	r3, r1
 8002374:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002380:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002388:	041a      	lsls	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800239c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a4:	061a      	lsls	r2, r3, #24
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b4:	4b34      	ldr	r3, [pc, #208]	@ (8002488 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80023b6:	4413      	add	r3, r2
 80023b8:	009a      	lsls	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	441a      	add	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80023f0:	441a      	add	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002408:	441a      	add	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8002420:	441a      	add	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	441a      	add	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	441a      	add	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800246c:	441a      	add	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247a:	4a04      	ldr	r2, [pc, #16]	@ (800248c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d915      	bls.n	80024ac <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002480:	e006      	b.n	8002490 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002482:	bf00      	nop
 8002484:	ffff0003 	.word	0xffff0003
 8002488:	10002b00 	.word	0x10002b00
 800248c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002496:	f043 0220 	orr.w	r2, r3, #32
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2203      	movs	r2, #3
 80024a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e010      	b.n	80024ce <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e005      	b.n	80024c0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3304      	adds	r3, #4
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d3f3      	bcc.n	80024b4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	@ 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024ea:	4b86      	ldr	r3, [pc, #536]	@ (8002704 <HAL_GPIO_Init+0x228>)
 80024ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024ee:	e18c      	b.n	800280a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 817e 	beq.w	8002804 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d005      	beq.n	8002520 <HAL_GPIO_Init+0x44>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d130      	bne.n	8002582 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	2203      	movs	r2, #3
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002556:	2201      	movs	r2, #1
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f003 0201 	and.w	r2, r3, #1
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b03      	cmp	r3, #3
 800258c:	d017      	beq.n	80025be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d123      	bne.n	8002612 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	220f      	movs	r2, #15
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	69b9      	ldr	r1, [r7, #24]
 800260e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0203 	and.w	r2, r3, #3
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80d8 	beq.w	8002804 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002654:	4b2c      	ldr	r3, [pc, #176]	@ (8002708 <HAL_GPIO_Init+0x22c>)
 8002656:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800265a:	4a2b      	ldr	r2, [pc, #172]	@ (8002708 <HAL_GPIO_Init+0x22c>)
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002664:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <HAL_GPIO_Init+0x22c>)
 8002666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002672:	4a26      	ldr	r2, [pc, #152]	@ (800270c <HAL_GPIO_Init+0x230>)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	3302      	adds	r3, #2
 800267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1d      	ldr	r2, [pc, #116]	@ (8002710 <HAL_GPIO_Init+0x234>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d04a      	beq.n	8002734 <HAL_GPIO_Init+0x258>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002714 <HAL_GPIO_Init+0x238>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d02b      	beq.n	80026fe <HAL_GPIO_Init+0x222>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002718 <HAL_GPIO_Init+0x23c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d025      	beq.n	80026fa <HAL_GPIO_Init+0x21e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a1a      	ldr	r2, [pc, #104]	@ (800271c <HAL_GPIO_Init+0x240>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01f      	beq.n	80026f6 <HAL_GPIO_Init+0x21a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a19      	ldr	r2, [pc, #100]	@ (8002720 <HAL_GPIO_Init+0x244>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d019      	beq.n	80026f2 <HAL_GPIO_Init+0x216>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a18      	ldr	r2, [pc, #96]	@ (8002724 <HAL_GPIO_Init+0x248>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_GPIO_Init+0x212>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a17      	ldr	r2, [pc, #92]	@ (8002728 <HAL_GPIO_Init+0x24c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00d      	beq.n	80026ea <HAL_GPIO_Init+0x20e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a16      	ldr	r2, [pc, #88]	@ (800272c <HAL_GPIO_Init+0x250>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <HAL_GPIO_Init+0x20a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a15      	ldr	r2, [pc, #84]	@ (8002730 <HAL_GPIO_Init+0x254>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_GPIO_Init+0x206>
 80026de:	2309      	movs	r3, #9
 80026e0:	e029      	b.n	8002736 <HAL_GPIO_Init+0x25a>
 80026e2:	230a      	movs	r3, #10
 80026e4:	e027      	b.n	8002736 <HAL_GPIO_Init+0x25a>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e025      	b.n	8002736 <HAL_GPIO_Init+0x25a>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e023      	b.n	8002736 <HAL_GPIO_Init+0x25a>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e021      	b.n	8002736 <HAL_GPIO_Init+0x25a>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e01f      	b.n	8002736 <HAL_GPIO_Init+0x25a>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e01d      	b.n	8002736 <HAL_GPIO_Init+0x25a>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e01b      	b.n	8002736 <HAL_GPIO_Init+0x25a>
 80026fe:	2301      	movs	r3, #1
 8002700:	e019      	b.n	8002736 <HAL_GPIO_Init+0x25a>
 8002702:	bf00      	nop
 8002704:	58000080 	.word	0x58000080
 8002708:	58024400 	.word	0x58024400
 800270c:	58000400 	.word	0x58000400
 8002710:	58020000 	.word	0x58020000
 8002714:	58020400 	.word	0x58020400
 8002718:	58020800 	.word	0x58020800
 800271c:	58020c00 	.word	0x58020c00
 8002720:	58021000 	.word	0x58021000
 8002724:	58021400 	.word	0x58021400
 8002728:	58021800 	.word	0x58021800
 800272c:	58021c00 	.word	0x58021c00
 8002730:	58022400 	.word	0x58022400
 8002734:	2300      	movs	r3, #0
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	f002 0203 	and.w	r2, r2, #3
 800273c:	0092      	lsls	r2, r2, #2
 800273e:	4093      	lsls	r3, r2
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002746:	4938      	ldr	r1, [pc, #224]	@ (8002828 <HAL_GPIO_Init+0x34c>)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800277a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	3301      	adds	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	f47f ae6b 	bne.w	80024f0 <HAL_GPIO_Init+0x14>
  }
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	3724      	adds	r7, #36	@ 0x24
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	58000400 	.word	0x58000400

0800282c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
 8002838:	4613      	mov	r3, r2
 800283a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800283c:	787b      	ldrb	r3, [r7, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002848:	e003      	b.n	8002852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	041a      	lsls	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e08b      	b.n	800298a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe fbe0 	bl	800104c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	@ 0x24
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d107      	bne.n	80028da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	e006      	b.n	80028e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d108      	bne.n	8002902 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	e007      	b.n	8002912 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002910:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <HAL_I2C_Init+0x134>)
 800291e:	430b      	orrs	r3, r1
 8002920:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002930:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69d9      	ldr	r1, [r3, #28]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1a      	ldr	r2, [r3, #32]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	02008000 	.word	0x02008000

08002998 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	461a      	mov	r2, r3
 80029a4:	460b      	mov	r3, r1
 80029a6:	817b      	strh	r3, [r7, #10]
 80029a8:	4613      	mov	r3, r2
 80029aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	f040 80fd 	bne.w	8002bb4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_I2C_Master_Transmit+0x30>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e0f6      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x21e>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029d0:	f7ff f852 	bl	8001a78 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2319      	movs	r3, #25
 80029dc:	2201      	movs	r2, #1
 80029de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f914 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0e1      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2221      	movs	r2, #33	@ 0x21
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2210      	movs	r2, #16
 80029fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	893a      	ldrh	r2, [r7, #8]
 8002a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2bff      	cmp	r3, #255	@ 0xff
 8002a22:	d906      	bls.n	8002a32 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	22ff      	movs	r2, #255	@ 0xff
 8002a28:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e007      	b.n	8002a42 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002a3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a40:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d024      	beq.n	8002a94 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	781a      	ldrb	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	4b4e      	ldr	r3, [pc, #312]	@ (8002bc0 <HAL_I2C_Master_Transmit+0x228>)
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fa83 	bl	8002f98 <I2C_TransferConfig>
 8002a92:	e066      	b.n	8002b62 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	8979      	ldrh	r1, [r7, #10]
 8002a9c:	4b48      	ldr	r3, [pc, #288]	@ (8002bc0 <HAL_I2C_Master_Transmit+0x228>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fa78 	bl	8002f98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002aa8:	e05b      	b.n	8002b62 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f907 	bl	8002cc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07b      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d034      	beq.n	8002b62 <HAL_I2C_Master_Transmit+0x1ca>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d130      	bne.n	8002b62 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	2200      	movs	r2, #0
 8002b08:	2180      	movs	r1, #128	@ 0x80
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f880 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e04d      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2bff      	cmp	r3, #255	@ 0xff
 8002b22:	d90e      	bls.n	8002b42 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	22ff      	movs	r2, #255	@ 0xff
 8002b28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	8979      	ldrh	r1, [r7, #10]
 8002b32:	2300      	movs	r3, #0
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fa2c 	bl	8002f98 <I2C_TransferConfig>
 8002b40:	e00f      	b.n	8002b62 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	8979      	ldrh	r1, [r7, #10]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fa1b 	bl	8002f98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d19e      	bne.n	8002aaa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	6a39      	ldr	r1, [r7, #32]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f8ed 	bl	8002d50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e01a      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2220      	movs	r2, #32
 8002b86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <HAL_I2C_Master_Transmit+0x22c>)
 8002b94:	400b      	ands	r3, r1
 8002b96:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	80002000 	.word	0x80002000
 8002bc4:	fe00e800 	.word	0xfe00e800

08002bc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d103      	bne.n	8002be6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d007      	beq.n	8002c04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	619a      	str	r2, [r3, #24]
  }
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c20:	e03b      	b.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f8d6 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e041      	b.n	8002cba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d02d      	beq.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7fe ff1b 	bl	8001a78 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d122      	bne.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d113      	bne.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00f      	b.n	8002cba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d0b4      	beq.n	8002c22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cce:	e033      	b.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f87f 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e031      	b.n	8002d48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d025      	beq.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	f7fe fec4 	bl	8001a78 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d302      	bcc.n	8002d02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d11a      	bne.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d013      	beq.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e007      	b.n	8002d48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d1c4      	bne.n	8002cd0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d5c:	e02f      	b.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f838 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e02d      	b.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d72:	f7fe fe81 	bl	8001a78 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d302      	bcc.n	8002d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d11a      	bne.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d013      	beq.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	f043 0220 	orr.w	r2, r3, #32
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e007      	b.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d1c8      	bne.n	8002d5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	@ 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d068      	beq.n	8002ed6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e0c:	e049      	b.n	8002ea2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d045      	beq.n	8002ea2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fe fe2f 	bl	8001a78 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <I2C_IsErrorOccurred+0x54>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d13a      	bne.n	8002ea2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e4e:	d121      	bne.n	8002e94 <I2C_IsErrorOccurred+0xbc>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e56:	d01d      	beq.n	8002e94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d01a      	beq.n	8002e94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e6e:	f7fe fe03 	bl	8001a78 <HAL_GetTick>
 8002e72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e74:	e00e      	b.n	8002e94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e76:	f7fe fdff 	bl	8001a78 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b19      	cmp	r3, #25
 8002e82:	d907      	bls.n	8002e94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	f043 0320 	orr.w	r3, r3, #32
 8002e8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e92:	e006      	b.n	8002ea2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d1e9      	bne.n	8002e76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d003      	beq.n	8002eb8 <I2C_IsErrorOccurred+0xe0>
 8002eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0aa      	beq.n	8002e0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d103      	bne.n	8002ec8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ef8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f043 0308 	orr.w	r3, r3, #8
 8002f10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01c      	beq.n	8002f86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff fe3b 	bl	8002bc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <I2C_IsErrorOccurred+0x1bc>)
 8002f5e:	400b      	ands	r3, r1
 8002f60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3728      	adds	r7, #40	@ 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	fe00e800 	.word	0xfe00e800

08002f98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fb0:	7a7b      	ldrb	r3, [r7, #9]
 8002fb2:	041b      	lsls	r3, r3, #16
 8002fb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fb8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fc6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	0d5b      	lsrs	r3, r3, #21
 8002fd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <I2C_TransferConfig+0x60>)
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	ea02 0103 	and.w	r1, r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	03ff63ff 	.word	0x03ff63ff

08002ffc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b20      	cmp	r3, #32
 8003010:	d138      	bne.n	8003084 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800301c:	2302      	movs	r3, #2
 800301e:	e032      	b.n	8003086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	@ 0x24
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800304e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d139      	bne.n	800311c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e033      	b.n	800311e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2224      	movs	r2, #36	@ 0x24
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003134:	4b19      	ldr	r3, [pc, #100]	@ (800319c <HAL_PWREx_ConfigSupply+0x70>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b04      	cmp	r3, #4
 800313e:	d00a      	beq.n	8003156 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003140:	4b16      	ldr	r3, [pc, #88]	@ (800319c <HAL_PWREx_ConfigSupply+0x70>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d001      	beq.n	8003152 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e01f      	b.n	8003192 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e01d      	b.n	8003192 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003156:	4b11      	ldr	r3, [pc, #68]	@ (800319c <HAL_PWREx_ConfigSupply+0x70>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f023 0207 	bic.w	r2, r3, #7
 800315e:	490f      	ldr	r1, [pc, #60]	@ (800319c <HAL_PWREx_ConfigSupply+0x70>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4313      	orrs	r3, r2
 8003164:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003166:	f7fe fc87 	bl	8001a78 <HAL_GetTick>
 800316a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800316c:	e009      	b.n	8003182 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800316e:	f7fe fc83 	bl	8001a78 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800317c:	d901      	bls.n	8003182 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e007      	b.n	8003192 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_PWREx_ConfigSupply+0x70>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800318a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800318e:	d1ee      	bne.n	800316e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	58024800 	.word	0x58024800

080031a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08c      	sub	sp, #48	@ 0x30
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e3c8      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8087 	beq.w	80032ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c0:	4b88      	ldr	r3, [pc, #544]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031ca:	4b86      	ldr	r3, [pc, #536]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 80031cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d007      	beq.n	80031e6 <HAL_RCC_OscConfig+0x46>
 80031d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d8:	2b18      	cmp	r3, #24
 80031da:	d110      	bne.n	80031fe <HAL_RCC_OscConfig+0x5e>
 80031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d10b      	bne.n	80031fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e6:	4b7f      	ldr	r3, [pc, #508]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d06c      	beq.n	80032cc <HAL_RCC_OscConfig+0x12c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d168      	bne.n	80032cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e3a2      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x76>
 8003208:	4b76      	ldr	r3, [pc, #472]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a75      	ldr	r2, [pc, #468]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 800320e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e02e      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x98>
 800321e:	4b71      	ldr	r3, [pc, #452]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a70      	ldr	r2, [pc, #448]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b6e      	ldr	r3, [pc, #440]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6d      	ldr	r2, [pc, #436]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003230:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e01d      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0xbc>
 8003242:	4b68      	ldr	r3, [pc, #416]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a67      	ldr	r2, [pc, #412]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b65      	ldr	r3, [pc, #404]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a64      	ldr	r2, [pc, #400]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 800325c:	4b61      	ldr	r3, [pc, #388]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a60      	ldr	r2, [pc, #384]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b5e      	ldr	r3, [pc, #376]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a5d      	ldr	r2, [pc, #372]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 800326e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe fbfc 	bl	8001a78 <HAL_GetTick>
 8003280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe fbf8 	bl	8001a78 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	@ 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e356      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003296:	4b53      	ldr	r3, [pc, #332]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0xe4>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fbe8 	bl	8001a78 <HAL_GetTick>
 80032a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fbe4 	bl	8001a78 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	@ 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e342      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032be:	4b49      	ldr	r3, [pc, #292]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x10c>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 808c 	beq.w	80033f4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032dc:	4b41      	ldr	r3, [pc, #260]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032e6:	4b3f      	ldr	r3, [pc, #252]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <HAL_RCC_OscConfig+0x162>
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2b18      	cmp	r3, #24
 80032f6:	d137      	bne.n	8003368 <HAL_RCC_OscConfig+0x1c8>
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d132      	bne.n	8003368 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003302:	4b38      	ldr	r3, [pc, #224]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_RCC_OscConfig+0x17a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e314      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800331a:	4b32      	ldr	r3, [pc, #200]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 0219 	bic.w	r2, r3, #25
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	492f      	ldr	r1, [pc, #188]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fba4 	bl	8001a78 <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003334:	f7fe fba0 	bl	8001a78 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e2fe      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003346:	4b27      	ldr	r3, [pc, #156]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b24      	ldr	r3, [pc, #144]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	061b      	lsls	r3, r3, #24
 8003360:	4920      	ldr	r1, [pc, #128]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003366:	e045      	b.n	80033f4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d026      	beq.n	80033be <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003370:	4b1c      	ldr	r3, [pc, #112]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 0219 	bic.w	r2, r3, #25
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4919      	ldr	r1, [pc, #100]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fe fb79 	bl	8001a78 <HAL_GetTick>
 8003386:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338a:	f7fe fb75 	bl	8001a78 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e2d3      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800339c:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b0e      	ldr	r3, [pc, #56]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	490b      	ldr	r1, [pc, #44]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
 80033bc:	e01a      	b.n	80033f4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033be:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a08      	ldr	r2, [pc, #32]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ca:	f7fe fb55 	bl	8001a78 <HAL_GetTick>
 80033ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d2:	f7fe fb51 	bl	8001a78 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d903      	bls.n	80033e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e2af      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
 80033e4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033e8:	4b96      	ldr	r3, [pc, #600]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ee      	bne.n	80033d2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d06a      	beq.n	80034d6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003400:	4b90      	ldr	r3, [pc, #576]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003408:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800340a:	4b8e      	ldr	r3, [pc, #568]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 800340c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b08      	cmp	r3, #8
 8003414:	d007      	beq.n	8003426 <HAL_RCC_OscConfig+0x286>
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b18      	cmp	r3, #24
 800341a:	d11b      	bne.n	8003454 <HAL_RCC_OscConfig+0x2b4>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d116      	bne.n	8003454 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003426:	4b87      	ldr	r3, [pc, #540]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_RCC_OscConfig+0x29e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2b80      	cmp	r3, #128	@ 0x80
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e282      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800343e:	4b81      	ldr	r3, [pc, #516]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	061b      	lsls	r3, r3, #24
 800344c:	497d      	ldr	r1, [pc, #500]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003452:	e040      	b.n	80034d6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d023      	beq.n	80034a4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800345c:	4b79      	ldr	r3, [pc, #484]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a78      	ldr	r2, [pc, #480]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fb06 	bl	8001a78 <HAL_GetTick>
 800346c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003470:	f7fe fb02 	bl	8001a78 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e260      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003482:	4b70      	ldr	r3, [pc, #448]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800348e:	4b6d      	ldr	r3, [pc, #436]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	061b      	lsls	r3, r3, #24
 800349c:	4969      	ldr	r1, [pc, #420]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	60cb      	str	r3, [r1, #12]
 80034a2:	e018      	b.n	80034d6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034a4:	4b67      	ldr	r3, [pc, #412]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a66      	ldr	r2, [pc, #408]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 80034aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe fae2 	bl	8001a78 <HAL_GetTick>
 80034b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034b8:	f7fe fade 	bl	8001a78 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e23c      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034ca:	4b5e      	ldr	r3, [pc, #376]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d036      	beq.n	8003550 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d019      	beq.n	800351e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ea:	4b56      	ldr	r3, [pc, #344]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 80034ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ee:	4a55      	ldr	r2, [pc, #340]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f6:	f7fe fabf 	bl	8001a78 <HAL_GetTick>
 80034fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fe:	f7fe fabb 	bl	8001a78 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e219      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003510:	4b4c      	ldr	r3, [pc, #304]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x35e>
 800351c:	e018      	b.n	8003550 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351e:	4b49      	ldr	r3, [pc, #292]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003522:	4a48      	ldr	r2, [pc, #288]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352a:	f7fe faa5 	bl	8001a78 <HAL_GetTick>
 800352e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003532:	f7fe faa1 	bl	8001a78 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e1ff      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003544:	4b3f      	ldr	r3, [pc, #252]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f0      	bne.n	8003532 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d036      	beq.n	80035ca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d019      	beq.n	8003598 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003564:	4b37      	ldr	r3, [pc, #220]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a36      	ldr	r2, [pc, #216]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 800356a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800356e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003570:	f7fe fa82 	bl	8001a78 <HAL_GetTick>
 8003574:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003578:	f7fe fa7e 	bl	8001a78 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e1dc      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800358a:	4b2e      	ldr	r3, [pc, #184]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x3d8>
 8003596:	e018      	b.n	80035ca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003598:	4b2a      	ldr	r3, [pc, #168]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a29      	ldr	r2, [pc, #164]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 800359e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035a4:	f7fe fa68 	bl	8001a78 <HAL_GetTick>
 80035a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ac:	f7fe fa64 	bl	8001a78 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e1c2      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035be:	4b21      	ldr	r3, [pc, #132]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8086 	beq.w	80036e4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_RCC_OscConfig+0x4a8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003648 <HAL_RCC_OscConfig+0x4a8>)
 80035de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035e4:	f7fe fa48 	bl	8001a78 <HAL_GetTick>
 80035e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ec:	f7fe fa44 	bl	8001a78 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	@ 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e1a2      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035fe:	4b12      	ldr	r3, [pc, #72]	@ (8003648 <HAL_RCC_OscConfig+0x4a8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d106      	bne.n	8003620 <HAL_RCC_OscConfig+0x480>
 8003612:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003616:	4a0b      	ldr	r2, [pc, #44]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6713      	str	r3, [r2, #112]	@ 0x70
 800361e:	e032      	b.n	8003686 <HAL_RCC_OscConfig+0x4e6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d111      	bne.n	800364c <HAL_RCC_OscConfig+0x4ac>
 8003628:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362c:	4a05      	ldr	r2, [pc, #20]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	6713      	str	r3, [r2, #112]	@ 0x70
 8003634:	4b03      	ldr	r3, [pc, #12]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003638:	4a02      	ldr	r2, [pc, #8]	@ (8003644 <HAL_RCC_OscConfig+0x4a4>)
 800363a:	f023 0304 	bic.w	r3, r3, #4
 800363e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003640:	e021      	b.n	8003686 <HAL_RCC_OscConfig+0x4e6>
 8003642:	bf00      	nop
 8003644:	58024400 	.word	0x58024400
 8003648:	58024800 	.word	0x58024800
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b05      	cmp	r3, #5
 8003652:	d10c      	bne.n	800366e <HAL_RCC_OscConfig+0x4ce>
 8003654:	4b83      	ldr	r3, [pc, #524]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003658:	4a82      	ldr	r2, [pc, #520]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 800365a:	f043 0304 	orr.w	r3, r3, #4
 800365e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003660:	4b80      	ldr	r3, [pc, #512]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003664:	4a7f      	ldr	r2, [pc, #508]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6713      	str	r3, [r2, #112]	@ 0x70
 800366c:	e00b      	b.n	8003686 <HAL_RCC_OscConfig+0x4e6>
 800366e:	4b7d      	ldr	r3, [pc, #500]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	4a7c      	ldr	r2, [pc, #496]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6713      	str	r3, [r2, #112]	@ 0x70
 800367a:	4b7a      	ldr	r3, [pc, #488]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367e:	4a79      	ldr	r2, [pc, #484]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d015      	beq.n	80036ba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368e:	f7fe f9f3 	bl	8001a78 <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7fe f9ef 	bl	8001a78 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e14b      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036ac:	4b6d      	ldr	r3, [pc, #436]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ee      	beq.n	8003696 <HAL_RCC_OscConfig+0x4f6>
 80036b8:	e014      	b.n	80036e4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe f9dd 	bl	8001a78 <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fe f9d9 	bl	8001a78 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e135      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036d8:	4b62      	ldr	r3, [pc, #392]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ee      	bne.n	80036c2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 812a 	beq.w	8003942 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80036ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036f6:	2b18      	cmp	r3, #24
 80036f8:	f000 80ba 	beq.w	8003870 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	2b02      	cmp	r3, #2
 8003702:	f040 8095 	bne.w	8003830 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b57      	ldr	r3, [pc, #348]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a56      	ldr	r2, [pc, #344]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 800370c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe f9b1 	bl	8001a78 <HAL_GetTick>
 8003716:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7fe f9ad 	bl	8001a78 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e10b      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800372c:	4b4d      	ldr	r3, [pc, #308]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f0      	bne.n	800371a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003738:	4b4a      	ldr	r3, [pc, #296]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 800373a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800373c:	4b4a      	ldr	r3, [pc, #296]	@ (8003868 <HAL_RCC_OscConfig+0x6c8>)
 800373e:	4013      	ands	r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003748:	0112      	lsls	r2, r2, #4
 800374a:	430a      	orrs	r2, r1
 800374c:	4945      	ldr	r1, [pc, #276]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	628b      	str	r3, [r1, #40]	@ 0x28
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	3b01      	subs	r3, #1
 8003758:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003760:	3b01      	subs	r3, #1
 8003762:	025b      	lsls	r3, r3, #9
 8003764:	b29b      	uxth	r3, r3
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376c:	3b01      	subs	r3, #1
 800376e:	041b      	lsls	r3, r3, #16
 8003770:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377a:	3b01      	subs	r3, #1
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003782:	4938      	ldr	r1, [pc, #224]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003788:	4b36      	ldr	r3, [pc, #216]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	4a35      	ldr	r2, [pc, #212]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003794:	4b33      	ldr	r3, [pc, #204]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003796:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003798:	4b34      	ldr	r3, [pc, #208]	@ (800386c <HAL_RCC_OscConfig+0x6cc>)
 800379a:	4013      	ands	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037a0:	00d2      	lsls	r2, r2, #3
 80037a2:	4930      	ldr	r1, [pc, #192]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	f023 020c 	bic.w	r2, r3, #12
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	492b      	ldr	r1, [pc, #172]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	f023 0202 	bic.w	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	4927      	ldr	r1, [pc, #156]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037cc:	4b25      	ldr	r3, [pc, #148]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	4a24      	ldr	r2, [pc, #144]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d8:	4b22      	ldr	r3, [pc, #136]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	4a21      	ldr	r2, [pc, #132]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80037e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80037f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037fc:	4b19      	ldr	r3, [pc, #100]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a18      	ldr	r2, [pc, #96]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe f936 	bl	8001a78 <HAL_GetTick>
 800380c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7fe f932 	bl	8001a78 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e090      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003822:	4b10      	ldr	r3, [pc, #64]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x670>
 800382e:	e088      	b.n	8003942 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003830:	4b0c      	ldr	r3, [pc, #48]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0b      	ldr	r2, [pc, #44]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe f91c 	bl	8001a78 <HAL_GetTick>
 8003840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe f918 	bl	8001a78 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e076      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003856:	4b03      	ldr	r3, [pc, #12]	@ (8003864 <HAL_RCC_OscConfig+0x6c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x6a4>
 8003862:	e06e      	b.n	8003942 <HAL_RCC_OscConfig+0x7a2>
 8003864:	58024400 	.word	0x58024400
 8003868:	fffffc0c 	.word	0xfffffc0c
 800386c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003870:	4b36      	ldr	r3, [pc, #216]	@ (800394c <HAL_RCC_OscConfig+0x7ac>)
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003876:	4b35      	ldr	r3, [pc, #212]	@ (800394c <HAL_RCC_OscConfig+0x7ac>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	2b01      	cmp	r3, #1
 8003882:	d031      	beq.n	80038e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0203 	and.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d12a      	bne.n	80038e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d122      	bne.n	80038e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d11a      	bne.n	80038e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	0a5b      	lsrs	r3, r3, #9
 80038b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d111      	bne.n	80038e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d108      	bne.n	80038e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	0e1b      	lsrs	r3, r3, #24
 80038da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e02b      	b.n	8003944 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80038ec:	4b17      	ldr	r3, [pc, #92]	@ (800394c <HAL_RCC_OscConfig+0x7ac>)
 80038ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d01f      	beq.n	8003942 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003902:	4b12      	ldr	r3, [pc, #72]	@ (800394c <HAL_RCC_OscConfig+0x7ac>)
 8003904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003906:	4a11      	ldr	r2, [pc, #68]	@ (800394c <HAL_RCC_OscConfig+0x7ac>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800390e:	f7fe f8b3 	bl	8001a78 <HAL_GetTick>
 8003912:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003914:	bf00      	nop
 8003916:	f7fe f8af 	bl	8001a78 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	4293      	cmp	r3, r2
 8003920:	d0f9      	beq.n	8003916 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003922:	4b0a      	ldr	r3, [pc, #40]	@ (800394c <HAL_RCC_OscConfig+0x7ac>)
 8003924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003926:	4b0a      	ldr	r3, [pc, #40]	@ (8003950 <HAL_RCC_OscConfig+0x7b0>)
 8003928:	4013      	ands	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800392e:	00d2      	lsls	r2, r2, #3
 8003930:	4906      	ldr	r1, [pc, #24]	@ (800394c <HAL_RCC_OscConfig+0x7ac>)
 8003932:	4313      	orrs	r3, r2
 8003934:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003936:	4b05      	ldr	r3, [pc, #20]	@ (800394c <HAL_RCC_OscConfig+0x7ac>)
 8003938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393a:	4a04      	ldr	r2, [pc, #16]	@ (800394c <HAL_RCC_OscConfig+0x7ac>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3730      	adds	r7, #48	@ 0x30
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	58024400 	.word	0x58024400
 8003950:	ffff0007 	.word	0xffff0007

08003954 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e19c      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003968:	4b8a      	ldr	r3, [pc, #552]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d910      	bls.n	8003998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b87      	ldr	r3, [pc, #540]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 020f 	bic.w	r2, r3, #15
 800397e:	4985      	ldr	r1, [pc, #532]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b83      	ldr	r3, [pc, #524]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e184      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d010      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d908      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039b4:	4b78      	ldr	r3, [pc, #480]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	4975      	ldr	r1, [pc, #468]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	4b70      	ldr	r3, [pc, #448]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039de:	429a      	cmp	r2, r3
 80039e0:	d908      	bls.n	80039f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	496a      	ldr	r1, [pc, #424]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d010      	beq.n	8003a22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	4b64      	ldr	r3, [pc, #400]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d908      	bls.n	8003a22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a10:	4b61      	ldr	r3, [pc, #388]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	495e      	ldr	r1, [pc, #376]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d010      	beq.n	8003a50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d908      	bls.n	8003a50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a3e:	4b56      	ldr	r3, [pc, #344]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4953      	ldr	r1, [pc, #332]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d010      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	4b4d      	ldr	r3, [pc, #308]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d908      	bls.n	8003a7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f023 020f 	bic.w	r2, r3, #15
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4947      	ldr	r1, [pc, #284]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d055      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a8a:	4b43      	ldr	r3, [pc, #268]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	4940      	ldr	r1, [pc, #256]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d121      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0f6      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003abc:	4b36      	ldr	r3, [pc, #216]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d115      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0ea      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ad4:	4b30      	ldr	r3, [pc, #192]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0de      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0d6      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003af4:	4b28      	ldr	r3, [pc, #160]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f023 0207 	bic.w	r2, r3, #7
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4925      	ldr	r1, [pc, #148]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b06:	f7fd ffb7 	bl	8001a78 <HAL_GetTick>
 8003b0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0e:	f7fd ffb3 	bl	8001a78 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e0be      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b24:	4b1c      	ldr	r3, [pc, #112]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d1eb      	bne.n	8003b0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d010      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	4b14      	ldr	r3, [pc, #80]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d208      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b52:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f023 020f 	bic.w	r2, r3, #15
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	490e      	ldr	r1, [pc, #56]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b64:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d214      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b08      	ldr	r3, [pc, #32]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 020f 	bic.w	r2, r3, #15
 8003b7a:	4906      	ldr	r1, [pc, #24]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b04      	ldr	r3, [pc, #16]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e086      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
 8003b94:	52002000 	.word	0x52002000
 8003b98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d010      	beq.n	8003bca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	4b3f      	ldr	r3, [pc, #252]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d208      	bcs.n	8003bca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	4939      	ldr	r1, [pc, #228]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d010      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	4b34      	ldr	r3, [pc, #208]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d208      	bcs.n	8003bf8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003be6:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	492e      	ldr	r1, [pc, #184]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d010      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	4b28      	ldr	r3, [pc, #160]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d208      	bcs.n	8003c26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c14:	4b25      	ldr	r3, [pc, #148]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	4922      	ldr	r1, [pc, #136]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d010      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69da      	ldr	r2, [r3, #28]
 8003c36:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d208      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c42:	4b1a      	ldr	r3, [pc, #104]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	4917      	ldr	r1, [pc, #92]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c54:	f000 f834 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b14      	ldr	r3, [pc, #80]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	0a1b      	lsrs	r3, r3, #8
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	4912      	ldr	r1, [pc, #72]	@ (8003cb0 <HAL_RCC_ClockConfig+0x35c>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c72:	4b0e      	ldr	r3, [pc, #56]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb0 <HAL_RCC_ClockConfig+0x35c>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
 8003c88:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb4 <HAL_RCC_ClockConfig+0x360>)
 8003c8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb8 <HAL_RCC_ClockConfig+0x364>)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c92:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <HAL_RCC_ClockConfig+0x368>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fea4 	bl	80019e4 <HAL_InitTick>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	58024400 	.word	0x58024400
 8003cb0:	0800a2c8 	.word	0x0800a2c8
 8003cb4:	2400007c 	.word	0x2400007c
 8003cb8:	24000078 	.word	0x24000078
 8003cbc:	24000080 	.word	0x24000080

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cc6:	4bb3      	ldr	r3, [pc, #716]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cce:	2b18      	cmp	r3, #24
 8003cd0:	f200 8155 	bhi.w	8003f7e <HAL_RCC_GetSysClockFreq+0x2be>
 8003cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d41 	.word	0x08003d41
 8003ce0:	08003f7f 	.word	0x08003f7f
 8003ce4:	08003f7f 	.word	0x08003f7f
 8003ce8:	08003f7f 	.word	0x08003f7f
 8003cec:	08003f7f 	.word	0x08003f7f
 8003cf0:	08003f7f 	.word	0x08003f7f
 8003cf4:	08003f7f 	.word	0x08003f7f
 8003cf8:	08003f7f 	.word	0x08003f7f
 8003cfc:	08003d67 	.word	0x08003d67
 8003d00:	08003f7f 	.word	0x08003f7f
 8003d04:	08003f7f 	.word	0x08003f7f
 8003d08:	08003f7f 	.word	0x08003f7f
 8003d0c:	08003f7f 	.word	0x08003f7f
 8003d10:	08003f7f 	.word	0x08003f7f
 8003d14:	08003f7f 	.word	0x08003f7f
 8003d18:	08003f7f 	.word	0x08003f7f
 8003d1c:	08003d6d 	.word	0x08003d6d
 8003d20:	08003f7f 	.word	0x08003f7f
 8003d24:	08003f7f 	.word	0x08003f7f
 8003d28:	08003f7f 	.word	0x08003f7f
 8003d2c:	08003f7f 	.word	0x08003f7f
 8003d30:	08003f7f 	.word	0x08003f7f
 8003d34:	08003f7f 	.word	0x08003f7f
 8003d38:	08003f7f 	.word	0x08003f7f
 8003d3c:	08003d73 	.word	0x08003d73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d40:	4b94      	ldr	r3, [pc, #592]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d009      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d4c:	4b91      	ldr	r3, [pc, #580]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	08db      	lsrs	r3, r3, #3
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	4a90      	ldr	r2, [pc, #576]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003d5e:	e111      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d60:	4b8d      	ldr	r3, [pc, #564]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d62:	61bb      	str	r3, [r7, #24]
      break;
 8003d64:	e10e      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003d66:	4b8d      	ldr	r3, [pc, #564]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d68:	61bb      	str	r3, [r7, #24]
      break;
 8003d6a:	e10b      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003d6c:	4b8c      	ldr	r3, [pc, #560]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d6e:	61bb      	str	r3, [r7, #24]
      break;
 8003d70:	e108      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d72:	4b88      	ldr	r3, [pc, #544]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003d7c:	4b85      	ldr	r3, [pc, #532]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d88:	4b82      	ldr	r3, [pc, #520]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d92:	4b80      	ldr	r3, [pc, #512]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80e1 	beq.w	8003f78 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f000 8083 	beq.w	8003ec4 <HAL_RCC_GetSysClockFreq+0x204>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	f200 80a1 	bhi.w	8003f08 <HAL_RCC_GetSysClockFreq+0x248>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x114>
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d056      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003dd2:	e099      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02d      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003de0:	4b6c      	ldr	r3, [pc, #432]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	08db      	lsrs	r3, r3, #3
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	4a6b      	ldr	r2, [pc, #428]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0a:	4b62      	ldr	r3, [pc, #392]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003e3a:	e087      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003fa8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b51      	ldr	r3, [pc, #324]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e7e:	e065      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003fac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b40      	ldr	r3, [pc, #256]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ea6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ec2:	e043      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003fb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f06:	e021      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003fac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003f4c:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	0a5b      	lsrs	r3, r3, #9
 8003f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f56:	3301      	adds	r3, #1
 8003f58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	ee07 3a90 	vmov	s15, r3
 8003f60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f70:	ee17 3a90 	vmov	r3, s15
 8003f74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003f76:	e005      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61bb      	str	r3, [r7, #24]
      break;
 8003f7c:	e002      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003f7e:	4b07      	ldr	r3, [pc, #28]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f80:	61bb      	str	r3, [r7, #24]
      break;
 8003f82:	bf00      	nop
  }

  return sysclockfreq;
 8003f84:	69bb      	ldr	r3, [r7, #24]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3724      	adds	r7, #36	@ 0x24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	58024400 	.word	0x58024400
 8003f98:	03d09000 	.word	0x03d09000
 8003f9c:	003d0900 	.word	0x003d0900
 8003fa0:	017d7840 	.word	0x017d7840
 8003fa4:	46000000 	.word	0x46000000
 8003fa8:	4c742400 	.word	0x4c742400
 8003fac:	4a742400 	.word	0x4a742400
 8003fb0:	4bbebc20 	.word	0x4bbebc20

08003fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003fba:	f7ff fe81 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4b10      	ldr	r3, [pc, #64]	@ (8004004 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	490f      	ldr	r1, [pc, #60]	@ (8004008 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fcc:	5ccb      	ldrb	r3, [r1, r3]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004004 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	4a09      	ldr	r2, [pc, #36]	@ (8004008 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fe2:	5cd3      	ldrb	r3, [r2, r3]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	fa22 f303 	lsr.w	r3, r2, r3
 8003fee:	4a07      	ldr	r2, [pc, #28]	@ (800400c <HAL_RCC_GetHCLKFreq+0x58>)
 8003ff0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ff2:	4a07      	ldr	r2, [pc, #28]	@ (8004010 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ff8:	4b04      	ldr	r3, [pc, #16]	@ (800400c <HAL_RCC_GetHCLKFreq+0x58>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	58024400 	.word	0x58024400
 8004008:	0800a2c8 	.word	0x0800a2c8
 800400c:	2400007c 	.word	0x2400007c
 8004010:	24000078 	.word	0x24000078

08004014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004018:	f7ff ffcc 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 800401c:	4602      	mov	r2, r0
 800401e:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	4904      	ldr	r1, [pc, #16]	@ (800403c <HAL_RCC_GetPCLK1Freq+0x28>)
 800402a:	5ccb      	ldrb	r3, [r1, r3]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	58024400 	.word	0x58024400
 800403c:	0800a2c8 	.word	0x0800a2c8

08004040 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004044:	b0c6      	sub	sp, #280	@ 0x118
 8004046:	af00      	add	r7, sp, #0
 8004048:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800404c:	2300      	movs	r3, #0
 800404e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004052:	2300      	movs	r3, #0
 8004054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004064:	2500      	movs	r5, #0
 8004066:	ea54 0305 	orrs.w	r3, r4, r5
 800406a:	d049      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800406c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004072:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004076:	d02f      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004078:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800407c:	d828      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800407e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004082:	d01a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004084:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004088:	d822      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800408e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004092:	d007      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004094:	e01c      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004096:	4bab      	ldr	r3, [pc, #684]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	4aaa      	ldr	r2, [pc, #680]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800409c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040a2:	e01a      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a8:	3308      	adds	r3, #8
 80040aa:	2102      	movs	r1, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f002 fa49 	bl	8006544 <RCCEx_PLL2_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040b8:	e00f      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040be:	3328      	adds	r3, #40	@ 0x28
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f002 faf0 	bl	80066a8 <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040ce:	e004      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040d6:	e000      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80040d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80040e2:	4b98      	ldr	r3, [pc, #608]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80040ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040f0:	4a94      	ldr	r2, [pc, #592]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040f2:	430b      	orrs	r3, r1
 80040f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80040f6:	e003      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800410c:	f04f 0900 	mov.w	r9, #0
 8004110:	ea58 0309 	orrs.w	r3, r8, r9
 8004114:	d047      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800411a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411c:	2b04      	cmp	r3, #4
 800411e:	d82a      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004120:	a201      	add	r2, pc, #4	@ (adr r2, 8004128 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	0800413d 	.word	0x0800413d
 800412c:	0800414b 	.word	0x0800414b
 8004130:	08004161 	.word	0x08004161
 8004134:	0800417f 	.word	0x0800417f
 8004138:	0800417f 	.word	0x0800417f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800413c:	4b81      	ldr	r3, [pc, #516]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	4a80      	ldr	r2, [pc, #512]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004146:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004148:	e01a      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800414a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414e:	3308      	adds	r3, #8
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f002 f9f6 	bl	8006544 <RCCEx_PLL2_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800415e:	e00f      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004164:	3328      	adds	r3, #40	@ 0x28
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f002 fa9d 	bl	80066a8 <RCCEx_PLL3_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004174:	e004      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800417c:	e000      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800417e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004188:	4b6e      	ldr	r3, [pc, #440]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800418a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418c:	f023 0107 	bic.w	r1, r3, #7
 8004190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004196:	4a6b      	ldr	r2, [pc, #428]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004198:	430b      	orrs	r3, r1
 800419a:	6513      	str	r3, [r2, #80]	@ 0x50
 800419c:	e003      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80041b2:	f04f 0b00 	mov.w	fp, #0
 80041b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80041ba:	d05b      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80041bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041c4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80041c8:	d03b      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80041ca:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80041ce:	d834      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80041d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041d4:	d037      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80041d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041da:	d82e      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80041dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80041e0:	d033      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80041e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80041e6:	d828      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80041e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041ec:	d01a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80041ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041f2:	d822      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80041f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041fc:	d007      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80041fe:	e01c      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004200:	4b50      	ldr	r3, [pc, #320]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	4a4f      	ldr	r2, [pc, #316]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800420a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800420c:	e01e      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800420e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004212:	3308      	adds	r3, #8
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f002 f994 	bl	8006544 <RCCEx_PLL2_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004222:	e013      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004228:	3328      	adds	r3, #40	@ 0x28
 800422a:	2100      	movs	r1, #0
 800422c:	4618      	mov	r0, r3
 800422e:	f002 fa3b 	bl	80066a8 <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004238:	e008      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004240:	e004      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004242:	bf00      	nop
 8004244:	e002      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800424a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004254:	4b3b      	ldr	r3, [pc, #236]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004258:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800425c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004260:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004264:	4a37      	ldr	r2, [pc, #220]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004266:	430b      	orrs	r3, r1
 8004268:	6593      	str	r3, [r2, #88]	@ 0x58
 800426a:	e003      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004270:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004280:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800428a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800428e:	460b      	mov	r3, r1
 8004290:	4313      	orrs	r3, r2
 8004292:	d05d      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004298:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800429c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80042a0:	d03b      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80042a2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80042a6:	d834      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80042a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ac:	d037      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80042ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042b2:	d82e      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80042b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042b8:	d033      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80042ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042be:	d828      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80042c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042c4:	d01a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80042c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042ca:	d822      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80042d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042d4:	d007      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80042d6:	e01c      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042e4:	e01e      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ea:	3308      	adds	r3, #8
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f002 f928 	bl	8006544 <RCCEx_PLL2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80042fa:	e013      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004300:	3328      	adds	r3, #40	@ 0x28
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f002 f9cf 	bl	80066a8 <RCCEx_PLL3_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004310:	e008      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004318:	e004      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10d      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004330:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004338:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800433c:	4a01      	ldr	r2, [pc, #4]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800433e:	430b      	orrs	r3, r1
 8004340:	6593      	str	r3, [r2, #88]	@ 0x58
 8004342:	e005      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800434c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800435c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004360:	2300      	movs	r3, #0
 8004362:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004366:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	d03a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004376:	2b30      	cmp	r3, #48	@ 0x30
 8004378:	d01f      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800437a:	2b30      	cmp	r3, #48	@ 0x30
 800437c:	d819      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800437e:	2b20      	cmp	r3, #32
 8004380:	d00c      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004382:	2b20      	cmp	r3, #32
 8004384:	d815      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d019      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800438a:	2b10      	cmp	r3, #16
 800438c:	d111      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438e:	4baa      	ldr	r3, [pc, #680]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	4aa9      	ldr	r2, [pc, #676]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004398:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800439a:	e011      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800439c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a0:	3308      	adds	r3, #8
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f002 f8cd 	bl	8006544 <RCCEx_PLL2_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043b8:	e002      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80043be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043c8:	4b9b      	ldr	r3, [pc, #620]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80043d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d6:	4a98      	ldr	r2, [pc, #608]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043d8:	430b      	orrs	r3, r1
 80043da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043dc:	e003      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80043e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80043f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80043fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004400:	460b      	mov	r3, r1
 8004402:	4313      	orrs	r3, r2
 8004404:	d051      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800440a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004410:	d035      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004412:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004416:	d82e      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004418:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800441c:	d031      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800441e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004422:	d828      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004428:	d01a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800442a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800442e:	d822      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004438:	d007      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800443a:	e01c      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800443c:	4b7e      	ldr	r3, [pc, #504]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800443e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004440:	4a7d      	ldr	r2, [pc, #500]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004448:	e01c      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800444a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800444e:	3308      	adds	r3, #8
 8004450:	2100      	movs	r1, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f002 f876 	bl	8006544 <RCCEx_PLL2_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800445e:	e011      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004464:	3328      	adds	r3, #40	@ 0x28
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f002 f91d 	bl	80066a8 <RCCEx_PLL3_Config>
 800446e:	4603      	mov	r3, r0
 8004470:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004474:	e006      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800447c:	e002      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800448c:	4b6a      	ldr	r3, [pc, #424]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800448e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004490:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449a:	4a67      	ldr	r2, [pc, #412]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800449c:	430b      	orrs	r3, r1
 800449e:	6513      	str	r3, [r2, #80]	@ 0x50
 80044a0:	e003      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80044b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044ba:	2300      	movs	r3, #0
 80044bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044c0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4313      	orrs	r3, r2
 80044c8:	d053      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80044ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044d4:	d033      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80044d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044da:	d82c      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80044dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044e0:	d02f      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80044e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044e6:	d826      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80044e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044ec:	d02b      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80044ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044f2:	d820      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80044f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044f8:	d012      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80044fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044fe:	d81a      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d022      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004508:	d115      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800450a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450e:	3308      	adds	r3, #8
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f002 f816 	bl	8006544 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800451e:	e015      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004524:	3328      	adds	r3, #40	@ 0x28
 8004526:	2101      	movs	r1, #1
 8004528:	4618      	mov	r0, r3
 800452a:	f002 f8bd 	bl	80066a8 <RCCEx_PLL3_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004534:	e00a      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800453c:	e006      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800453e:	bf00      	nop
 8004540:	e004      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004542:	bf00      	nop
 8004544:	e002      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800454a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004554:	4b38      	ldr	r3, [pc, #224]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004558:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800455c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004562:	4a35      	ldr	r2, [pc, #212]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004564:	430b      	orrs	r3, r1
 8004566:	6513      	str	r3, [r2, #80]	@ 0x50
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800456e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800457e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004582:	2300      	movs	r3, #0
 8004584:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004588:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d058      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004596:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800459a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800459e:	d033      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80045a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045a4:	d82c      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80045a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045aa:	d02f      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b0:	d826      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80045b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045b6:	d02b      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80045b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045bc:	d820      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80045be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c2:	d012      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80045c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c8:	d81a      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d022      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80045ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045d2:	d115      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d8:	3308      	adds	r3, #8
 80045da:	2101      	movs	r1, #1
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 ffb1 	bl	8006544 <RCCEx_PLL2_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045e8:	e015      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ee:	3328      	adds	r3, #40	@ 0x28
 80045f0:	2101      	movs	r1, #1
 80045f2:	4618      	mov	r0, r3
 80045f4:	f002 f858 	bl	80066a8 <RCCEx_PLL3_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045fe:	e00a      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004606:	e006      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004608:	bf00      	nop
 800460a:	e004      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800460c:	bf00      	nop
 800460e:	e002      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10e      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800461e:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004622:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800462a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800462e:	4a02      	ldr	r2, [pc, #8]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004630:	430b      	orrs	r3, r1
 8004632:	6593      	str	r3, [r2, #88]	@ 0x58
 8004634:	e006      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004636:	bf00      	nop
 8004638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004640:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004650:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004654:	2300      	movs	r3, #0
 8004656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800465a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800465e:	460b      	mov	r3, r1
 8004660:	4313      	orrs	r3, r2
 8004662:	d037      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800466a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800466e:	d00e      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004674:	d816      	bhi.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004676:	2b00      	cmp	r3, #0
 8004678:	d018      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800467a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800467e:	d111      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004680:	4bc4      	ldr	r3, [pc, #784]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	4ac3      	ldr	r2, [pc, #780]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800468a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800468c:	e00f      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800468e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004692:	3308      	adds	r3, #8
 8004694:	2101      	movs	r1, #1
 8004696:	4618      	mov	r0, r3
 8004698:	f001 ff54 	bl	8006544 <RCCEx_PLL2_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046a2:	e004      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80046ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046b6:	4bb7      	ldr	r3, [pc, #732]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046c4:	4ab3      	ldr	r2, [pc, #716]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046c6:	430b      	orrs	r3, r1
 80046c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80046ca:	e003      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80046d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80046e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046e4:	2300      	movs	r3, #0
 80046e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80046ee:	460b      	mov	r3, r1
 80046f0:	4313      	orrs	r3, r2
 80046f2:	d039      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80046f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d81c      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80046fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004741 	.word	0x08004741
 8004708:	08004715 	.word	0x08004715
 800470c:	08004723 	.word	0x08004723
 8004710:	08004741 	.word	0x08004741
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004714:	4b9f      	ldr	r3, [pc, #636]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	4a9e      	ldr	r2, [pc, #632]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800471a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800471e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004720:	e00f      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004726:	3308      	adds	r3, #8
 8004728:	2102      	movs	r1, #2
 800472a:	4618      	mov	r0, r3
 800472c:	f001 ff0a 	bl	8006544 <RCCEx_PLL2_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004736:	e004      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800473e:	e000      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004742:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800474a:	4b92      	ldr	r3, [pc, #584]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800474c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474e:	f023 0103 	bic.w	r1, r3, #3
 8004752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004758:	4a8e      	ldr	r2, [pc, #568]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800475a:	430b      	orrs	r3, r1
 800475c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800475e:	e003      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004764:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004774:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800477e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004782:	460b      	mov	r3, r1
 8004784:	4313      	orrs	r3, r2
 8004786:	f000 8099 	beq.w	80048bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800478a:	4b83      	ldr	r3, [pc, #524]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a82      	ldr	r2, [pc, #520]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004794:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004796:	f7fd f96f 	bl	8001a78 <HAL_GetTick>
 800479a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800479e:	e00b      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a0:	f7fd f96a 	bl	8001a78 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b64      	cmp	r3, #100	@ 0x64
 80047ae:	d903      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047b6:	e005      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b8:	4b77      	ldr	r3, [pc, #476]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ed      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80047c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d173      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80047cc:	4b71      	ldr	r3, [pc, #452]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80047d8:	4053      	eors	r3, r2
 80047da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d015      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047ee:	4b69      	ldr	r3, [pc, #420]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f2:	4a68      	ldr	r2, [pc, #416]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047fa:	4b66      	ldr	r3, [pc, #408]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	4a65      	ldr	r2, [pc, #404]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004804:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004806:	4a63      	ldr	r2, [pc, #396]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800480c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800480e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004812:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800481a:	d118      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fd f92c 	bl	8001a78 <HAL_GetTick>
 8004820:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004824:	e00d      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7fd f927 	bl	8001a78 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004830:	1ad2      	subs	r2, r2, r3
 8004832:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004836:	429a      	cmp	r2, r3
 8004838:	d903      	bls.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004840:	e005      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004842:	4b54      	ldr	r3, [pc, #336]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0eb      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800484e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004852:	2b00      	cmp	r3, #0
 8004854:	d129      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800485a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800485e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004862:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004866:	d10e      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004868:	4b4a      	ldr	r3, [pc, #296]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004874:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004878:	091a      	lsrs	r2, r3, #4
 800487a:	4b48      	ldr	r3, [pc, #288]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800487c:	4013      	ands	r3, r2
 800487e:	4a45      	ldr	r2, [pc, #276]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004880:	430b      	orrs	r3, r1
 8004882:	6113      	str	r3, [r2, #16]
 8004884:	e005      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004886:	4b43      	ldr	r3, [pc, #268]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	4a42      	ldr	r2, [pc, #264]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800488c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004890:	6113      	str	r3, [r2, #16]
 8004892:	4b40      	ldr	r3, [pc, #256]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004894:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800489e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a2:	4a3c      	ldr	r2, [pc, #240]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a8:	e008      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80048b2:	e003      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80048bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f002 0301 	and.w	r3, r2, #1
 80048c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048cc:	2300      	movs	r3, #0
 80048ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80048d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80048d6:	460b      	mov	r3, r1
 80048d8:	4313      	orrs	r3, r2
 80048da:	f000 808f 	beq.w	80049fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048e4:	2b28      	cmp	r3, #40	@ 0x28
 80048e6:	d871      	bhi.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80048e8:	a201      	add	r2, pc, #4	@ (adr r2, 80048f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	080049d5 	.word	0x080049d5
 80048f4:	080049cd 	.word	0x080049cd
 80048f8:	080049cd 	.word	0x080049cd
 80048fc:	080049cd 	.word	0x080049cd
 8004900:	080049cd 	.word	0x080049cd
 8004904:	080049cd 	.word	0x080049cd
 8004908:	080049cd 	.word	0x080049cd
 800490c:	080049cd 	.word	0x080049cd
 8004910:	080049a1 	.word	0x080049a1
 8004914:	080049cd 	.word	0x080049cd
 8004918:	080049cd 	.word	0x080049cd
 800491c:	080049cd 	.word	0x080049cd
 8004920:	080049cd 	.word	0x080049cd
 8004924:	080049cd 	.word	0x080049cd
 8004928:	080049cd 	.word	0x080049cd
 800492c:	080049cd 	.word	0x080049cd
 8004930:	080049b7 	.word	0x080049b7
 8004934:	080049cd 	.word	0x080049cd
 8004938:	080049cd 	.word	0x080049cd
 800493c:	080049cd 	.word	0x080049cd
 8004940:	080049cd 	.word	0x080049cd
 8004944:	080049cd 	.word	0x080049cd
 8004948:	080049cd 	.word	0x080049cd
 800494c:	080049cd 	.word	0x080049cd
 8004950:	080049d5 	.word	0x080049d5
 8004954:	080049cd 	.word	0x080049cd
 8004958:	080049cd 	.word	0x080049cd
 800495c:	080049cd 	.word	0x080049cd
 8004960:	080049cd 	.word	0x080049cd
 8004964:	080049cd 	.word	0x080049cd
 8004968:	080049cd 	.word	0x080049cd
 800496c:	080049cd 	.word	0x080049cd
 8004970:	080049d5 	.word	0x080049d5
 8004974:	080049cd 	.word	0x080049cd
 8004978:	080049cd 	.word	0x080049cd
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049cd 	.word	0x080049cd
 8004984:	080049cd 	.word	0x080049cd
 8004988:	080049cd 	.word	0x080049cd
 800498c:	080049cd 	.word	0x080049cd
 8004990:	080049d5 	.word	0x080049d5
 8004994:	58024400 	.word	0x58024400
 8004998:	58024800 	.word	0x58024800
 800499c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a4:	3308      	adds	r3, #8
 80049a6:	2101      	movs	r1, #1
 80049a8:	4618      	mov	r0, r3
 80049aa:	f001 fdcb 	bl	8006544 <RCCEx_PLL2_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049b4:	e00f      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ba:	3328      	adds	r3, #40	@ 0x28
 80049bc:	2101      	movs	r1, #1
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 fe72 	bl	80066a8 <RCCEx_PLL3_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049ca:	e004      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049d2:	e000      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80049d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80049de:	4bbf      	ldr	r3, [pc, #764]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80049e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ec:	4abb      	ldr	r2, [pc, #748]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049ee:	430b      	orrs	r3, r1
 80049f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80049f2:	e003      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	f002 0302 	and.w	r3, r2, #2
 8004a08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	d041      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a22:	2b05      	cmp	r3, #5
 8004a24:	d824      	bhi.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004a26:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a79 	.word	0x08004a79
 8004a30:	08004a45 	.word	0x08004a45
 8004a34:	08004a5b 	.word	0x08004a5b
 8004a38:	08004a79 	.word	0x08004a79
 8004a3c:	08004a79 	.word	0x08004a79
 8004a40:	08004a79 	.word	0x08004a79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a48:	3308      	adds	r3, #8
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f001 fd79 	bl	8006544 <RCCEx_PLL2_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a58:	e00f      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a5e:	3328      	adds	r3, #40	@ 0x28
 8004a60:	2101      	movs	r1, #1
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fe20 	bl	80066a8 <RCCEx_PLL3_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a6e:	e004      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a76:	e000      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a82:	4b96      	ldr	r3, [pc, #600]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a86:	f023 0107 	bic.w	r1, r3, #7
 8004a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a90:	4a92      	ldr	r2, [pc, #584]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a92:	430b      	orrs	r3, r1
 8004a94:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a96:	e003      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f002 0304 	and.w	r3, r2, #4
 8004aac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ab6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004aba:	460b      	mov	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d044      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac8:	2b05      	cmp	r3, #5
 8004aca:	d825      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004acc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004b21 	.word	0x08004b21
 8004ad8:	08004aed 	.word	0x08004aed
 8004adc:	08004b03 	.word	0x08004b03
 8004ae0:	08004b21 	.word	0x08004b21
 8004ae4:	08004b21 	.word	0x08004b21
 8004ae8:	08004b21 	.word	0x08004b21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af0:	3308      	adds	r3, #8
 8004af2:	2101      	movs	r1, #1
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 fd25 	bl	8006544 <RCCEx_PLL2_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b00:	e00f      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b06:	3328      	adds	r3, #40	@ 0x28
 8004b08:	2101      	movs	r1, #1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f001 fdcc 	bl	80066a8 <RCCEx_PLL3_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b16:	e004      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b2a:	4b6c      	ldr	r3, [pc, #432]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2e:	f023 0107 	bic.w	r1, r3, #7
 8004b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b3a:	4a68      	ldr	r2, [pc, #416]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b40:	e003      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f002 0320 	and.w	r3, r2, #32
 8004b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	d055      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b76:	d033      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b7c:	d82c      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b82:	d02f      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b88:	d826      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004b8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b8e:	d02b      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004b90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b94:	d820      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004b96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b9a:	d012      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ba0:	d81a      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d022      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004ba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004baa:	d115      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 fcc5 	bl	8006544 <RCCEx_PLL2_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004bc0:	e015      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc6:	3328      	adds	r3, #40	@ 0x28
 8004bc8:	2102      	movs	r1, #2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f001 fd6c 	bl	80066a8 <RCCEx_PLL3_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004bd6:	e00a      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bde:	e006      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004be0:	bf00      	nop
 8004be2:	e004      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004be4:	bf00      	nop
 8004be6:	e002      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bf6:	4b39      	ldr	r3, [pc, #228]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c06:	4a35      	ldr	r2, [pc, #212]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c0c:	e003      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004c22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c26:	2300      	movs	r3, #0
 8004c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c2c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c30:	460b      	mov	r3, r1
 8004c32:	4313      	orrs	r3, r2
 8004c34:	d058      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c3e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c42:	d033      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004c44:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c48:	d82c      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4e:	d02f      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c54:	d826      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004c56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c5a:	d02b      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004c5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c60:	d820      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004c62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c66:	d012      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c6c:	d81a      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d022      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c76:	d115      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 fc5f 	bl	8006544 <RCCEx_PLL2_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c8c:	e015      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c92:	3328      	adds	r3, #40	@ 0x28
 8004c94:	2102      	movs	r1, #2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f001 fd06 	bl	80066a8 <RCCEx_PLL3_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ca2:	e00a      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004caa:	e006      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004cac:	bf00      	nop
 8004cae:	e004      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004cb0:	bf00      	nop
 8004cb2:	e002      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cc2:	4b06      	ldr	r3, [pc, #24]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cd2:	4a02      	ldr	r2, [pc, #8]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cd8:	e006      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ce4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004cf4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cfe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004d02:	460b      	mov	r3, r1
 8004d04:	4313      	orrs	r3, r2
 8004d06:	d055      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d10:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d14:	d033      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004d16:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d1a:	d82c      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d20:	d02f      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004d22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d26:	d826      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004d28:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d2c:	d02b      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004d2e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d32:	d820      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d38:	d012      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004d3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d3e:	d81a      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d022      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d48:	d115      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4e:	3308      	adds	r3, #8
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f001 fbf6 	bl	8006544 <RCCEx_PLL2_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d5e:	e015      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d64:	3328      	adds	r3, #40	@ 0x28
 8004d66:	2102      	movs	r1, #2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 fc9d 	bl	80066a8 <RCCEx_PLL3_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d74:	e00a      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d7c:	e006      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e004      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004d82:	bf00      	nop
 8004d84:	e002      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004d86:	bf00      	nop
 8004d88:	e000      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d94:	4ba0      	ldr	r3, [pc, #640]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d98:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004da4:	4a9c      	ldr	r2, [pc, #624]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004da6:	430b      	orrs	r3, r1
 8004da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004daa:	e003      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004db0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f002 0308 	and.w	r3, r2, #8
 8004dc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004dca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d01e      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de6:	3328      	adds	r3, #40	@ 0x28
 8004de8:	2102      	movs	r1, #2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 fc5c 	bl	80066a8 <RCCEx_PLL3_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004dfc:	4b86      	ldr	r3, [pc, #536]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e00:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e0c:	4a82      	ldr	r2, [pc, #520]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f002 0310 	and.w	r3, r2, #16
 8004e1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e22:	2300      	movs	r3, #0
 8004e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e28:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	d01e      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e3e:	d10c      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e44:	3328      	adds	r3, #40	@ 0x28
 8004e46:	2102      	movs	r1, #2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 fc2d 	bl	80066a8 <RCCEx_PLL3_Config>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e6a:	4a6b      	ldr	r2, [pc, #428]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004e7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e7e:	2300      	movs	r3, #0
 8004e80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e82:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004e86:	460b      	mov	r3, r1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	d03e      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e98:	d022      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004e9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e9e:	d81b      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea8:	d00b      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004eaa:	e015      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fb45 	bl	8006544 <RCCEx_PLL2_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ec0:	e00f      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec6:	3328      	adds	r3, #40	@ 0x28
 8004ec8:	2102      	movs	r1, #2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f001 fbec 	bl	80066a8 <RCCEx_PLL3_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ed6:	e004      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ede:	e000      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eea:	4b4b      	ldr	r3, [pc, #300]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004efa:	4a47      	ldr	r2, [pc, #284]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004efc:	430b      	orrs	r3, r1
 8004efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004f16:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f18:	2300      	movs	r3, #0
 8004f1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004f20:	460b      	mov	r3, r1
 8004f22:	4313      	orrs	r3, r2
 8004f24:	d03b      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f32:	d01f      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004f34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f38:	d818      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f3e:	d003      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004f40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f44:	d007      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004f46:	e011      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f48:	4b33      	ldr	r3, [pc, #204]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	4a32      	ldr	r2, [pc, #200]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f54:	e00f      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5a:	3328      	adds	r3, #40	@ 0x28
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 fba2 	bl	80066a8 <RCCEx_PLL3_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f6a:	e004      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f72:	e000      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f7e:	4b26      	ldr	r3, [pc, #152]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f8e:	4a22      	ldr	r2, [pc, #136]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f90:	430b      	orrs	r3, r1
 8004f92:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f94:	e003      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004faa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fac:	2300      	movs	r3, #0
 8004fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fb0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	d034      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc8:	d007      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004fca:	e011      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fcc:	4b12      	ldr	r3, [pc, #72]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	4a11      	ldr	r2, [pc, #68]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004fd8:	e00e      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fde:	3308      	adds	r3, #8
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 faae 	bl	8006544 <RCCEx_PLL2_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004fee:	e003      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10d      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005000:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005004:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800500c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800500e:	4a02      	ldr	r2, [pc, #8]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005010:	430b      	orrs	r3, r1
 8005012:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005014:	e006      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005020:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005030:	663b      	str	r3, [r7, #96]	@ 0x60
 8005032:	2300      	movs	r3, #0
 8005034:	667b      	str	r3, [r7, #100]	@ 0x64
 8005036:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800503a:	460b      	mov	r3, r1
 800503c:	4313      	orrs	r3, r2
 800503e:	d00c      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005044:	3328      	adds	r3, #40	@ 0x28
 8005046:	2102      	movs	r1, #2
 8005048:	4618      	mov	r0, r3
 800504a:	f001 fb2d 	bl	80066a8 <RCCEx_PLL3_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800505a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005066:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005068:	2300      	movs	r3, #0
 800506a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800506c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005070:	460b      	mov	r3, r1
 8005072:	4313      	orrs	r3, r2
 8005074:	d036      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800507a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800507c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005080:	d018      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005086:	d811      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508c:	d014      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800508e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005092:	d80b      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d011      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800509c:	d106      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509e:	4bb7      	ldr	r3, [pc, #732]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	4ab6      	ldr	r2, [pc, #728]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80050aa:	e008      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050b2:	e004      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80050b4:	bf00      	nop
 80050b6:	e002      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80050b8:	bf00      	nop
 80050ba:	e000      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80050bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050c6:	4bad      	ldr	r3, [pc, #692]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050d4:	4aa9      	ldr	r2, [pc, #676]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050d6:	430b      	orrs	r3, r1
 80050d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80050da:	e003      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80050f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80050f2:	2300      	movs	r3, #0
 80050f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80050f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80050fa:	460b      	mov	r3, r1
 80050fc:	4313      	orrs	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005100:	4b9e      	ldr	r3, [pc, #632]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005104:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510e:	4a9b      	ldr	r2, [pc, #620]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005110:	430b      	orrs	r3, r1
 8005112:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005120:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005122:	2300      	movs	r3, #0
 8005124:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005126:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d009      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005130:	4b92      	ldr	r3, [pc, #584]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005134:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800513c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800513e:	4a8f      	ldr	r2, [pc, #572]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005140:	430b      	orrs	r3, r1
 8005142:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005150:	643b      	str	r3, [r7, #64]	@ 0x40
 8005152:	2300      	movs	r3, #0
 8005154:	647b      	str	r3, [r7, #68]	@ 0x44
 8005156:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800515a:	460b      	mov	r3, r1
 800515c:	4313      	orrs	r3, r2
 800515e:	d00e      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005160:	4b86      	ldr	r3, [pc, #536]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	4a85      	ldr	r2, [pc, #532]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005166:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800516a:	6113      	str	r3, [r2, #16]
 800516c:	4b83      	ldr	r3, [pc, #524]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800516e:	6919      	ldr	r1, [r3, #16]
 8005170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005174:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005178:	4a80      	ldr	r2, [pc, #512]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800517a:	430b      	orrs	r3, r1
 800517c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800517e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800518a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800518c:	2300      	movs	r3, #0
 800518e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005190:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005194:	460b      	mov	r3, r1
 8005196:	4313      	orrs	r3, r2
 8005198:	d009      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800519a:	4b78      	ldr	r3, [pc, #480]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800519c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80051a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a8:	4a74      	ldr	r2, [pc, #464]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051aa:	430b      	orrs	r3, r1
 80051ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80051ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80051bc:	2300      	movs	r3, #0
 80051be:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80051c4:	460b      	mov	r3, r1
 80051c6:	4313      	orrs	r3, r2
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051ca:	4b6c      	ldr	r3, [pc, #432]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051da:	4a68      	ldr	r2, [pc, #416]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051dc:	430b      	orrs	r3, r1
 80051de:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80051e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	2100      	movs	r1, #0
 80051ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80051f6:	460b      	mov	r3, r1
 80051f8:	4313      	orrs	r3, r2
 80051fa:	d011      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005200:	3308      	adds	r3, #8
 8005202:	2100      	movs	r1, #0
 8005204:	4618      	mov	r0, r3
 8005206:	f001 f99d 	bl	8006544 <RCCEx_PLL2_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005210:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800521c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	2100      	movs	r1, #0
 800522a:	6239      	str	r1, [r7, #32]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
 8005232:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	d011      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005240:	3308      	adds	r3, #8
 8005242:	2101      	movs	r1, #1
 8005244:	4618      	mov	r0, r3
 8005246:	f001 f97d 	bl	8006544 <RCCEx_PLL2_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800525c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	2100      	movs	r1, #0
 800526a:	61b9      	str	r1, [r7, #24]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005276:	460b      	mov	r3, r1
 8005278:	4313      	orrs	r3, r2
 800527a:	d011      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800527c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005280:	3308      	adds	r3, #8
 8005282:	2102      	movs	r1, #2
 8005284:	4618      	mov	r0, r3
 8005286:	f001 f95d 	bl	8006544 <RCCEx_PLL2_Config>
 800528a:	4603      	mov	r3, r0
 800528c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800529c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80052a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	2100      	movs	r1, #0
 80052aa:	6139      	str	r1, [r7, #16]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80052b6:	460b      	mov	r3, r1
 80052b8:	4313      	orrs	r3, r2
 80052ba:	d011      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c0:	3328      	adds	r3, #40	@ 0x28
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f001 f9ef 	bl	80066a8 <RCCEx_PLL3_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80052d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80052e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	2100      	movs	r1, #0
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80052f6:	460b      	mov	r3, r1
 80052f8:	4313      	orrs	r3, r2
 80052fa:	d011      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005300:	3328      	adds	r3, #40	@ 0x28
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f001 f9cf 	bl	80066a8 <RCCEx_PLL3_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800531c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	2100      	movs	r1, #0
 800532a:	6039      	str	r1, [r7, #0]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005336:	460b      	mov	r3, r1
 8005338:	4313      	orrs	r3, r2
 800533a:	d011      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005340:	3328      	adds	r3, #40	@ 0x28
 8005342:	2102      	movs	r1, #2
 8005344:	4618      	mov	r0, r3
 8005346:	f001 f9af 	bl	80066a8 <RCCEx_PLL3_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800535c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005360:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e000      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
}
 800536e:	4618      	mov	r0, r3
 8005370:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005374:	46bd      	mov	sp, r7
 8005376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800537a:	bf00      	nop
 800537c:	58024400 	.word	0x58024400

08005380 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b090      	sub	sp, #64	@ 0x40
 8005384:	af00      	add	r7, sp, #0
 8005386:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800538a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800538e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005392:	430b      	orrs	r3, r1
 8005394:	f040 8094 	bne.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005398:	4b9b      	ldr	r3, [pc, #620]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800539a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80053a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	f200 8087 	bhi.w	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80053aa:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053c5 	.word	0x080053c5
 80053b4:	080053ed 	.word	0x080053ed
 80053b8:	08005415 	.word	0x08005415
 80053bc:	080054b1 	.word	0x080054b1
 80053c0:	0800543d 	.word	0x0800543d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053c4:	4b90      	ldr	r3, [pc, #576]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053d0:	d108      	bne.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 ff62 	bl	80062a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053e0:	f000 bc93 	b.w	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053e8:	f000 bc8f 	b.w	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053ec:	4b86      	ldr	r3, [pc, #536]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053f8:	d108      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053fa:	f107 0318 	add.w	r3, r7, #24
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fca6 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005408:	f000 bc7f 	b.w	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005410:	f000 bc7b 	b.w	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005414:	4b7c      	ldr	r3, [pc, #496]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800541c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005420:	d108      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005422:	f107 030c 	add.w	r3, r7, #12
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fde6 	bl	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005430:	f000 bc6b 	b.w	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005438:	f000 bc67 	b.w	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800543c:	4b72      	ldr	r3, [pc, #456]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800543e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005444:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005446:	4b70      	ldr	r3, [pc, #448]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b04      	cmp	r3, #4
 8005450:	d10c      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005458:	4b6b      	ldr	r3, [pc, #428]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	08db      	lsrs	r3, r3, #3
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	4a6a      	ldr	r2, [pc, #424]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
 8005468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800546a:	e01f      	b.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800546c:	4b66      	ldr	r3, [pc, #408]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005478:	d106      	bne.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800547a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005480:	d102      	bne.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005482:	4b63      	ldr	r3, [pc, #396]	@ (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005484:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005486:	e011      	b.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005488:	4b5f      	ldr	r3, [pc, #380]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005490:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005494:	d106      	bne.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800549c:	d102      	bne.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800549e:	4b5d      	ldr	r3, [pc, #372]	@ (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054a2:	e003      	b.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80054a8:	f000 bc2f 	b.w	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80054ac:	f000 bc2d 	b.w	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80054b0:	4b59      	ldr	r3, [pc, #356]	@ (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80054b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054b4:	f000 bc29 	b.w	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054bc:	f000 bc25 	b.w	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80054c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80054c8:	430b      	orrs	r3, r1
 80054ca:	f040 80a7 	bne.w	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80054ce:	4b4e      	ldr	r3, [pc, #312]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80054d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80054d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054de:	d054      	beq.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054e6:	f200 808b 	bhi.w	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80054f0:	f000 8083 	beq.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80054fa:	f200 8081 	bhi.w	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005504:	d02f      	beq.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800550c:	d878      	bhi.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800551a:	d012      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800551c:	e070      	b.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800551e:	4b3a      	ldr	r3, [pc, #232]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005526:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800552a:	d107      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800552c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005530:	4618      	mov	r0, r3
 8005532:	f000 feb5 	bl	80062a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800553a:	e3e6      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005540:	e3e3      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005542:	4b31      	ldr	r3, [pc, #196]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800554a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800554e:	d107      	bne.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005550:	f107 0318 	add.w	r3, r7, #24
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fbfb 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800555e:	e3d4      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005564:	e3d1      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005566:	4b28      	ldr	r3, [pc, #160]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800556e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005572:	d107      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fd3d 	bl	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005582:	e3c2      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005588:	e3bf      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800558a:	4b1f      	ldr	r3, [pc, #124]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800558c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005592:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005594:	4b1c      	ldr	r3, [pc, #112]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d10c      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80055a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055a6:	4b18      	ldr	r3, [pc, #96]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	08db      	lsrs	r3, r3, #3
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	4a16      	ldr	r2, [pc, #88]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80055b2:	fa22 f303 	lsr.w	r3, r2, r3
 80055b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b8:	e01e      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055ba:	4b13      	ldr	r3, [pc, #76]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c6:	d106      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80055c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055ce:	d102      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80055d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80055d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055d4:	e010      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055e2:	d106      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80055e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055ea:	d102      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055ec:	4b09      	ldr	r3, [pc, #36]	@ (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055f0:	e002      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80055f6:	e388      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80055f8:	e387      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055fa:	4b07      	ldr	r3, [pc, #28]	@ (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80055fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055fe:	e384      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005604:	e381      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005606:	bf00      	nop
 8005608:	58024400 	.word	0x58024400
 800560c:	03d09000 	.word	0x03d09000
 8005610:	003d0900 	.word	0x003d0900
 8005614:	017d7840 	.word	0x017d7840
 8005618:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800561c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005620:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005624:	430b      	orrs	r3, r1
 8005626:	f040 809c 	bne.w	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800562a:	4b9e      	ldr	r3, [pc, #632]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005632:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800563a:	d054      	beq.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005642:	f200 808b 	bhi.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800564c:	f000 8083 	beq.w	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005656:	f200 8081 	bhi.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005660:	d02f      	beq.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005668:	d878      	bhi.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005676:	d012      	beq.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005678:	e070      	b.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800567a:	4b8a      	ldr	r3, [pc, #552]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005682:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005686:	d107      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fe07 	bl	80062a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005696:	e338      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800569c:	e335      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800569e:	4b81      	ldr	r3, [pc, #516]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056aa:	d107      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ac:	f107 0318 	add.w	r3, r7, #24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fb4d 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056ba:	e326      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c0:	e323      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056c2:	4b78      	ldr	r3, [pc, #480]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ce:	d107      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056d0:	f107 030c 	add.w	r3, r7, #12
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fc8f 	bl	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056de:	e314      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056e4:	e311      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056e6:	4b6f      	ldr	r3, [pc, #444]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80056e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056f0:	4b6c      	ldr	r3, [pc, #432]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d10c      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80056fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005702:	4b68      	ldr	r3, [pc, #416]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	08db      	lsrs	r3, r3, #3
 8005708:	f003 0303 	and.w	r3, r3, #3
 800570c:	4a66      	ldr	r2, [pc, #408]	@ (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800570e:	fa22 f303 	lsr.w	r3, r2, r3
 8005712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005714:	e01e      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005716:	4b63      	ldr	r3, [pc, #396]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005722:	d106      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800572a:	d102      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800572c:	4b5f      	ldr	r3, [pc, #380]	@ (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800572e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005730:	e010      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005732:	4b5c      	ldr	r3, [pc, #368]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800573e:	d106      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8005740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005746:	d102      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005748:	4b59      	ldr	r3, [pc, #356]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800574a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800574c:	e002      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005752:	e2da      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005754:	e2d9      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005756:	4b57      	ldr	r3, [pc, #348]	@ (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800575a:	e2d6      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005760:	e2d3      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005766:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800576a:	430b      	orrs	r3, r1
 800576c:	f040 80a7 	bne.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005770:	4b4c      	ldr	r3, [pc, #304]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005774:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005778:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005780:	d055      	beq.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005784:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005788:	f200 8096 	bhi.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005792:	f000 8084 	beq.w	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800579c:	f200 808c 	bhi.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80057a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057a6:	d030      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ae:	f200 8083 	bhi.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80057b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057be:	d012      	beq.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80057c0:	e07a      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057c2:	4b38      	ldr	r3, [pc, #224]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057ce:	d107      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fd63 	bl	80062a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057de:	e294      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e4:	e291      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057e6:	4b2f      	ldr	r3, [pc, #188]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057f2:	d107      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057f4:	f107 0318 	add.w	r3, r7, #24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 faa9 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005802:	e282      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005808:	e27f      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800580a:	4b26      	ldr	r3, [pc, #152]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005816:	d107      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005818:	f107 030c 	add.w	r3, r7, #12
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fbeb 	bl	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005826:	e270      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800582c:	e26d      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800582e:	4b1d      	ldr	r3, [pc, #116]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005832:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005836:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005838:	4b1a      	ldr	r3, [pc, #104]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b04      	cmp	r3, #4
 8005842:	d10c      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800584a:	4b16      	ldr	r3, [pc, #88]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	08db      	lsrs	r3, r3, #3
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	4a14      	ldr	r2, [pc, #80]	@ (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005856:	fa22 f303 	lsr.w	r3, r2, r3
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800585c:	e01e      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800585e:	4b11      	ldr	r3, [pc, #68]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800586a:	d106      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800586c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005872:	d102      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005874:	4b0d      	ldr	r3, [pc, #52]	@ (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005878:	e010      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800587a:	4b0a      	ldr	r3, [pc, #40]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005886:	d106      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800588e:	d102      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005890:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005894:	e002      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800589a:	e236      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800589c:	e235      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800589e:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80058a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058a2:	e232      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80058a4:	58024400 	.word	0x58024400
 80058a8:	03d09000 	.word	0x03d09000
 80058ac:	003d0900 	.word	0x003d0900
 80058b0:	017d7840 	.word	0x017d7840
 80058b4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058bc:	e225      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80058be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80058c6:	430b      	orrs	r3, r1
 80058c8:	f040 8085 	bne.w	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80058cc:	4b9c      	ldr	r3, [pc, #624]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80058ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80058d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80058d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058dc:	d06b      	beq.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058e4:	d874      	bhi.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80058e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058ec:	d056      	beq.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80058ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058f4:	d86c      	bhi.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80058f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058fc:	d03b      	beq.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80058fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005900:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005904:	d864      	bhi.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800590c:	d021      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005914:	d85c      	bhi.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800591c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005922:	d004      	beq.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8005924:	e054      	b.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005926:	f7fe fb75 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 800592a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800592c:	e1ed      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800592e:	4b84      	ldr	r3, [pc, #528]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005936:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800593a:	d107      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800593c:	f107 0318 	add.w	r3, r7, #24
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fa05 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800594a:	e1de      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005950:	e1db      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005952:	4b7b      	ldr	r3, [pc, #492]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800595a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800595e:	d107      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fb47 	bl	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800596e:	e1cc      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005974:	e1c9      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005976:	4b72      	ldr	r3, [pc, #456]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b04      	cmp	r3, #4
 8005980:	d109      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005982:	4b6f      	ldr	r3, [pc, #444]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	08db      	lsrs	r3, r3, #3
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	4a6d      	ldr	r2, [pc, #436]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800598e:	fa22 f303 	lsr.w	r3, r2, r3
 8005992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005994:	e1b9      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800599a:	e1b6      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800599c:	4b68      	ldr	r3, [pc, #416]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a8:	d102      	bne.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80059aa:	4b67      	ldr	r3, [pc, #412]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80059ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059ae:	e1ac      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b4:	e1a9      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80059b6:	4b62      	ldr	r3, [pc, #392]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059c2:	d102      	bne.n	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80059c4:	4b61      	ldr	r3, [pc, #388]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059c8:	e19f      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ce:	e19c      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059d4:	e199      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80059d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059da:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80059de:	430b      	orrs	r3, r1
 80059e0:	d173      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80059e2:	4b57      	ldr	r3, [pc, #348]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80059e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80059ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f2:	d02f      	beq.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80059f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059fa:	d863      	bhi.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80059fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d004      	beq.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a08:	d012      	beq.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8005a0a:	e05b      	b.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a18:	d107      	bne.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a1a:	f107 0318 	add.w	r3, r7, #24
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f996 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a28:	e16f      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a2e:	e16c      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a30:	4b43      	ldr	r3, [pc, #268]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a3e:	f107 030c 	add.w	r3, r7, #12
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fad8 	bl	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a4c:	e15d      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a52:	e15a      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a54:	4b3a      	ldr	r3, [pc, #232]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a5c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a5e:	4b38      	ldr	r3, [pc, #224]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d109      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a70:	4b33      	ldr	r3, [pc, #204]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	08db      	lsrs	r3, r3, #3
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	4a32      	ldr	r2, [pc, #200]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a82:	e01e      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a84:	4b2e      	ldr	r3, [pc, #184]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a90:	d106      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a98:	d102      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a9e:	e010      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005aa0:	4b27      	ldr	r3, [pc, #156]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aac:	d106      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ab4:	d102      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ab6:	4b25      	ldr	r3, [pc, #148]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aba:	e002      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005ac0:	e123      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005ac2:	e122      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac8:	e11f      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ace:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	d13c      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ade:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aec:	d012      	beq.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8005aee:	e023      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005af0:	4b13      	ldr	r3, [pc, #76]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005afc:	d107      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fbcc 	bl	80062a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b0c:	e0fd      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b12:	e0fa      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b14:	4b0a      	ldr	r3, [pc, #40]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b20:	d107      	bne.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b22:	f107 0318 	add.w	r3, r7, #24
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f912 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b30:	e0eb      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b36:	e0e8      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b3c:	e0e5      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005b3e:	bf00      	nop
 8005b40:	58024400 	.word	0x58024400
 8005b44:	03d09000 	.word	0x03d09000
 8005b48:	003d0900 	.word	0x003d0900
 8005b4c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b54:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	f040 8085 	bne.w	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b62:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005b66:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b6e:	d06b      	beq.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8005b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b76:	d874      	bhi.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b7e:	d056      	beq.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b86:	d86c      	bhi.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b8e:	d03b      	beq.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8005b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b96:	d864      	bhi.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b9e:	d021      	beq.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ba6:	d85c      	bhi.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d004      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8005bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bb4:	d004      	beq.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005bb6:	e054      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005bb8:	f000 f8b4 	bl	8005d24 <HAL_RCCEx_GetD3PCLK1Freq>
 8005bbc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bbe:	e0a4      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bc0:	4b54      	ldr	r3, [pc, #336]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bcc:	d107      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bce:	f107 0318 	add.w	r3, r7, #24
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f8bc 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bdc:	e095      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005be2:	e092      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005be4:	4b4b      	ldr	r3, [pc, #300]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bf0:	d107      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bf2:	f107 030c 	add.w	r3, r7, #12
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 f9fe 	bl	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c00:	e083      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c06:	e080      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c08:	4b42      	ldr	r3, [pc, #264]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d109      	bne.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c14:	4b3f      	ldr	r3, [pc, #252]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	08db      	lsrs	r3, r3, #3
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
 8005c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c26:	e070      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c2c:	e06d      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005c2e:	4b39      	ldr	r3, [pc, #228]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c3a:	d102      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8005c3c:	4b37      	ldr	r3, [pc, #220]	@ (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c40:	e063      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c46:	e060      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c48:	4b32      	ldr	r3, [pc, #200]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c54:	d102      	bne.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8005c56:	4b32      	ldr	r3, [pc, #200]	@ (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c5a:	e056      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c60:	e053      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c66:	e050      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c6c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005c70:	430b      	orrs	r3, r1
 8005c72:	d148      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005c74:	4b27      	ldr	r3, [pc, #156]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c84:	d02a      	beq.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c8c:	d838      	bhi.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d004      	beq.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c9a:	d00d      	beq.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005c9c:	e030      	b.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005caa:	d102      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8005cac:	4b1c      	ldr	r3, [pc, #112]	@ (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cb0:	e02b      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cb6:	e028      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cb8:	4b16      	ldr	r3, [pc, #88]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fae8 	bl	80062a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cd4:	e019      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cda:	e016      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cea:	f107 0318 	add.w	r3, r7, #24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 f82e 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cf8:	e007      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cfe:	e004      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d04:	e001      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3740      	adds	r7, #64	@ 0x40
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	58024400 	.word	0x58024400
 8005d18:	03d09000 	.word	0x03d09000
 8005d1c:	003d0900 	.word	0x003d0900
 8005d20:	017d7840 	.word	0x017d7840

08005d24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d28:	f7fe f944 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	091b      	lsrs	r3, r3, #4
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	4904      	ldr	r1, [pc, #16]	@ (8005d4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d3a:	5ccb      	ldrb	r3, [r1, r3]
 8005d3c:	f003 031f 	and.w	r3, r3, #31
 8005d40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	58024400 	.word	0x58024400
 8005d4c:	0800a2c8 	.word	0x0800a2c8

08005d50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b089      	sub	sp, #36	@ 0x24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d58:	4ba1      	ldr	r3, [pc, #644]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005d62:	4b9f      	ldr	r3, [pc, #636]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	0b1b      	lsrs	r3, r3, #12
 8005d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d6e:	4b9c      	ldr	r3, [pc, #624]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	091b      	lsrs	r3, r3, #4
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d7a:	4b99      	ldr	r3, [pc, #612]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7e:	08db      	lsrs	r3, r3, #3
 8005d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8111 	beq.w	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	f000 8083 	beq.w	8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	f200 80a1 	bhi.w	8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d056      	beq.n	8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005dba:	e099      	b.n	8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dbc:	4b88      	ldr	r3, [pc, #544]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d02d      	beq.n	8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dc8:	4b85      	ldr	r3, [pc, #532]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	08db      	lsrs	r3, r3, #3
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	4a84      	ldr	r2, [pc, #528]	@ (8005fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df2:	4b7b      	ldr	r3, [pc, #492]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e22:	e087      	b.n	8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005fec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e36:	4b6a      	ldr	r3, [pc, #424]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e66:	e065      	b.n	8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7a:	4b59      	ldr	r3, [pc, #356]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eaa:	e043      	b.n	8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ebe:	4b48      	ldr	r3, [pc, #288]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ed2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eee:	e021      	b.n	8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f02:	4b37      	ldr	r3, [pc, #220]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005f34:	4b2a      	ldr	r3, [pc, #168]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	0a5b      	lsrs	r3, r3, #9
 8005f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5a:	ee17 2a90 	vmov	r2, s15
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005f62:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f66:	0c1b      	lsrs	r3, r3, #16
 8005f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f88:	ee17 2a90 	vmov	r2, s15
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005f90:	4b13      	ldr	r3, [pc, #76]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f94:	0e1b      	lsrs	r3, r3, #24
 8005f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb6:	ee17 2a90 	vmov	r2, s15
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	609a      	str	r2, [r3, #8]
}
 8005fd2:	bf00      	nop
 8005fd4:	3724      	adds	r7, #36	@ 0x24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	03d09000 	.word	0x03d09000
 8005fe8:	46000000 	.word	0x46000000
 8005fec:	4c742400 	.word	0x4c742400
 8005ff0:	4a742400 	.word	0x4a742400
 8005ff4:	4bbebc20 	.word	0x4bbebc20

08005ff8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b089      	sub	sp, #36	@ 0x24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006000:	4ba1      	ldr	r3, [pc, #644]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800600a:	4b9f      	ldr	r3, [pc, #636]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800600c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600e:	0d1b      	lsrs	r3, r3, #20
 8006010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006014:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006016:	4b9c      	ldr	r3, [pc, #624]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601a:	0a1b      	lsrs	r3, r3, #8
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006022:	4b99      	ldr	r3, [pc, #612]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006026:	08db      	lsrs	r3, r3, #3
 8006028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	fb02 f303 	mul.w	r3, r2, r3
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8111 	beq.w	8006268 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b02      	cmp	r3, #2
 800604a:	f000 8083 	beq.w	8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b02      	cmp	r3, #2
 8006052:	f200 80a1 	bhi.w	8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d056      	beq.n	8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006062:	e099      	b.n	8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006064:	4b88      	ldr	r3, [pc, #544]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d02d      	beq.n	80060cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006070:	4b85      	ldr	r3, [pc, #532]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	08db      	lsrs	r3, r3, #3
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	4a84      	ldr	r2, [pc, #528]	@ (800628c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800607c:	fa22 f303 	lsr.w	r3, r2, r3
 8006080:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	ee07 3a90 	vmov	s15, r3
 8006088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609a:	4b7b      	ldr	r3, [pc, #492]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060ca:	e087      	b.n	80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006294 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80060da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060de:	4b6a      	ldr	r3, [pc, #424]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800610e:	e065      	b.n	80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006298 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800611e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006122:	4b59      	ldr	r3, [pc, #356]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006132:	ed97 6a03 	vldr	s12, [r7, #12]
 8006136:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800613a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006152:	e043      	b.n	80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800629c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006166:	4b48      	ldr	r3, [pc, #288]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006176:	ed97 6a03 	vldr	s12, [r7, #12]
 800617a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800617e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800618a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006196:	e021      	b.n	80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006298 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061aa:	4b37      	ldr	r3, [pc, #220]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80061be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80061dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e0:	0a5b      	lsrs	r3, r3, #9
 80061e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006202:	ee17 2a90 	vmov	r2, s15
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800620a:	4b1f      	ldr	r3, [pc, #124]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006214:	ee07 3a90 	vmov	s15, r3
 8006218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006224:	edd7 6a07 	vldr	s13, [r7, #28]
 8006228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006230:	ee17 2a90 	vmov	r2, s15
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006238:	4b13      	ldr	r3, [pc, #76]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	0e1b      	lsrs	r3, r3, #24
 800623e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800624e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006252:	edd7 6a07 	vldr	s13, [r7, #28]
 8006256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800625a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625e:	ee17 2a90 	vmov	r2, s15
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006266:	e008      	b.n	800627a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	609a      	str	r2, [r3, #8]
}
 800627a:	bf00      	nop
 800627c:	3724      	adds	r7, #36	@ 0x24
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	58024400 	.word	0x58024400
 800628c:	03d09000 	.word	0x03d09000
 8006290:	46000000 	.word	0x46000000
 8006294:	4c742400 	.word	0x4c742400
 8006298:	4a742400 	.word	0x4a742400
 800629c:	4bbebc20 	.word	0x4bbebc20

080062a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b089      	sub	sp, #36	@ 0x24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062a8:	4ba0      	ldr	r3, [pc, #640]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ac:	f003 0303 	and.w	r3, r3, #3
 80062b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80062b2:	4b9e      	ldr	r3, [pc, #632]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	091b      	lsrs	r3, r3, #4
 80062b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80062be:	4b9b      	ldr	r3, [pc, #620]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80062c8:	4b98      	ldr	r3, [pc, #608]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062cc:	08db      	lsrs	r3, r3, #3
 80062ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	fb02 f303 	mul.w	r3, r2, r3
 80062d8:	ee07 3a90 	vmov	s15, r3
 80062dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 8111 	beq.w	800650e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	f000 8083 	beq.w	80063fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	f200 80a1 	bhi.w	800643e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d056      	beq.n	80063b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006308:	e099      	b.n	800643e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800630a:	4b88      	ldr	r3, [pc, #544]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d02d      	beq.n	8006372 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006316:	4b85      	ldr	r3, [pc, #532]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	08db      	lsrs	r3, r3, #3
 800631c:	f003 0303 	and.w	r3, r3, #3
 8006320:	4a83      	ldr	r2, [pc, #524]	@ (8006530 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006322:	fa22 f303 	lsr.w	r3, r2, r3
 8006326:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006340:	4b7a      	ldr	r3, [pc, #488]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006348:	ee07 3a90 	vmov	s15, r3
 800634c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006350:	ed97 6a03 	vldr	s12, [r7, #12]
 8006354:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006358:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006360:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006370:	e087      	b.n	8006482 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006538 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006384:	4b69      	ldr	r3, [pc, #420]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638c:	ee07 3a90 	vmov	s15, r3
 8006390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006394:	ed97 6a03 	vldr	s12, [r7, #12]
 8006398:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800639c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063b4:	e065      	b.n	8006482 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800653c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80063c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c8:	4b58      	ldr	r3, [pc, #352]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d0:	ee07 3a90 	vmov	s15, r3
 80063d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80063dc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063f8:	e043      	b.n	8006482 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006404:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006540 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640c:	4b47      	ldr	r3, [pc, #284]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800640e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006414:	ee07 3a90 	vmov	s15, r3
 8006418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800641c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006420:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800642c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006438:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800643c:	e021      	b.n	8006482 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006448:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006538 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800644c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006450:	4b36      	ldr	r3, [pc, #216]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006460:	ed97 6a03 	vldr	s12, [r7, #12]
 8006464:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800646c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006470:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006480:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006482:	4b2a      	ldr	r3, [pc, #168]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006486:	0a5b      	lsrs	r3, r3, #9
 8006488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006498:	ee37 7a87 	vadd.f32	s14, s15, s14
 800649c:	edd7 6a07 	vldr	s13, [r7, #28]
 80064a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a8:	ee17 2a90 	vmov	r2, s15
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80064b0:	4b1e      	ldr	r3, [pc, #120]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b4:	0c1b      	lsrs	r3, r3, #16
 80064b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064d6:	ee17 2a90 	vmov	r2, s15
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80064de:	4b13      	ldr	r3, [pc, #76]	@ (800652c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e2:	0e1b      	lsrs	r3, r3, #24
 80064e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064e8:	ee07 3a90 	vmov	s15, r3
 80064ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80064fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006504:	ee17 2a90 	vmov	r2, s15
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800650c:	e008      	b.n	8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	609a      	str	r2, [r3, #8]
}
 8006520:	bf00      	nop
 8006522:	3724      	adds	r7, #36	@ 0x24
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	58024400 	.word	0x58024400
 8006530:	03d09000 	.word	0x03d09000
 8006534:	46000000 	.word	0x46000000
 8006538:	4c742400 	.word	0x4c742400
 800653c:	4a742400 	.word	0x4a742400
 8006540:	4bbebc20 	.word	0x4bbebc20

08006544 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006552:	4b53      	ldr	r3, [pc, #332]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	2b03      	cmp	r3, #3
 800655c:	d101      	bne.n	8006562 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e099      	b.n	8006696 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006562:	4b4f      	ldr	r3, [pc, #316]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a4e      	ldr	r2, [pc, #312]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006568:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800656c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656e:	f7fb fa83 	bl	8001a78 <HAL_GetTick>
 8006572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006574:	e008      	b.n	8006588 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006576:	f7fb fa7f 	bl	8001a78 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e086      	b.n	8006696 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006588:	4b45      	ldr	r3, [pc, #276]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1f0      	bne.n	8006576 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006594:	4b42      	ldr	r3, [pc, #264]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006598:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	031b      	lsls	r3, r3, #12
 80065a2:	493f      	ldr	r1, [pc, #252]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	025b      	lsls	r3, r3, #9
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	041b      	lsls	r3, r3, #16
 80065c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	061b      	lsls	r3, r3, #24
 80065d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065d8:	4931      	ldr	r1, [pc, #196]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80065de:	4b30      	ldr	r3, [pc, #192]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	492d      	ldr	r1, [pc, #180]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80065f0:	4b2b      	ldr	r3, [pc, #172]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	f023 0220 	bic.w	r2, r3, #32
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	4928      	ldr	r1, [pc, #160]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006602:	4b27      	ldr	r3, [pc, #156]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006606:	4a26      	ldr	r2, [pc, #152]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006608:	f023 0310 	bic.w	r3, r3, #16
 800660c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800660e:	4b24      	ldr	r3, [pc, #144]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006612:	4b24      	ldr	r3, [pc, #144]	@ (80066a4 <RCCEx_PLL2_Config+0x160>)
 8006614:	4013      	ands	r3, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	69d2      	ldr	r2, [r2, #28]
 800661a:	00d2      	lsls	r2, r2, #3
 800661c:	4920      	ldr	r1, [pc, #128]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800661e:	4313      	orrs	r3, r2
 8006620:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006622:	4b1f      	ldr	r3, [pc, #124]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006626:	4a1e      	ldr	r2, [pc, #120]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006628:	f043 0310 	orr.w	r3, r3, #16
 800662c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006634:	4b1a      	ldr	r3, [pc, #104]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006638:	4a19      	ldr	r2, [pc, #100]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800663a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800663e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006640:	e00f      	b.n	8006662 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d106      	bne.n	8006656 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006648:	4b15      	ldr	r3, [pc, #84]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	4a14      	ldr	r2, [pc, #80]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800664e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006654:	e005      	b.n	8006662 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006656:	4b12      	ldr	r3, [pc, #72]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665a:	4a11      	ldr	r2, [pc, #68]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800665c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006660:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006662:	4b0f      	ldr	r3, [pc, #60]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a0e      	ldr	r2, [pc, #56]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006668:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800666c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666e:	f7fb fa03 	bl	8001a78 <HAL_GetTick>
 8006672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006674:	e008      	b.n	8006688 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006676:	f7fb f9ff 	bl	8001a78 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d901      	bls.n	8006688 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e006      	b.n	8006696 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006688:	4b05      	ldr	r3, [pc, #20]	@ (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f0      	beq.n	8006676 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	58024400 	.word	0x58024400
 80066a4:	ffff0007 	.word	0xffff0007

080066a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066b6:	4b53      	ldr	r3, [pc, #332]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80066b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d101      	bne.n	80066c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e099      	b.n	80067fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80066c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a4e      	ldr	r2, [pc, #312]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80066cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066d2:	f7fb f9d1 	bl	8001a78 <HAL_GetTick>
 80066d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066d8:	e008      	b.n	80066ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066da:	f7fb f9cd 	bl	8001a78 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e086      	b.n	80067fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066ec:	4b45      	ldr	r3, [pc, #276]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f0      	bne.n	80066da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80066f8:	4b42      	ldr	r3, [pc, #264]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80066fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	051b      	lsls	r3, r3, #20
 8006706:	493f      	ldr	r1, [pc, #252]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006708:	4313      	orrs	r3, r2
 800670a:	628b      	str	r3, [r1, #40]	@ 0x28
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	3b01      	subs	r3, #1
 8006712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	3b01      	subs	r3, #1
 800671c:	025b      	lsls	r3, r3, #9
 800671e:	b29b      	uxth	r3, r3
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	3b01      	subs	r3, #1
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	3b01      	subs	r3, #1
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800673c:	4931      	ldr	r1, [pc, #196]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 800673e:	4313      	orrs	r3, r2
 8006740:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006742:	4b30      	ldr	r3, [pc, #192]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006746:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	492d      	ldr	r1, [pc, #180]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006750:	4313      	orrs	r3, r2
 8006752:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006754:	4b2b      	ldr	r3, [pc, #172]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006758:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	4928      	ldr	r1, [pc, #160]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006762:	4313      	orrs	r3, r2
 8006764:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006766:	4b27      	ldr	r3, [pc, #156]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676a:	4a26      	ldr	r2, [pc, #152]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 800676c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006770:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006772:	4b24      	ldr	r3, [pc, #144]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006776:	4b24      	ldr	r3, [pc, #144]	@ (8006808 <RCCEx_PLL3_Config+0x160>)
 8006778:	4013      	ands	r3, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	69d2      	ldr	r2, [r2, #28]
 800677e:	00d2      	lsls	r2, r2, #3
 8006780:	4920      	ldr	r1, [pc, #128]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006782:	4313      	orrs	r3, r2
 8006784:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006786:	4b1f      	ldr	r3, [pc, #124]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678a:	4a1e      	ldr	r2, [pc, #120]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 800678c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006790:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006798:	4b1a      	ldr	r3, [pc, #104]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	4a19      	ldr	r2, [pc, #100]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 800679e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80067a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067a4:	e00f      	b.n	80067c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d106      	bne.n	80067ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80067ac:	4b15      	ldr	r3, [pc, #84]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b0:	4a14      	ldr	r2, [pc, #80]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067b8:	e005      	b.n	80067c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067ba:	4b12      	ldr	r3, [pc, #72]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	4a11      	ldr	r2, [pc, #68]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a0e      	ldr	r2, [pc, #56]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d2:	f7fb f951 	bl	8001a78 <HAL_GetTick>
 80067d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067d8:	e008      	b.n	80067ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067da:	f7fb f94d 	bl	8001a78 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e006      	b.n	80067fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067ec:	4b05      	ldr	r3, [pc, #20]	@ (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0f0      	beq.n	80067da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	58024400 	.word	0x58024400
 8006808:	ffff0007 	.word	0xffff0007

0800680c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	@ 0x28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e075      	b.n	800690a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7fa fc75 	bl	8001120 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2204      	movs	r2, #4
 800683a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f868 	bl	8006914 <HAL_SD_InitCard>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e05d      	b.n	800690a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800684e:	f107 0308 	add.w	r3, r7, #8
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fa9d 	bl	8006d94 <HAL_SD_GetCardStatus>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e052      	b.n	800690a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006864:	7e3b      	ldrb	r3, [r7, #24]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800686a:	7e7b      	ldrb	r3, [r7, #25]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006874:	2b01      	cmp	r3, #1
 8006876:	d10a      	bne.n	800688e <HAL_SD_Init+0x82>
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <HAL_SD_Init+0x78>
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d004      	beq.n	800688e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800688a:	659a      	str	r2, [r3, #88]	@ 0x58
 800688c:	e00b      	b.n	80068a6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006892:	2b01      	cmp	r3, #1
 8006894:	d104      	bne.n	80068a0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800689c:	659a      	str	r2, [r3, #88]	@ 0x58
 800689e:	e002      	b.n	80068a6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fb2f 	bl	8006f10 <HAL_SD_ConfigWideBusOperation>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e026      	b.n	800690a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80068bc:	f7fb f8dc 	bl	8001a78 <HAL_GetTick>
 80068c0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80068c2:	e011      	b.n	80068e8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80068c4:	f7fb f8d8 	bl	8001a78 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	d109      	bne.n	80068e8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80068da:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e010      	b.n	800690a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fc23 	bl	8007134 <HAL_SD_GetCardState>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b04      	cmp	r3, #4
 80068f2:	d1e7      	bne.n	80068c4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3728      	adds	r7, #40	@ 0x28
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006914:	b590      	push	{r4, r7, lr}
 8006916:	b08d      	sub	sp, #52	@ 0x34
 8006918:	af02      	add	r7, sp, #8
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006920:	2300      	movs	r3, #0
 8006922:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006928:	2300      	movs	r3, #0
 800692a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800692c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006930:	f04f 0100 	mov.w	r1, #0
 8006934:	f7fe fd24 	bl	8005380 <HAL_RCCEx_GetPeriphCLKFreq>
 8006938:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800694e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e070      	b.n	8006a36 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	0a1b      	lsrs	r3, r3, #8
 8006958:	4a39      	ldr	r2, [pc, #228]	@ (8006a40 <HAL_SD_InitCard+0x12c>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	091b      	lsrs	r3, r3, #4
 8006960:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681c      	ldr	r4, [r3, #0]
 8006966:	466a      	mov	r2, sp
 8006968:	f107 0318 	add.w	r3, r7, #24
 800696c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006970:	e882 0003 	stmia.w	r2, {r0, r1}
 8006974:	f107 030c 	add.w	r3, r7, #12
 8006978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800697a:	4620      	mov	r0, r4
 800697c:	f002 fe60 	bl	8009640 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f002 fe92 	bl	80096ae <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d005      	beq.n	800699c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006996:	fbb2 f3f3 	udiv	r3, r2, r3
 800699a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80069a2:	4a28      	ldr	r2, [pc, #160]	@ (8006a44 <HAL_SD_InitCard+0x130>)
 80069a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069aa:	3301      	adds	r3, #1
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fb f86f 	bl	8001a90 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fcac 	bl	8007310 <SD_PowerON>
 80069b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e02e      	b.n	8006a36 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fbcb 	bl	8007174 <SD_InitCard>
 80069de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00b      	beq.n	80069fe <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e01b      	b.n	8006a36 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006a06:	4618      	mov	r0, r3
 8006a08:	f002 fee6 	bl	80097d8 <SDMMC_CmdBlockLength>
 8006a0c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00f      	beq.n	8006a34 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a0b      	ldr	r2, [pc, #44]	@ (8006a48 <HAL_SD_InitCard+0x134>)
 8006a1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	372c      	adds	r7, #44	@ 0x2c
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd90      	pop	{r4, r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	014f8b59 	.word	0x014f8b59
 8006a44:	00012110 	.word	0x00012110
 8006a48:	1fe00fff 	.word	0x1fe00fff

08006a4c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a5a:	0f9b      	lsrs	r3, r3, #30
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a66:	0e9b      	lsrs	r3, r3, #26
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a78:	0e1b      	lsrs	r3, r3, #24
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a8a:	0c1b      	lsrs	r3, r3, #16
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a96:	0a1b      	lsrs	r3, r3, #8
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aac:	0d1b      	lsrs	r3, r3, #20
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aca:	0bdb      	lsrs	r3, r3, #15
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006adc:	0b9b      	lsrs	r3, r3, #14
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aee:	0b5b      	lsrs	r3, r3, #13
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b00:	0b1b      	lsrs	r3, r3, #12
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2200      	movs	r2, #0
 8006b12:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d163      	bne.n	8006be4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b20:	009a      	lsls	r2, r3, #2
 8006b22:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006b26:	4013      	ands	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8006b2c:	0f92      	lsrs	r2, r2, #30
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b38:	0edb      	lsrs	r3, r3, #27
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b4a:	0e1b      	lsrs	r3, r3, #24
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 0307 	and.w	r3, r3, #7
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b5c:	0d5b      	lsrs	r3, r3, #21
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b6e:	0c9b      	lsrs	r3, r3, #18
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b80:	0bdb      	lsrs	r3, r3, #15
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	7e1b      	ldrb	r3, [r3, #24]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	3302      	adds	r3, #2
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006bae:	fb03 f202 	mul.w	r2, r3, r2
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	7a1b      	ldrb	r3, [r3, #8]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	f003 030f 	and.w	r3, r3, #15
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006bd0:	0a52      	lsrs	r2, r2, #9
 8006bd2:	fb03 f202 	mul.w	r2, r3, r2
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006be0:	655a      	str	r2, [r3, #84]	@ 0x54
 8006be2:	e031      	b.n	8006c48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d11d      	bne.n	8006c28 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf0:	041b      	lsls	r3, r3, #16
 8006bf2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bfa:	0c1b      	lsrs	r3, r3, #16
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	3301      	adds	r3, #1
 8006c08:	029a      	lsls	r2, r3, #10
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c26:	e00f      	b.n	8006c48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a58      	ldr	r2, [pc, #352]	@ (8006d90 <HAL_SD_GetCardCSD+0x344>)
 8006c2e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e09d      	b.n	8006d84 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c4c:	0b9b      	lsrs	r3, r3, #14
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c5e:	09db      	lsrs	r3, r3, #7
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c80:	0fdb      	lsrs	r3, r3, #31
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c8c:	0f5b      	lsrs	r3, r3, #29
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c9e:	0e9b      	lsrs	r3, r3, #26
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cb0:	0d9b      	lsrs	r3, r3, #22
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cc2:	0d5b      	lsrs	r3, r3, #21
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cde:	0c1b      	lsrs	r3, r3, #16
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cf2:	0bdb      	lsrs	r3, r3, #15
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d06:	0b9b      	lsrs	r3, r3, #14
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d1a:	0b5b      	lsrs	r3, r3, #13
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d2e:	0b1b      	lsrs	r3, r3, #12
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d42:	0a9b      	lsrs	r3, r3, #10
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d56:	0a1b      	lsrs	r3, r3, #8
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d6a:	085b      	lsrs	r3, r3, #1
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	1fe00fff 	.word	0x1fe00fff

08006d94 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b094      	sub	sp, #80	@ 0x50
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d101      	bne.n	8006db4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e0a7      	b.n	8006f04 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006db4:	f107 0308 	add.w	r3, r7, #8
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fb36 	bl	800742c <SD_SendSDStatus>
 8006dc0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d011      	beq.n	8006dec <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a4f      	ldr	r2, [pc, #316]	@ (8006f0c <HAL_SD_GetCardStatus+0x178>)
 8006dce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006dea:	e070      	b.n	8006ece <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	099b      	lsrs	r3, r3, #6
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	0a1b      	lsrs	r3, r3, #8
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	0e1b      	lsrs	r3, r3, #24
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	061a      	lsls	r2, r3, #24
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e32:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006e3c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	0e1b      	lsrs	r3, r3, #24
 8006e42:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	0d1b      	lsrs	r3, r3, #20
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	0c1b      	lsrs	r3, r3, #16
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	0a9b      	lsrs	r3, r3, #10
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	0a1b      	lsrs	r3, r3, #8
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	091b      	lsrs	r3, r3, #4
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	0e1b      	lsrs	r3, r3, #24
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f002 fc7e 	bl	80097d8 <SDMMC_CmdBlockLength>
 8006edc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00d      	beq.n	8006f00 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a08      	ldr	r2, [pc, #32]	@ (8006f0c <HAL_SD_GetCardStatus+0x178>)
 8006eea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ef0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8006f00:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3750      	adds	r7, #80	@ 0x50
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	1fe00fff 	.word	0x1fe00fff

08006f10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006f10:	b590      	push	{r4, r7, lr}
 8006f12:	b08d      	sub	sp, #52	@ 0x34
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2203      	movs	r2, #3
 8006f24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d02e      	beq.n	8006f8e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f36:	d106      	bne.n	8006f46 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	635a      	str	r2, [r3, #52]	@ 0x34
 8006f44:	e029      	b.n	8006f9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f4c:	d10a      	bne.n	8006f64 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fb64 	bl	800761c <SD_WideBus_Enable>
 8006f54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	635a      	str	r2, [r3, #52]	@ 0x34
 8006f62:	e01a      	b.n	8006f9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fba1 	bl	80076b2 <SD_WideBus_Disable>
 8006f70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006f7e:	e00c      	b.n	8006f9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f84:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8006f8c:	e005      	b.n	8006f9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f92:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d007      	beq.n	8006fb2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8007124 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006fa8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006fb0:	e096      	b.n	80070e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006fb2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006fb6:	f04f 0100 	mov.w	r1, #0
 8006fba:	f7fe f9e1 	bl	8005380 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fbe:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 8083 	beq.w	80070ce <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	695a      	ldr	r2, [r3, #20]
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4950      	ldr	r1, [pc, #320]	@ (8007128 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006fe6:	fba1 1303 	umull	r1, r3, r1, r3
 8006fea:	0e1b      	lsrs	r3, r3, #24
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d303      	bcc.n	8006ff8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	e05a      	b.n	80070ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007000:	d103      	bne.n	800700a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	e051      	b.n	80070ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007012:	d126      	bne.n	8007062 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10e      	bne.n	800703a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4a43      	ldr	r2, [pc, #268]	@ (800712c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d906      	bls.n	8007032 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	4a40      	ldr	r2, [pc, #256]	@ (8007128 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	0e5b      	lsrs	r3, r3, #25
 800702e:	61bb      	str	r3, [r7, #24]
 8007030:	e03d      	b.n	80070ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	e039      	b.n	80070ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	fbb2 f3f3 	udiv	r3, r2, r3
 8007046:	4a39      	ldr	r2, [pc, #228]	@ (800712c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d906      	bls.n	800705a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	4a36      	ldr	r2, [pc, #216]	@ (8007128 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007050:	fba2 2303 	umull	r2, r3, r2, r3
 8007054:	0e5b      	lsrs	r3, r3, #25
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	e029      	b.n	80070ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	e025      	b.n	80070ae <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10e      	bne.n	8007088 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4a30      	ldr	r2, [pc, #192]	@ (8007130 <HAL_SD_ConfigWideBusOperation+0x220>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d906      	bls.n	8007080 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	4a2c      	ldr	r2, [pc, #176]	@ (8007128 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	0e1b      	lsrs	r3, r3, #24
 800707c:	61bb      	str	r3, [r7, #24]
 800707e:	e016      	b.n	80070ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	e012      	b.n	80070ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	fbb2 f3f3 	udiv	r3, r2, r3
 8007094:	4a26      	ldr	r2, [pc, #152]	@ (8007130 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d906      	bls.n	80070a8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	4a22      	ldr	r2, [pc, #136]	@ (8007128 <HAL_SD_ConfigWideBusOperation+0x218>)
 800709e:	fba2 2303 	umull	r2, r3, r2, r3
 80070a2:	0e1b      	lsrs	r3, r3, #24
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	e002      	b.n	80070ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681c      	ldr	r4, [r3, #0]
 80070b2:	466a      	mov	r2, sp
 80070b4:	f107 0314 	add.w	r3, r7, #20
 80070b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80070bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80070c0:	f107 0308 	add.w	r3, r7, #8
 80070c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070c6:	4620      	mov	r0, r4
 80070c8:	f002 faba 	bl	8009640 <SDMMC_Init>
 80070cc:	e008      	b.n	80070e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80070e8:	4618      	mov	r0, r3
 80070ea:	f002 fb75 	bl	80097d8 <SDMMC_CmdBlockLength>
 80070ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007124 <HAL_SD_ConfigWideBusOperation+0x214>)
 80070fc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8007118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800711c:	4618      	mov	r0, r3
 800711e:	372c      	adds	r7, #44	@ 0x2c
 8007120:	46bd      	mov	sp, r7
 8007122:	bd90      	pop	{r4, r7, pc}
 8007124:	1fe00fff 	.word	0x1fe00fff
 8007128:	55e63b89 	.word	0x55e63b89
 800712c:	02faf080 	.word	0x02faf080
 8007130:	017d7840 	.word	0x017d7840

08007134 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007140:	f107 030c 	add.w	r3, r7, #12
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa40 	bl	80075cc <SD_SendStatus>
 800714c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	0a5b      	lsrs	r3, r3, #9
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800716a:	693b      	ldr	r3, [r7, #16]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b090      	sub	sp, #64	@ 0x40
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007180:	f7fa fc7a 	bl	8001a78 <HAL_GetTick>
 8007184:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f002 faa0 	bl	80096d0 <SDMMC_GetPowerState>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d102      	bne.n	800719c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007196:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800719a:	e0b5      	b.n	8007308 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d02e      	beq.n	8007202 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f002 fc21 	bl	80099f0 <SDMMC_CmdSendCID>
 80071ae:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80071b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <SD_InitCard+0x46>
    {
      return errorstate;
 80071b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b8:	e0a6      	b.n	8007308 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f002 faca 	bl	800975a <SDMMC_GetResponse>
 80071c6:	4602      	mov	r2, r0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2104      	movs	r1, #4
 80071d2:	4618      	mov	r0, r3
 80071d4:	f002 fac1 	bl	800975a <SDMMC_GetResponse>
 80071d8:	4602      	mov	r2, r0
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2108      	movs	r1, #8
 80071e4:	4618      	mov	r0, r3
 80071e6:	f002 fab8 	bl	800975a <SDMMC_GetResponse>
 80071ea:	4602      	mov	r2, r0
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	210c      	movs	r1, #12
 80071f6:	4618      	mov	r0, r3
 80071f8:	f002 faaf 	bl	800975a <SDMMC_GetResponse>
 80071fc:	4602      	mov	r2, r0
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007206:	2b03      	cmp	r3, #3
 8007208:	d01d      	beq.n	8007246 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800720a:	e019      	b.n	8007240 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f107 020a 	add.w	r2, r7, #10
 8007214:	4611      	mov	r1, r2
 8007216:	4618      	mov	r0, r3
 8007218:	f002 fc29 	bl	8009a6e <SDMMC_CmdSetRelAdd>
 800721c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800721e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007226:	e06f      	b.n	8007308 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007228:	f7fa fc26 	bl	8001a78 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	f241 3287 	movw	r2, #4999	@ 0x1387
 8007236:	4293      	cmp	r3, r2
 8007238:	d902      	bls.n	8007240 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800723a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800723e:	e063      	b.n	8007308 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007240:	897b      	ldrh	r3, [r7, #10]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0e2      	beq.n	800720c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	2b03      	cmp	r3, #3
 800724c:	d036      	beq.n	80072bc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800724e:	897b      	ldrh	r3, [r7, #10]
 8007250:	461a      	mov	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800725e:	041b      	lsls	r3, r3, #16
 8007260:	4619      	mov	r1, r3
 8007262:	4610      	mov	r0, r2
 8007264:	f002 fbe3 	bl	8009a2e <SDMMC_CmdSendCSD>
 8007268:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800726a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <SD_InitCard+0x100>
    {
      return errorstate;
 8007270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007272:	e049      	b.n	8007308 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2100      	movs	r1, #0
 800727a:	4618      	mov	r0, r3
 800727c:	f002 fa6d 	bl	800975a <SDMMC_GetResponse>
 8007280:	4602      	mov	r2, r0
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2104      	movs	r1, #4
 800728c:	4618      	mov	r0, r3
 800728e:	f002 fa64 	bl	800975a <SDMMC_GetResponse>
 8007292:	4602      	mov	r2, r0
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2108      	movs	r1, #8
 800729e:	4618      	mov	r0, r3
 80072a0:	f002 fa5b 	bl	800975a <SDMMC_GetResponse>
 80072a4:	4602      	mov	r2, r0
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	210c      	movs	r1, #12
 80072b0:	4618      	mov	r0, r3
 80072b2:	f002 fa52 	bl	800975a <SDMMC_GetResponse>
 80072b6:	4602      	mov	r2, r0
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2104      	movs	r1, #4
 80072c2:	4618      	mov	r0, r3
 80072c4:	f002 fa49 	bl	800975a <SDMMC_GetResponse>
 80072c8:	4603      	mov	r3, r0
 80072ca:	0d1a      	lsrs	r2, r3, #20
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80072d0:	f107 030c 	add.w	r3, r7, #12
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fbb8 	bl	8006a4c <HAL_SD_GetCardCSD>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072e2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80072e6:	e00f      	b.n	8007308 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f0:	041b      	lsls	r3, r3, #16
 80072f2:	4619      	mov	r1, r3
 80072f4:	4610      	mov	r0, r2
 80072f6:	f002 fa92 	bl	800981e <SDMMC_CmdSelDesel>
 80072fa:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80072fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <SD_InitCard+0x192>
  {
    return errorstate;
 8007302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007304:	e000      	b.n	8007308 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3740      	adds	r7, #64	@ 0x40
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f002 fa9b 	bl	8009864 <SDMMC_CmdGoIdleState>
 800732e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	e072      	b.n	8007420 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f002 faae 	bl	80098a0 <SDMMC_CmdOperCond>
 8007344:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800734c:	d10d      	bne.n	800736a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f002 fa83 	bl	8009864 <SDMMC_CmdGoIdleState>
 800735e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d004      	beq.n	8007370 <SD_PowerON+0x60>
    {
      return errorstate;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	e05a      	b.n	8007420 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007374:	2b01      	cmp	r3, #1
 8007376:	d137      	bne.n	80073e8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2100      	movs	r1, #0
 800737e:	4618      	mov	r0, r3
 8007380:	f002 faae 	bl	80098e0 <SDMMC_CmdAppCommand>
 8007384:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d02d      	beq.n	80073e8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800738c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007390:	e046      	b.n	8007420 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2100      	movs	r1, #0
 8007398:	4618      	mov	r0, r3
 800739a:	f002 faa1 	bl	80098e0 <SDMMC_CmdAppCommand>
 800739e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <SD_PowerON+0x9a>
    {
      return errorstate;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	e03a      	b.n	8007420 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	491e      	ldr	r1, [pc, #120]	@ (8007428 <SD_PowerON+0x118>)
 80073b0:	4618      	mov	r0, r3
 80073b2:	f002 fab8 	bl	8009926 <SDMMC_CmdAppOperCommand>
 80073b6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80073c2:	e02d      	b.n	8007420 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f002 f9c5 	bl	800975a <SDMMC_GetResponse>
 80073d0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	0fdb      	lsrs	r3, r3, #31
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <SD_PowerON+0xce>
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <SD_PowerON+0xd0>
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]

    count++;
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	3301      	adds	r3, #1
 80073e6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d802      	bhi.n	80073f8 <SD_PowerON+0xe8>
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0cc      	beq.n	8007392 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80073fe:	4293      	cmp	r3, r2
 8007400:	d902      	bls.n	8007408 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007402:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007406:	e00b      	b.n	8007420 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	c1100000 	.word	0xc1100000

0800742c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08c      	sub	sp, #48	@ 0x30
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007436:	f7fa fb1f 	bl	8001a78 <HAL_GetTick>
 800743a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f002 f987 	bl	800975a <SDMMC_GetResponse>
 800744c:	4603      	mov	r3, r0
 800744e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007452:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007456:	d102      	bne.n	800745e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007458:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800745c:	e0b0      	b.n	80075c0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2140      	movs	r1, #64	@ 0x40
 8007464:	4618      	mov	r0, r3
 8007466:	f002 f9b7 	bl	80097d8 <SDMMC_CmdBlockLength>
 800746a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d005      	beq.n	800747e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	e0a0      	b.n	80075c0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007486:	041b      	lsls	r3, r3, #16
 8007488:	4619      	mov	r1, r3
 800748a:	4610      	mov	r0, r2
 800748c:	f002 fa28 	bl	80098e0 <SDMMC_CmdAppCommand>
 8007490:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	e08d      	b.n	80075c0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80074a4:	f04f 33ff 	mov.w	r3, #4294967295
 80074a8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80074aa:	2340      	movs	r3, #64	@ 0x40
 80074ac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80074ae:	2360      	movs	r3, #96	@ 0x60
 80074b0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80074b2:	2302      	movs	r3, #2
 80074b4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80074ba:	2301      	movs	r3, #1
 80074bc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f107 0208 	add.w	r2, r7, #8
 80074c6:	4611      	mov	r1, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f002 f959 	bl	8009780 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f002 fb10 	bl	8009af8 <SDMMC_CmdStatusRegister>
 80074d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d02b      	beq.n	8007538 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	e069      	b.n	80075c0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d013      	beq.n	8007522 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80074fa:	2300      	movs	r3, #0
 80074fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074fe:	e00d      	b.n	800751c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4618      	mov	r0, r3
 8007506:	f002 f8c5 	bl	8009694 <SDMMC_ReadFIFO>
 800750a:	4602      	mov	r2, r0
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	601a      	str	r2, [r3, #0]
        pData++;
 8007510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007512:	3304      	adds	r3, #4
 8007514:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8007516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007518:	3301      	adds	r3, #1
 800751a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800751c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751e:	2b07      	cmp	r3, #7
 8007520:	d9ee      	bls.n	8007500 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007522:	f7fa faa9 	bl	8001a78 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007530:	d102      	bne.n	8007538 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007532:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007536:	e043      	b.n	80075c0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800753e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0d2      	beq.n	80074ec <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800754c:	f003 0308 	and.w	r3, r3, #8
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007554:	2308      	movs	r3, #8
 8007556:	e033      	b.n	80075c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007566:	2302      	movs	r3, #2
 8007568:	e02a      	b.n	80075c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d017      	beq.n	80075a8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007578:	2320      	movs	r3, #32
 800757a:	e021      	b.n	80075c0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4618      	mov	r0, r3
 8007582:	f002 f887 	bl	8009694 <SDMMC_ReadFIFO>
 8007586:	4602      	mov	r2, r0
 8007588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758a:	601a      	str	r2, [r3, #0]
    pData++;
 800758c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758e:	3304      	adds	r3, #4
 8007590:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007592:	f7fa fa71 	bl	8001a78 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d102      	bne.n	80075a8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80075a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80075a6:	e00b      	b.n	80075c0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e2      	bne.n	800757c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a03      	ldr	r2, [pc, #12]	@ (80075c8 <SD_SendSDStatus+0x19c>)
 80075bc:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3730      	adds	r7, #48	@ 0x30
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	18000f3a 	.word	0x18000f3a

080075cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d102      	bne.n	80075e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80075dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075e0:	e018      	b.n	8007614 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ea:	041b      	lsls	r3, r3, #16
 80075ec:	4619      	mov	r1, r3
 80075ee:	4610      	mov	r0, r2
 80075f0:	f002 fa5f 	bl	8009ab2 <SDMMC_CmdSendStatus>
 80075f4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <SD_SendStatus+0x34>
  {
    return errorstate;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	e009      	b.n	8007614 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2100      	movs	r1, #0
 8007606:	4618      	mov	r0, r3
 8007608:	f002 f8a7 	bl	800975a <SDMMC_GetResponse>
 800760c:	4602      	mov	r2, r0
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	2300      	movs	r3, #0
 800762a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f002 f891 	bl	800975a <SDMMC_GetResponse>
 8007638:	4603      	mov	r3, r0
 800763a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800763e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007642:	d102      	bne.n	800764a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007644:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007648:	e02f      	b.n	80076aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800764a:	f107 030c 	add.w	r3, r7, #12
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f879 	bl	8007748 <SD_FindSCR>
 8007656:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	e023      	b.n	80076aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01c      	beq.n	80076a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007674:	041b      	lsls	r3, r3, #16
 8007676:	4619      	mov	r1, r3
 8007678:	4610      	mov	r0, r2
 800767a:	f002 f931 	bl	80098e0 <SDMMC_CmdAppCommand>
 800767e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	e00f      	b.n	80076aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2102      	movs	r1, #2
 8007690:	4618      	mov	r0, r3
 8007692:	f002 f968 	bl	8009966 <SDMMC_CmdBusWidth>
 8007696:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	e003      	b.n	80076aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	e001      	b.n	80076aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80076a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	2300      	movs	r3, #0
 80076c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f002 f846 	bl	800975a <SDMMC_GetResponse>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076d8:	d102      	bne.n	80076e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80076da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80076de:	e02f      	b.n	8007740 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80076e0:	f107 030c 	add.w	r3, r7, #12
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f82e 	bl	8007748 <SD_FindSCR>
 80076ec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	e023      	b.n	8007740 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d01c      	beq.n	800773c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800770a:	041b      	lsls	r3, r3, #16
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f002 f8e6 	bl	80098e0 <SDMMC_CmdAppCommand>
 8007714:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	e00f      	b.n	8007740 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2100      	movs	r1, #0
 8007726:	4618      	mov	r0, r3
 8007728:	f002 f91d 	bl	8009966 <SDMMC_CmdBusWidth>
 800772c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	e003      	b.n	8007740 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007738:	2300      	movs	r3, #0
 800773a:	e001      	b.n	8007740 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800773c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08e      	sub	sp, #56	@ 0x38
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007752:	f7fa f991 	bl	8001a78 <HAL_GetTick>
 8007756:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800775c:	2300      	movs	r3, #0
 800775e:	60bb      	str	r3, [r7, #8]
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2108      	movs	r1, #8
 800776e:	4618      	mov	r0, r3
 8007770:	f002 f832 	bl	80097d8 <SDMMC_CmdBlockLength>
 8007774:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <SD_FindSCR+0x38>
  {
    return errorstate;
 800777c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777e:	e0ad      	b.n	80078dc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007788:	041b      	lsls	r3, r3, #16
 800778a:	4619      	mov	r1, r3
 800778c:	4610      	mov	r0, r2
 800778e:	f002 f8a7 	bl	80098e0 <SDMMC_CmdAppCommand>
 8007792:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <SD_FindSCR+0x56>
  {
    return errorstate;
 800779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779c:	e09e      	b.n	80078dc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800779e:	f04f 33ff 	mov.w	r3, #4294967295
 80077a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80077a4:	2308      	movs	r3, #8
 80077a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80077a8:	2330      	movs	r3, #48	@ 0x30
 80077aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80077ac:	2302      	movs	r3, #2
 80077ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80077b4:	2301      	movs	r3, #1
 80077b6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f107 0210 	add.w	r2, r7, #16
 80077c0:	4611      	mov	r1, r2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f001 ffdc 	bl	8009780 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f002 f8ed 	bl	80099ac <SDMMC_CmdSendSCR>
 80077d2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80077d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d027      	beq.n	800782a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80077da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077dc:	e07e      	b.n	80078dc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d113      	bne.n	8007814 <SD_FindSCR+0xcc>
 80077ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d110      	bne.n	8007814 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f001 ff4c 	bl	8009694 <SDMMC_ReadFIFO>
 80077fc:	4603      	mov	r3, r0
 80077fe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f001 ff45 	bl	8009694 <SDMMC_ReadFIFO>
 800780a:	4603      	mov	r3, r0
 800780c:	60fb      	str	r3, [r7, #12]
      index++;
 800780e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007810:	3301      	adds	r3, #1
 8007812:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007814:	f7fa f930 	bl	8001a78 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d102      	bne.n	800782a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007824:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007828:	e058      	b.n	80078dc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007830:	f240 532a 	movw	r3, #1322	@ 0x52a
 8007834:	4013      	ands	r3, r2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0d1      	beq.n	80077de <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2208      	movs	r2, #8
 800784e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007850:	2308      	movs	r3, #8
 8007852:	e043      	b.n	80078dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2202      	movs	r2, #2
 8007868:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800786a:	2302      	movs	r3, #2
 800786c:	e036      	b.n	80078dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b00      	cmp	r3, #0
 800787a:	d005      	beq.n	8007888 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2220      	movs	r2, #32
 8007882:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007884:	2320      	movs	r3, #32
 8007886:	e029      	b.n	80078dc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a15      	ldr	r2, [pc, #84]	@ (80078e4 <SD_FindSCR+0x19c>)
 800788e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	061a      	lsls	r2, r3, #24
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800789c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	0a1b      	lsrs	r3, r3, #8
 80078a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 80078a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	0e1b      	lsrs	r3, r3, #24
 80078ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 80078ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b0:	601a      	str	r2, [r3, #0]
    scr++;
 80078b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b4:	3304      	adds	r3, #4
 80078b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	061a      	lsls	r2, r3, #24
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	021b      	lsls	r3, r3, #8
 80078c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80078c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	0a1b      	lsrs	r3, r3, #8
 80078ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 80078ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	0e1b      	lsrs	r3, r3, #24
 80078d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 80078d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3738      	adds	r7, #56	@ 0x38
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	18000f3a 	.word	0x18000f3a

080078e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e10f      	b.n	8007b1a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a87      	ldr	r2, [pc, #540]	@ (8007b24 <HAL_SPI_Init+0x23c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00f      	beq.n	800792a <HAL_SPI_Init+0x42>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a86      	ldr	r2, [pc, #536]	@ (8007b28 <HAL_SPI_Init+0x240>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00a      	beq.n	800792a <HAL_SPI_Init+0x42>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a84      	ldr	r2, [pc, #528]	@ (8007b2c <HAL_SPI_Init+0x244>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d005      	beq.n	800792a <HAL_SPI_Init+0x42>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b0f      	cmp	r3, #15
 8007924:	d901      	bls.n	800792a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e0f7      	b.n	8007b1a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fe2e 	bl	800858c <SPI_GetPacketSize>
 8007930:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a7b      	ldr	r2, [pc, #492]	@ (8007b24 <HAL_SPI_Init+0x23c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d00c      	beq.n	8007956 <HAL_SPI_Init+0x6e>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a79      	ldr	r2, [pc, #484]	@ (8007b28 <HAL_SPI_Init+0x240>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d007      	beq.n	8007956 <HAL_SPI_Init+0x6e>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a78      	ldr	r2, [pc, #480]	@ (8007b2c <HAL_SPI_Init+0x244>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d002      	beq.n	8007956 <HAL_SPI_Init+0x6e>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b08      	cmp	r3, #8
 8007954:	d811      	bhi.n	800797a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800795a:	4a72      	ldr	r2, [pc, #456]	@ (8007b24 <HAL_SPI_Init+0x23c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d009      	beq.n	8007974 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a70      	ldr	r2, [pc, #448]	@ (8007b28 <HAL_SPI_Init+0x240>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d004      	beq.n	8007974 <HAL_SPI_Init+0x8c>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a6f      	ldr	r2, [pc, #444]	@ (8007b2c <HAL_SPI_Init+0x244>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d104      	bne.n	800797e <HAL_SPI_Init+0x96>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b10      	cmp	r3, #16
 8007978:	d901      	bls.n	800797e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e0cd      	b.n	8007b1a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d106      	bne.n	8007998 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7f9 fc7a 	bl	800128c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0201 	bic.w	r2, r2, #1
 80079ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80079ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079c4:	d119      	bne.n	80079fa <HAL_SPI_Init+0x112>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079ce:	d103      	bne.n	80079d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d008      	beq.n	80079ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10c      	bne.n	80079fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80079e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079e8:	d107      	bne.n	80079fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80079f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00f      	beq.n	8007a26 <HAL_SPI_Init+0x13e>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	2b06      	cmp	r3, #6
 8007a0c:	d90b      	bls.n	8007a26 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e007      	b.n	8007a36 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	69da      	ldr	r2, [r3, #28]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a48:	ea42 0103 	orr.w	r1, r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a60:	431a      	orrs	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a66:	431a      	orrs	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	431a      	orrs	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	431a      	orrs	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a96:	ea42 0103 	orr.w	r1, r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d113      	bne.n	8007ad6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ac0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ad4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 0201 	bic.w	r2, r2, #1
 8007ae4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	40013000 	.word	0x40013000
 8007b28:	40003800 	.word	0x40003800
 8007b2c:	40003c00 	.word	0x40003c00

08007b30 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	603b      	str	r3, [r7, #0]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3320      	adds	r3, #32
 8007b46:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b48:	f7f9 ff96 	bl	8001a78 <HAL_GetTick>
 8007b4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d001      	beq.n	8007b5e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	e1d1      	b.n	8007f02 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_SPI_Transmit+0x3a>
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e1c9      	b.n	8007f02 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_SPI_Transmit+0x4c>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e1c2      	b.n	8007f02 <HAL_SPI_Transmit+0x3d2>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2203      	movs	r2, #3
 8007b88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	88fa      	ldrh	r2, [r7, #6]
 8007b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	88fa      	ldrh	r2, [r7, #6]
 8007ba6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007bd4:	d108      	bne.n	8007be8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	e009      	b.n	8007bfc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007bfa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	4b96      	ldr	r3, [pc, #600]	@ (8007e5c <HAL_SPI_Transmit+0x32c>)
 8007c04:	4013      	ands	r3, r2
 8007c06:	88f9      	ldrh	r1, [r7, #6]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	6812      	ldr	r2, [r2, #0]
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c28:	d107      	bne.n	8007c3a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b0f      	cmp	r3, #15
 8007c40:	d947      	bls.n	8007cd2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007c42:	e03f      	b.n	8007cc4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d114      	bne.n	8007c7c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6812      	ldr	r2, [r2, #0]
 8007c5c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c62:	1d1a      	adds	r2, r3, #4
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007c7a:	e023      	b.n	8007cc4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c7c:	f7f9 fefc 	bl	8001a78 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d803      	bhi.n	8007c94 <HAL_SPI_Transmit+0x164>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c92:	d102      	bne.n	8007c9a <HAL_SPI_Transmit+0x16a>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d114      	bne.n	8007cc4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fba8 	bl	80083f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ca6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e11e      	b.n	8007f02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1b9      	bne.n	8007c44 <HAL_SPI_Transmit+0x114>
 8007cd0:	e0f1      	b.n	8007eb6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	2b07      	cmp	r3, #7
 8007cd8:	f240 80e6 	bls.w	8007ea8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007cdc:	e05d      	b.n	8007d9a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d132      	bne.n	8007d52 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d918      	bls.n	8007d2a <HAL_SPI_Transmit+0x1fa>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d014      	beq.n	8007d2a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d10:	1d1a      	adds	r2, r3, #4
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b02      	subs	r3, #2
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007d28:	e037      	b.n	8007d9a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d2e:	881a      	ldrh	r2, [r3, #0]
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d38:	1c9a      	adds	r2, r3, #2
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007d50:	e023      	b.n	8007d9a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d52:	f7f9 fe91 	bl	8001a78 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d803      	bhi.n	8007d6a <HAL_SPI_Transmit+0x23a>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d102      	bne.n	8007d70 <HAL_SPI_Transmit+0x240>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d114      	bne.n	8007d9a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fb3d 	bl	80083f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e0b3      	b.n	8007f02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d19b      	bne.n	8007cde <HAL_SPI_Transmit+0x1ae>
 8007da6:	e086      	b.n	8007eb6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d154      	bne.n	8007e60 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d918      	bls.n	8007df4 <HAL_SPI_Transmit+0x2c4>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc6:	2b40      	cmp	r3, #64	@ 0x40
 8007dc8:	d914      	bls.n	8007df4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6812      	ldr	r2, [r2, #0]
 8007dd4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dda:	1d1a      	adds	r2, r3, #4
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b04      	subs	r3, #4
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007df2:	e059      	b.n	8007ea8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d917      	bls.n	8007e30 <HAL_SPI_Transmit+0x300>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d013      	beq.n	8007e30 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e0c:	881a      	ldrh	r2, [r3, #0]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e16:	1c9a      	adds	r2, r3, #2
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	3b02      	subs	r3, #2
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007e2e:	e03b      	b.n	8007ea8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3320      	adds	r3, #32
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	3b01      	subs	r3, #1
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007e5a:	e025      	b.n	8007ea8 <HAL_SPI_Transmit+0x378>
 8007e5c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e60:	f7f9 fe0a 	bl	8001a78 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d803      	bhi.n	8007e78 <HAL_SPI_Transmit+0x348>
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d102      	bne.n	8007e7e <HAL_SPI_Transmit+0x34e>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d114      	bne.n	8007ea8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fab6 	bl	80083f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e02c      	b.n	8007f02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f47f af79 	bne.w	8007da8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2108      	movs	r1, #8
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 fb35 	bl	8008530 <SPI_WaitOnFlagUntilTimeout>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ed2:	f043 0220 	orr.w	r2, r3, #32
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fa87 	bl	80083f0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007f00:	2300      	movs	r3, #0
  }
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop

08007f0c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	603b      	str	r3, [r7, #0]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f20:	095b      	lsrs	r3, r3, #5
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3301      	adds	r3, #1
 8007f26:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3330      	adds	r3, #48	@ 0x30
 8007f2e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f30:	f7f9 fda2 	bl	8001a78 <HAL_GetTick>
 8007f34:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d001      	beq.n	8007f46 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007f42:	2302      	movs	r3, #2
 8007f44:	e250      	b.n	80083e8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <HAL_SPI_Receive+0x46>
 8007f4c:	88fb      	ldrh	r3, [r7, #6]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e248      	b.n	80083e8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <HAL_SPI_Receive+0x58>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e241      	b.n	80083e8 <HAL_SPI_Receive+0x4dc>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2204      	movs	r2, #4
 8007f70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	88fa      	ldrh	r2, [r7, #6]
 8007f86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	88fa      	ldrh	r2, [r7, #6]
 8007f8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007fbc:	d108      	bne.n	8007fd0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	e009      	b.n	8007fe4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007fe2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	4b95      	ldr	r3, [pc, #596]	@ (8008240 <HAL_SPI_Receive+0x334>)
 8007fec:	4013      	ands	r3, r2
 8007fee:	88f9      	ldrh	r1, [r7, #6]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	6812      	ldr	r2, [r2, #0]
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0201 	orr.w	r2, r2, #1
 8008006:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008010:	d107      	bne.n	8008022 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008020:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	2b0f      	cmp	r3, #15
 8008028:	d96c      	bls.n	8008104 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800802a:	e064      	b.n	80080f6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b01      	cmp	r3, #1
 8008040:	d114      	bne.n	800806c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800804a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800804c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008052:	1d1a      	adds	r2, r3, #4
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800805e:	b29b      	uxth	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800806a:	e044      	b.n	80080f6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008072:	b29b      	uxth	r3, r3
 8008074:	8bfa      	ldrh	r2, [r7, #30]
 8008076:	429a      	cmp	r2, r3
 8008078:	d919      	bls.n	80080ae <HAL_SPI_Receive+0x1a2>
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d014      	beq.n	80080ae <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800808c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800808e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008094:	1d1a      	adds	r2, r3, #4
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80080ac:	e023      	b.n	80080f6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080ae:	f7f9 fce3 	bl	8001a78 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d803      	bhi.n	80080c6 <HAL_SPI_Receive+0x1ba>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c4:	d102      	bne.n	80080cc <HAL_SPI_Receive+0x1c0>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d114      	bne.n	80080f6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f98f 	bl	80083f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e178      	b.n	80083e8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d194      	bne.n	800802c <HAL_SPI_Receive+0x120>
 8008102:	e15e      	b.n	80083c2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	2b07      	cmp	r3, #7
 800810a:	f240 8153 	bls.w	80083b4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800810e:	e08f      	b.n	8008230 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b01      	cmp	r3, #1
 8008124:	d114      	bne.n	8008150 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	8812      	ldrh	r2, [r2, #0]
 800812e:	b292      	uxth	r2, r2
 8008130:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008136:	1c9a      	adds	r2, r3, #2
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800814e:	e06f      	b.n	8008230 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008156:	b29b      	uxth	r3, r3
 8008158:	8bfa      	ldrh	r2, [r7, #30]
 800815a:	429a      	cmp	r2, r3
 800815c:	d924      	bls.n	80081a8 <HAL_SPI_Receive+0x29c>
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d01f      	beq.n	80081a8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	8812      	ldrh	r2, [r2, #0]
 8008170:	b292      	uxth	r2, r2
 8008172:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008178:	1c9a      	adds	r2, r3, #2
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	8812      	ldrh	r2, [r2, #0]
 8008186:	b292      	uxth	r2, r2
 8008188:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800818e:	1c9a      	adds	r2, r3, #2
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800819a:	b29b      	uxth	r3, r3
 800819c:	3b02      	subs	r3, #2
 800819e:	b29a      	uxth	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80081a6:	e043      	b.n	8008230 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d119      	bne.n	80081e8 <HAL_SPI_Receive+0x2dc>
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d014      	beq.n	80081e8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	8812      	ldrh	r2, [r2, #0]
 80081c6:	b292      	uxth	r2, r2
 80081c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ce:	1c9a      	adds	r2, r3, #2
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80081e6:	e023      	b.n	8008230 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081e8:	f7f9 fc46 	bl	8001a78 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d803      	bhi.n	8008200 <HAL_SPI_Receive+0x2f4>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fe:	d102      	bne.n	8008206 <HAL_SPI_Receive+0x2fa>
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d114      	bne.n	8008230 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 f8f2 	bl	80083f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008212:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e0db      	b.n	80083e8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008236:	b29b      	uxth	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	f47f af69 	bne.w	8008110 <HAL_SPI_Receive+0x204>
 800823e:	e0c0      	b.n	80083c2 <HAL_SPI_Receive+0x4b6>
 8008240:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b01      	cmp	r3, #1
 8008258:	d117      	bne.n	800828a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008266:	7812      	ldrb	r2, [r2, #0]
 8008268:	b2d2      	uxtb	r2, r2
 800826a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800827c:	b29b      	uxth	r3, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	b29a      	uxth	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008288:	e094      	b.n	80083b4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008290:	b29b      	uxth	r3, r3
 8008292:	8bfa      	ldrh	r2, [r7, #30]
 8008294:	429a      	cmp	r2, r3
 8008296:	d946      	bls.n	8008326 <HAL_SPI_Receive+0x41a>
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d041      	beq.n	8008326 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082ae:	7812      	ldrb	r2, [r2, #0]
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082ca:	7812      	ldrb	r2, [r2, #0]
 80082cc:	b2d2      	uxtb	r2, r2
 80082ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082e6:	7812      	ldrb	r2, [r2, #0]
 80082e8:	b2d2      	uxtb	r2, r2
 80082ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008302:	7812      	ldrb	r2, [r2, #0]
 8008304:	b2d2      	uxtb	r2, r2
 8008306:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008318:	b29b      	uxth	r3, r3
 800831a:	3b04      	subs	r3, #4
 800831c:	b29a      	uxth	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008324:	e046      	b.n	80083b4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800832c:	b29b      	uxth	r3, r3
 800832e:	2b03      	cmp	r3, #3
 8008330:	d81c      	bhi.n	800836c <HAL_SPI_Receive+0x460>
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d017      	beq.n	800836c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008348:	7812      	ldrb	r2, [r2, #0]
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800835e:	b29b      	uxth	r3, r3
 8008360:	3b01      	subs	r3, #1
 8008362:	b29a      	uxth	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800836a:	e023      	b.n	80083b4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800836c:	f7f9 fb84 	bl	8001a78 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	429a      	cmp	r2, r3
 800837a:	d803      	bhi.n	8008384 <HAL_SPI_Receive+0x478>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008382:	d102      	bne.n	800838a <HAL_SPI_Receive+0x47e>
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d114      	bne.n	80083b4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f830 	bl	80083f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008396:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e019      	b.n	80083e8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f47f af41 	bne.w	8008244 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 f814 	bl	80083f0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80083e6:	2300      	movs	r3, #0
  }
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3720      	adds	r7, #32
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0208 	orr.w	r2, r2, #8
 800840e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f042 0210 	orr.w	r2, r2, #16
 800841e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0201 	bic.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6919      	ldr	r1, [r3, #16]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	4b3c      	ldr	r3, [pc, #240]	@ (800852c <SPI_CloseTransfer+0x13c>)
 800843c:	400b      	ands	r3, r1
 800843e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800844e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b04      	cmp	r3, #4
 800845a:	d014      	beq.n	8008486 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00f      	beq.n	8008486 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800846c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	699a      	ldr	r2, [r3, #24]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f042 0220 	orr.w	r2, r2, #32
 8008484:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b03      	cmp	r3, #3
 8008490:	d014      	beq.n	80084bc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00f      	beq.n	80084bc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084a2:	f043 0204 	orr.w	r2, r3, #4
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699a      	ldr	r2, [r3, #24]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00f      	beq.n	80084e6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084cc:	f043 0201 	orr.w	r2, r3, #1
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	699a      	ldr	r2, [r3, #24]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00f      	beq.n	8008510 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084f6:	f043 0208 	orr.w	r2, r3, #8
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800850e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008520:	bf00      	nop
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	fffffc90 	.word	0xfffffc90

08008530 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	603b      	str	r3, [r7, #0]
 800853c:	4613      	mov	r3, r2
 800853e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008540:	e010      	b.n	8008564 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008542:	f7f9 fa99 	bl	8001a78 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d803      	bhi.n	800855a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d102      	bne.n	8008560 <SPI_WaitOnFlagUntilTimeout+0x30>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e00f      	b.n	8008584 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695a      	ldr	r2, [r3, #20]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4013      	ands	r3, r2
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	429a      	cmp	r2, r3
 8008572:	bf0c      	ite	eq
 8008574:	2301      	moveq	r3, #1
 8008576:	2300      	movne	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	429a      	cmp	r2, r3
 8008580:	d0df      	beq.n	8008542 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008598:	095b      	lsrs	r3, r3, #5
 800859a:	3301      	adds	r3, #1
 800859c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	3301      	adds	r3, #1
 80085a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	3307      	adds	r3, #7
 80085aa:	08db      	lsrs	r3, r3, #3
 80085ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	fb02 f303 	mul.w	r3, r2, r3
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e049      	b.n	8008668 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d106      	bne.n	80085ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7f8 ff4d 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2202      	movs	r2, #2
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4619      	mov	r1, r3
 8008600:	4610      	mov	r0, r2
 8008602:	f000 fb55 	bl	8008cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b01      	cmp	r3, #1
 8008682:	d001      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e05e      	b.n	8008746 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a2b      	ldr	r2, [pc, #172]	@ (8008754 <HAL_TIM_Base_Start_IT+0xe4>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d02c      	beq.n	8008704 <HAL_TIM_Base_Start_IT+0x94>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b2:	d027      	beq.n	8008704 <HAL_TIM_Base_Start_IT+0x94>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a27      	ldr	r2, [pc, #156]	@ (8008758 <HAL_TIM_Base_Start_IT+0xe8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d022      	beq.n	8008704 <HAL_TIM_Base_Start_IT+0x94>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a26      	ldr	r2, [pc, #152]	@ (800875c <HAL_TIM_Base_Start_IT+0xec>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d01d      	beq.n	8008704 <HAL_TIM_Base_Start_IT+0x94>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a24      	ldr	r2, [pc, #144]	@ (8008760 <HAL_TIM_Base_Start_IT+0xf0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d018      	beq.n	8008704 <HAL_TIM_Base_Start_IT+0x94>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a23      	ldr	r2, [pc, #140]	@ (8008764 <HAL_TIM_Base_Start_IT+0xf4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d013      	beq.n	8008704 <HAL_TIM_Base_Start_IT+0x94>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a21      	ldr	r2, [pc, #132]	@ (8008768 <HAL_TIM_Base_Start_IT+0xf8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d00e      	beq.n	8008704 <HAL_TIM_Base_Start_IT+0x94>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a20      	ldr	r2, [pc, #128]	@ (800876c <HAL_TIM_Base_Start_IT+0xfc>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d009      	beq.n	8008704 <HAL_TIM_Base_Start_IT+0x94>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a1e      	ldr	r2, [pc, #120]	@ (8008770 <HAL_TIM_Base_Start_IT+0x100>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d004      	beq.n	8008704 <HAL_TIM_Base_Start_IT+0x94>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008774 <HAL_TIM_Base_Start_IT+0x104>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d115      	bne.n	8008730 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689a      	ldr	r2, [r3, #8]
 800870a:	4b1b      	ldr	r3, [pc, #108]	@ (8008778 <HAL_TIM_Base_Start_IT+0x108>)
 800870c:	4013      	ands	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b06      	cmp	r3, #6
 8008714:	d015      	beq.n	8008742 <HAL_TIM_Base_Start_IT+0xd2>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800871c:	d011      	beq.n	8008742 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f042 0201 	orr.w	r2, r2, #1
 800872c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800872e:	e008      	b.n	8008742 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0201 	orr.w	r2, r2, #1
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	e000      	b.n	8008744 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008742:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	40010000 	.word	0x40010000
 8008758:	40000400 	.word	0x40000400
 800875c:	40000800 	.word	0x40000800
 8008760:	40000c00 	.word	0x40000c00
 8008764:	40010400 	.word	0x40010400
 8008768:	40001800 	.word	0x40001800
 800876c:	40014000 	.word	0x40014000
 8008770:	4000e000 	.word	0x4000e000
 8008774:	4000e400 	.word	0x4000e400
 8008778:	00010007 	.word	0x00010007

0800877c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e049      	b.n	8008822 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d106      	bne.n	80087a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7f8 fdf4 	bl	8001390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2202      	movs	r2, #2
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3304      	adds	r3, #4
 80087b8:	4619      	mov	r1, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	f000 fa78 	bl	8008cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b00      	cmp	r3, #0
 800884a:	d020      	beq.n	800888e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d01b      	beq.n	800888e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f06f 0202 	mvn.w	r2, #2
 800885e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	f003 0303 	and.w	r3, r3, #3
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f9fd 	bl	8008c74 <HAL_TIM_IC_CaptureCallback>
 800887a:	e005      	b.n	8008888 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f9ef 	bl	8008c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa00 	bl	8008c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	d020      	beq.n	80088da <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f003 0304 	and.w	r3, r3, #4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d01b      	beq.n	80088da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f06f 0204 	mvn.w	r2, #4
 80088aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d003      	beq.n	80088c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f9d7 	bl	8008c74 <HAL_TIM_IC_CaptureCallback>
 80088c6:	e005      	b.n	80088d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f9c9 	bl	8008c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f9da 	bl	8008c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f003 0308 	and.w	r3, r3, #8
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d020      	beq.n	8008926 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0308 	and.w	r3, r3, #8
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d01b      	beq.n	8008926 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f06f 0208 	mvn.w	r2, #8
 80088f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2204      	movs	r2, #4
 80088fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f9b1 	bl	8008c74 <HAL_TIM_IC_CaptureCallback>
 8008912:	e005      	b.n	8008920 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f9a3 	bl	8008c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f9b4 	bl	8008c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b00      	cmp	r3, #0
 800892e:	d020      	beq.n	8008972 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f003 0310 	and.w	r3, r3, #16
 8008936:	2b00      	cmp	r3, #0
 8008938:	d01b      	beq.n	8008972 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f06f 0210 	mvn.w	r2, #16
 8008942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2208      	movs	r2, #8
 8008948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f98b 	bl	8008c74 <HAL_TIM_IC_CaptureCallback>
 800895e:	e005      	b.n	800896c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f97d 	bl	8008c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f98e 	bl	8008c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00c      	beq.n	8008996 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f06f 0201 	mvn.w	r2, #1
 800898e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7f7 fd21 	bl	80003d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800899c:	2b00      	cmp	r3, #0
 800899e:	d104      	bne.n	80089aa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00c      	beq.n	80089c4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d007      	beq.n	80089c4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80089bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fe2a 	bl	8009618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00c      	beq.n	80089e8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80089e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fe22 	bl	800962c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00c      	beq.n	8008a0c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d007      	beq.n	8008a0c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f948 	bl	8008c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f003 0320 	and.w	r3, r3, #32
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00c      	beq.n	8008a30 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f003 0320 	and.w	r3, r3, #32
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d007      	beq.n	8008a30 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f06f 0220 	mvn.w	r2, #32
 8008a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fdea 	bl	8009604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a30:	bf00      	nop
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e0ff      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b14      	cmp	r3, #20
 8008a62:	f200 80f0 	bhi.w	8008c46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008a66:	a201      	add	r2, pc, #4	@ (adr r2, 8008a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008ac1 	.word	0x08008ac1
 8008a70:	08008c47 	.word	0x08008c47
 8008a74:	08008c47 	.word	0x08008c47
 8008a78:	08008c47 	.word	0x08008c47
 8008a7c:	08008b01 	.word	0x08008b01
 8008a80:	08008c47 	.word	0x08008c47
 8008a84:	08008c47 	.word	0x08008c47
 8008a88:	08008c47 	.word	0x08008c47
 8008a8c:	08008b43 	.word	0x08008b43
 8008a90:	08008c47 	.word	0x08008c47
 8008a94:	08008c47 	.word	0x08008c47
 8008a98:	08008c47 	.word	0x08008c47
 8008a9c:	08008b83 	.word	0x08008b83
 8008aa0:	08008c47 	.word	0x08008c47
 8008aa4:	08008c47 	.word	0x08008c47
 8008aa8:	08008c47 	.word	0x08008c47
 8008aac:	08008bc5 	.word	0x08008bc5
 8008ab0:	08008c47 	.word	0x08008c47
 8008ab4:	08008c47 	.word	0x08008c47
 8008ab8:	08008c47 	.word	0x08008c47
 8008abc:	08008c05 	.word	0x08008c05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f99e 	bl	8008e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699a      	ldr	r2, [r3, #24]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0208 	orr.w	r2, r2, #8
 8008ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	699a      	ldr	r2, [r3, #24]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0204 	bic.w	r2, r2, #4
 8008aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6999      	ldr	r1, [r3, #24]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	691a      	ldr	r2, [r3, #16]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	619a      	str	r2, [r3, #24]
      break;
 8008afe:	e0a5      	b.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68b9      	ldr	r1, [r7, #8]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 fa0e 	bl	8008f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	699a      	ldr	r2, [r3, #24]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	699a      	ldr	r2, [r3, #24]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6999      	ldr	r1, [r3, #24]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	021a      	lsls	r2, r3, #8
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	619a      	str	r2, [r3, #24]
      break;
 8008b40:	e084      	b.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 fa77 	bl	800903c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	69da      	ldr	r2, [r3, #28]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f042 0208 	orr.w	r2, r2, #8
 8008b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	69da      	ldr	r2, [r3, #28]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0204 	bic.w	r2, r2, #4
 8008b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69d9      	ldr	r1, [r3, #28]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	691a      	ldr	r2, [r3, #16]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	61da      	str	r2, [r3, #28]
      break;
 8008b80:	e064      	b.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 fadf 	bl	800914c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69da      	ldr	r2, [r3, #28]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69da      	ldr	r2, [r3, #28]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	69d9      	ldr	r1, [r3, #28]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	021a      	lsls	r2, r3, #8
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	61da      	str	r2, [r3, #28]
      break;
 8008bc2:	e043      	b.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68b9      	ldr	r1, [r7, #8]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fb28 	bl	8009220 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0208 	orr.w	r2, r2, #8
 8008bde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0204 	bic.w	r2, r2, #4
 8008bee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	691a      	ldr	r2, [r3, #16]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008c02:	e023      	b.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68b9      	ldr	r1, [r7, #8]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fb6c 	bl	80092e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	021a      	lsls	r2, r3, #8
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	430a      	orrs	r2, r1
 8008c42:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008c44:	e002      	b.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	75fb      	strb	r3, [r7, #23]
      break;
 8008c4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop

08008c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a47      	ldr	r2, [pc, #284]	@ (8008de0 <TIM_Base_SetConfig+0x130>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d013      	beq.n	8008cf0 <TIM_Base_SetConfig+0x40>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cce:	d00f      	beq.n	8008cf0 <TIM_Base_SetConfig+0x40>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a44      	ldr	r2, [pc, #272]	@ (8008de4 <TIM_Base_SetConfig+0x134>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00b      	beq.n	8008cf0 <TIM_Base_SetConfig+0x40>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a43      	ldr	r2, [pc, #268]	@ (8008de8 <TIM_Base_SetConfig+0x138>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d007      	beq.n	8008cf0 <TIM_Base_SetConfig+0x40>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a42      	ldr	r2, [pc, #264]	@ (8008dec <TIM_Base_SetConfig+0x13c>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d003      	beq.n	8008cf0 <TIM_Base_SetConfig+0x40>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a41      	ldr	r2, [pc, #260]	@ (8008df0 <TIM_Base_SetConfig+0x140>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d108      	bne.n	8008d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a36      	ldr	r2, [pc, #216]	@ (8008de0 <TIM_Base_SetConfig+0x130>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d027      	beq.n	8008d5a <TIM_Base_SetConfig+0xaa>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d10:	d023      	beq.n	8008d5a <TIM_Base_SetConfig+0xaa>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a33      	ldr	r2, [pc, #204]	@ (8008de4 <TIM_Base_SetConfig+0x134>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d01f      	beq.n	8008d5a <TIM_Base_SetConfig+0xaa>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a32      	ldr	r2, [pc, #200]	@ (8008de8 <TIM_Base_SetConfig+0x138>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d01b      	beq.n	8008d5a <TIM_Base_SetConfig+0xaa>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a31      	ldr	r2, [pc, #196]	@ (8008dec <TIM_Base_SetConfig+0x13c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d017      	beq.n	8008d5a <TIM_Base_SetConfig+0xaa>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a30      	ldr	r2, [pc, #192]	@ (8008df0 <TIM_Base_SetConfig+0x140>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d013      	beq.n	8008d5a <TIM_Base_SetConfig+0xaa>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a2f      	ldr	r2, [pc, #188]	@ (8008df4 <TIM_Base_SetConfig+0x144>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d00f      	beq.n	8008d5a <TIM_Base_SetConfig+0xaa>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8008df8 <TIM_Base_SetConfig+0x148>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d00b      	beq.n	8008d5a <TIM_Base_SetConfig+0xaa>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a2d      	ldr	r2, [pc, #180]	@ (8008dfc <TIM_Base_SetConfig+0x14c>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d007      	beq.n	8008d5a <TIM_Base_SetConfig+0xaa>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8008e00 <TIM_Base_SetConfig+0x150>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d003      	beq.n	8008d5a <TIM_Base_SetConfig+0xaa>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a2b      	ldr	r2, [pc, #172]	@ (8008e04 <TIM_Base_SetConfig+0x154>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d108      	bne.n	8008d6c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	689a      	ldr	r2, [r3, #8]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a14      	ldr	r2, [pc, #80]	@ (8008de0 <TIM_Base_SetConfig+0x130>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d00f      	beq.n	8008db2 <TIM_Base_SetConfig+0x102>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a16      	ldr	r2, [pc, #88]	@ (8008df0 <TIM_Base_SetConfig+0x140>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d00b      	beq.n	8008db2 <TIM_Base_SetConfig+0x102>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a15      	ldr	r2, [pc, #84]	@ (8008df4 <TIM_Base_SetConfig+0x144>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d007      	beq.n	8008db2 <TIM_Base_SetConfig+0x102>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a14      	ldr	r2, [pc, #80]	@ (8008df8 <TIM_Base_SetConfig+0x148>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d003      	beq.n	8008db2 <TIM_Base_SetConfig+0x102>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a13      	ldr	r2, [pc, #76]	@ (8008dfc <TIM_Base_SetConfig+0x14c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d103      	bne.n	8008dba <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	691a      	ldr	r2, [r3, #16]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f043 0204 	orr.w	r2, r3, #4
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	601a      	str	r2, [r3, #0]
}
 8008dd2:	bf00      	nop
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	40010000 	.word	0x40010000
 8008de4:	40000400 	.word	0x40000400
 8008de8:	40000800 	.word	0x40000800
 8008dec:	40000c00 	.word	0x40000c00
 8008df0:	40010400 	.word	0x40010400
 8008df4:	40014000 	.word	0x40014000
 8008df8:	40014400 	.word	0x40014400
 8008dfc:	40014800 	.word	0x40014800
 8008e00:	4000e000 	.word	0x4000e000
 8008e04:	4000e400 	.word	0x4000e400

08008e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	f023 0201 	bic.w	r2, r3, #1
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4b37      	ldr	r3, [pc, #220]	@ (8008f10 <TIM_OC1_SetConfig+0x108>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f023 0302 	bic.w	r3, r3, #2
 8008e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8008f14 <TIM_OC1_SetConfig+0x10c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d00f      	beq.n	8008e84 <TIM_OC1_SetConfig+0x7c>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a2c      	ldr	r2, [pc, #176]	@ (8008f18 <TIM_OC1_SetConfig+0x110>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d00b      	beq.n	8008e84 <TIM_OC1_SetConfig+0x7c>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8008f1c <TIM_OC1_SetConfig+0x114>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d007      	beq.n	8008e84 <TIM_OC1_SetConfig+0x7c>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a2a      	ldr	r2, [pc, #168]	@ (8008f20 <TIM_OC1_SetConfig+0x118>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d003      	beq.n	8008e84 <TIM_OC1_SetConfig+0x7c>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a29      	ldr	r2, [pc, #164]	@ (8008f24 <TIM_OC1_SetConfig+0x11c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d10c      	bne.n	8008e9e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f023 0308 	bic.w	r3, r3, #8
 8008e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f023 0304 	bic.w	r3, r3, #4
 8008e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8008f14 <TIM_OC1_SetConfig+0x10c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d00f      	beq.n	8008ec6 <TIM_OC1_SetConfig+0xbe>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8008f18 <TIM_OC1_SetConfig+0x110>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d00b      	beq.n	8008ec6 <TIM_OC1_SetConfig+0xbe>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8008f1c <TIM_OC1_SetConfig+0x114>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d007      	beq.n	8008ec6 <TIM_OC1_SetConfig+0xbe>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a19      	ldr	r2, [pc, #100]	@ (8008f20 <TIM_OC1_SetConfig+0x118>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d003      	beq.n	8008ec6 <TIM_OC1_SetConfig+0xbe>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a18      	ldr	r2, [pc, #96]	@ (8008f24 <TIM_OC1_SetConfig+0x11c>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d111      	bne.n	8008eea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	621a      	str	r2, [r3, #32]
}
 8008f04:	bf00      	nop
 8008f06:	371c      	adds	r7, #28
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	fffeff8f 	.word	0xfffeff8f
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40010400 	.word	0x40010400
 8008f1c:	40014000 	.word	0x40014000
 8008f20:	40014400 	.word	0x40014400
 8008f24:	40014800 	.word	0x40014800

08008f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	f023 0210 	bic.w	r2, r3, #16
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4b34      	ldr	r3, [pc, #208]	@ (8009024 <TIM_OC2_SetConfig+0xfc>)
 8008f54:	4013      	ands	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	021b      	lsls	r3, r3, #8
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f023 0320 	bic.w	r3, r3, #32
 8008f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	011b      	lsls	r3, r3, #4
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a29      	ldr	r2, [pc, #164]	@ (8009028 <TIM_OC2_SetConfig+0x100>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d003      	beq.n	8008f90 <TIM_OC2_SetConfig+0x68>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a28      	ldr	r2, [pc, #160]	@ (800902c <TIM_OC2_SetConfig+0x104>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d10d      	bne.n	8008fac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008faa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a1e      	ldr	r2, [pc, #120]	@ (8009028 <TIM_OC2_SetConfig+0x100>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d00f      	beq.n	8008fd4 <TIM_OC2_SetConfig+0xac>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800902c <TIM_OC2_SetConfig+0x104>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d00b      	beq.n	8008fd4 <TIM_OC2_SetConfig+0xac>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8009030 <TIM_OC2_SetConfig+0x108>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d007      	beq.n	8008fd4 <TIM_OC2_SetConfig+0xac>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8009034 <TIM_OC2_SetConfig+0x10c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d003      	beq.n	8008fd4 <TIM_OC2_SetConfig+0xac>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a1a      	ldr	r2, [pc, #104]	@ (8009038 <TIM_OC2_SetConfig+0x110>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d113      	bne.n	8008ffc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	621a      	str	r2, [r3, #32]
}
 8009016:	bf00      	nop
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	feff8fff 	.word	0xfeff8fff
 8009028:	40010000 	.word	0x40010000
 800902c:	40010400 	.word	0x40010400
 8009030:	40014000 	.word	0x40014000
 8009034:	40014400 	.word	0x40014400
 8009038:	40014800 	.word	0x40014800

0800903c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4b33      	ldr	r3, [pc, #204]	@ (8009134 <TIM_OC3_SetConfig+0xf8>)
 8009068:	4013      	ands	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0303 	bic.w	r3, r3, #3
 8009072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	021b      	lsls	r3, r3, #8
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	4313      	orrs	r3, r2
 8009090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a28      	ldr	r2, [pc, #160]	@ (8009138 <TIM_OC3_SetConfig+0xfc>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d003      	beq.n	80090a2 <TIM_OC3_SetConfig+0x66>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a27      	ldr	r2, [pc, #156]	@ (800913c <TIM_OC3_SetConfig+0x100>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d10d      	bne.n	80090be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80090bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009138 <TIM_OC3_SetConfig+0xfc>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d00f      	beq.n	80090e6 <TIM_OC3_SetConfig+0xaa>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a1c      	ldr	r2, [pc, #112]	@ (800913c <TIM_OC3_SetConfig+0x100>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d00b      	beq.n	80090e6 <TIM_OC3_SetConfig+0xaa>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009140 <TIM_OC3_SetConfig+0x104>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d007      	beq.n	80090e6 <TIM_OC3_SetConfig+0xaa>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a1a      	ldr	r2, [pc, #104]	@ (8009144 <TIM_OC3_SetConfig+0x108>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d003      	beq.n	80090e6 <TIM_OC3_SetConfig+0xaa>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a19      	ldr	r2, [pc, #100]	@ (8009148 <TIM_OC3_SetConfig+0x10c>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d113      	bne.n	800910e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	4313      	orrs	r3, r2
 8009100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	621a      	str	r2, [r3, #32]
}
 8009128:	bf00      	nop
 800912a:	371c      	adds	r7, #28
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	fffeff8f 	.word	0xfffeff8f
 8009138:	40010000 	.word	0x40010000
 800913c:	40010400 	.word	0x40010400
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800

0800914c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	4b24      	ldr	r3, [pc, #144]	@ (8009208 <TIM_OC4_SetConfig+0xbc>)
 8009178:	4013      	ands	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	031b      	lsls	r3, r3, #12
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a19      	ldr	r2, [pc, #100]	@ (800920c <TIM_OC4_SetConfig+0xc0>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00f      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a18      	ldr	r2, [pc, #96]	@ (8009210 <TIM_OC4_SetConfig+0xc4>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00b      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a17      	ldr	r2, [pc, #92]	@ (8009214 <TIM_OC4_SetConfig+0xc8>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d007      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a16      	ldr	r2, [pc, #88]	@ (8009218 <TIM_OC4_SetConfig+0xcc>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d003      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a15      	ldr	r2, [pc, #84]	@ (800921c <TIM_OC4_SetConfig+0xd0>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d109      	bne.n	80091e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	019b      	lsls	r3, r3, #6
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	4313      	orrs	r3, r2
 80091de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	621a      	str	r2, [r3, #32]
}
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	feff8fff 	.word	0xfeff8fff
 800920c:	40010000 	.word	0x40010000
 8009210:	40010400 	.word	0x40010400
 8009214:	40014000 	.word	0x40014000
 8009218:	40014400 	.word	0x40014400
 800921c:	40014800 	.word	0x40014800

08009220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	4b21      	ldr	r3, [pc, #132]	@ (80092d0 <TIM_OC5_SetConfig+0xb0>)
 800924c:	4013      	ands	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	4313      	orrs	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009260:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	041b      	lsls	r3, r3, #16
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	4313      	orrs	r3, r2
 800926c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a18      	ldr	r2, [pc, #96]	@ (80092d4 <TIM_OC5_SetConfig+0xb4>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d00f      	beq.n	8009296 <TIM_OC5_SetConfig+0x76>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a17      	ldr	r2, [pc, #92]	@ (80092d8 <TIM_OC5_SetConfig+0xb8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00b      	beq.n	8009296 <TIM_OC5_SetConfig+0x76>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a16      	ldr	r2, [pc, #88]	@ (80092dc <TIM_OC5_SetConfig+0xbc>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d007      	beq.n	8009296 <TIM_OC5_SetConfig+0x76>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a15      	ldr	r2, [pc, #84]	@ (80092e0 <TIM_OC5_SetConfig+0xc0>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d003      	beq.n	8009296 <TIM_OC5_SetConfig+0x76>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a14      	ldr	r2, [pc, #80]	@ (80092e4 <TIM_OC5_SetConfig+0xc4>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d109      	bne.n	80092aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800929c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	621a      	str	r2, [r3, #32]
}
 80092c4:	bf00      	nop
 80092c6:	371c      	adds	r7, #28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	fffeff8f 	.word	0xfffeff8f
 80092d4:	40010000 	.word	0x40010000
 80092d8:	40010400 	.word	0x40010400
 80092dc:	40014000 	.word	0x40014000
 80092e0:	40014400 	.word	0x40014400
 80092e4:	40014800 	.word	0x40014800

080092e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800930e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	4b22      	ldr	r3, [pc, #136]	@ (800939c <TIM_OC6_SetConfig+0xb4>)
 8009314:	4013      	ands	r3, r2
 8009316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	4313      	orrs	r3, r2
 8009322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800932a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	051b      	lsls	r3, r3, #20
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a19      	ldr	r2, [pc, #100]	@ (80093a0 <TIM_OC6_SetConfig+0xb8>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00f      	beq.n	8009360 <TIM_OC6_SetConfig+0x78>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a18      	ldr	r2, [pc, #96]	@ (80093a4 <TIM_OC6_SetConfig+0xbc>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00b      	beq.n	8009360 <TIM_OC6_SetConfig+0x78>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a17      	ldr	r2, [pc, #92]	@ (80093a8 <TIM_OC6_SetConfig+0xc0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d007      	beq.n	8009360 <TIM_OC6_SetConfig+0x78>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a16      	ldr	r2, [pc, #88]	@ (80093ac <TIM_OC6_SetConfig+0xc4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <TIM_OC6_SetConfig+0x78>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a15      	ldr	r2, [pc, #84]	@ (80093b0 <TIM_OC6_SetConfig+0xc8>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d109      	bne.n	8009374 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009366:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	029b      	lsls	r3, r3, #10
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	621a      	str	r2, [r3, #32]
}
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	feff8fff 	.word	0xfeff8fff
 80093a0:	40010000 	.word	0x40010000
 80093a4:	40010400 	.word	0x40010400
 80093a8:	40014000 	.word	0x40014000
 80093ac:	40014400 	.word	0x40014400
 80093b0:	40014800 	.word	0x40014800

080093b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d101      	bne.n	80093cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093c8:	2302      	movs	r3, #2
 80093ca:	e077      	b.n	80094bc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a35      	ldr	r2, [pc, #212]	@ (80094c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d004      	beq.n	8009400 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a34      	ldr	r2, [pc, #208]	@ (80094cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d108      	bne.n	8009412 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009406:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	4313      	orrs	r3, r2
 8009410:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009418:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	4313      	orrs	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a25      	ldr	r2, [pc, #148]	@ (80094c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d02c      	beq.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800943e:	d027      	beq.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a22      	ldr	r2, [pc, #136]	@ (80094d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d022      	beq.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a21      	ldr	r2, [pc, #132]	@ (80094d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d01d      	beq.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a1f      	ldr	r2, [pc, #124]	@ (80094d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d018      	beq.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a1a      	ldr	r2, [pc, #104]	@ (80094cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d013      	beq.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a1b      	ldr	r2, [pc, #108]	@ (80094dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00e      	beq.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a1a      	ldr	r2, [pc, #104]	@ (80094e0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d009      	beq.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a18      	ldr	r2, [pc, #96]	@ (80094e4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d004      	beq.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a17      	ldr	r2, [pc, #92]	@ (80094e8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d10c      	bne.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009496:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	40010000 	.word	0x40010000
 80094cc:	40010400 	.word	0x40010400
 80094d0:	40000400 	.word	0x40000400
 80094d4:	40000800 	.word	0x40000800
 80094d8:	40000c00 	.word	0x40000c00
 80094dc:	40001800 	.word	0x40001800
 80094e0:	40014000 	.word	0x40014000
 80094e4:	4000e000 	.word	0x4000e000
 80094e8:	4000e400 	.word	0x4000e400

080094ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009500:	2b01      	cmp	r3, #1
 8009502:	d101      	bne.n	8009508 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009504:	2302      	movs	r3, #2
 8009506:	e073      	b.n	80095f0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	4313      	orrs	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	4313      	orrs	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4313      	orrs	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	4313      	orrs	r3, r2
 8009554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	4313      	orrs	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	041b      	lsls	r3, r3, #16
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	69db      	ldr	r3, [r3, #28]
 800958c:	4313      	orrs	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a19      	ldr	r2, [pc, #100]	@ (80095fc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d004      	beq.n	80095a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a18      	ldr	r2, [pc, #96]	@ (8009600 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d11c      	bne.n	80095de <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ae:	051b      	lsls	r3, r3, #20
 80095b0:	4313      	orrs	r3, r2
 80095b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	4313      	orrs	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095cc:	4313      	orrs	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	40010000 	.word	0x40010000
 8009600:	40010400 	.word	0x40010400

08009604 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009640:	b084      	sub	sp, #16
 8009642:	b480      	push	{r7}
 8009644:	b085      	sub	sp, #20
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	f107 001c 	add.w	r0, r7, #28
 800964e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009656:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009658:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800965a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800965c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800965e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8009662:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8009666:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	4b07      	ldr	r3, [pc, #28]	@ (8009690 <SDMMC_Init+0x50>)
 8009674:	4013      	ands	r3, r2
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	431a      	orrs	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	b004      	add	sp, #16
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	ffc02c00 	.word	0xffc02c00

08009694 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b083      	sub	sp, #12
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f043 0203 	orr.w	r2, r3, #3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0303 	and.w	r3, r3, #3
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800970a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009710:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009716:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	4b06      	ldr	r3, [pc, #24]	@ (800973c <SDMMC_SendCommand+0x50>)
 8009724:	4013      	ands	r3, r2
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	fffee0c0 	.word	0xfffee0c0

08009740 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	b2db      	uxtb	r3, r3
}
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800975a:	b480      	push	{r7}
 800975c:	b085      	sub	sp, #20
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3314      	adds	r3, #20
 8009768:	461a      	mov	r2, r3
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	4413      	add	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3714      	adds	r7, #20
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80097a6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80097ac:	431a      	orrs	r2, r3
                       Data->DPSM);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80097b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	431a      	orrs	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0

}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80097e6:	2310      	movs	r3, #16
 80097e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80097ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097f0:	2300      	movs	r3, #0
 80097f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097fa:	f107 0308 	add.w	r3, r7, #8
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff ff73 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800980a:	2110      	movs	r1, #16
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f995 	bl	8009b3c <SDMMC_GetCmdResp1>
 8009812:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009814:	69fb      	ldr	r3, [r7, #28]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3720      	adds	r7, #32
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b088      	sub	sp, #32
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800982c:	2307      	movs	r3, #7
 800982e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009834:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009836:	2300      	movs	r3, #0
 8009838:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800983a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800983e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009840:	f107 0308 	add.w	r3, r7, #8
 8009844:	4619      	mov	r1, r3
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7ff ff50 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800984c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009850:	2107      	movs	r1, #7
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f972 	bl	8009b3c <SDMMC_GetCmdResp1>
 8009858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800985a:	69fb      	ldr	r3, [r7, #28]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3720      	adds	r7, #32
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009870:	2300      	movs	r3, #0
 8009872:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009874:	2300      	movs	r3, #0
 8009876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800987c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009880:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009882:	f107 0308 	add.w	r3, r7, #8
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff ff2f 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fb96 	bl	8009fc0 <SDMMC_GetCmdError>
 8009894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009896:	69fb      	ldr	r3, [r7, #28]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3720      	adds	r7, #32
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80098a8:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80098ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80098ae:	2308      	movs	r3, #8
 80098b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098c2:	f107 0308 	add.w	r3, r7, #8
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff ff0f 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fb28 	bl	8009f24 <SDMMC_GetCmdResp7>
 80098d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098d6:	69fb      	ldr	r3, [r7, #28]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3720      	adds	r7, #32
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b088      	sub	sp, #32
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80098ee:	2337      	movs	r3, #55	@ 0x37
 80098f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098f8:	2300      	movs	r3, #0
 80098fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009900:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009902:	f107 0308 	add.w	r3, r7, #8
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff feef 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800990e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009912:	2137      	movs	r1, #55	@ 0x37
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f911 	bl	8009b3c <SDMMC_GetCmdResp1>
 800991a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800991c:	69fb      	ldr	r3, [r7, #28]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3720      	adds	r7, #32
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b088      	sub	sp, #32
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009934:	2329      	movs	r3, #41	@ 0x29
 8009936:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800993c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009946:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009948:	f107 0308 	add.w	r3, r7, #8
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7ff fecc 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fa2d 	bl	8009db4 <SDMMC_GetCmdResp3>
 800995a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800995c:	69fb      	ldr	r3, [r7, #28]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b088      	sub	sp, #32
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009974:	2306      	movs	r3, #6
 8009976:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009978:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800997c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800997e:	2300      	movs	r3, #0
 8009980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009982:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009986:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009988:	f107 0308 	add.w	r3, r7, #8
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff feac 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009998:	2106      	movs	r1, #6
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f8ce 	bl	8009b3c <SDMMC_GetCmdResp1>
 80099a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099a2:	69fb      	ldr	r3, [r7, #28]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3720      	adds	r7, #32
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80099b4:	2300      	movs	r3, #0
 80099b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80099b8:	2333      	movs	r3, #51	@ 0x33
 80099ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80099c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099c2:	2300      	movs	r3, #0
 80099c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80099ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099cc:	f107 0308 	add.w	r3, r7, #8
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7ff fe8a 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80099d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099dc:	2133      	movs	r1, #51	@ 0x33
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f8ac 	bl	8009b3c <SDMMC_GetCmdResp1>
 80099e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099e6:	69fb      	ldr	r3, [r7, #28]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3720      	adds	r7, #32
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80099fc:	2302      	movs	r3, #2
 80099fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009a00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009a04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a06:	2300      	movs	r3, #0
 8009a08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a10:	f107 0308 	add.w	r3, r7, #8
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff fe68 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f97f 	bl	8009d20 <SDMMC_GetCmdResp2>
 8009a22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a24:	69fb      	ldr	r3, [r7, #28]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3720      	adds	r7, #32
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b088      	sub	sp, #32
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009a3c:	2309      	movs	r3, #9
 8009a3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009a40:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009a44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a46:	2300      	movs	r3, #0
 8009a48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a50:	f107 0308 	add.w	r3, r7, #8
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7ff fe48 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f95f 	bl	8009d20 <SDMMC_GetCmdResp2>
 8009a62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a64:	69fb      	ldr	r3, [r7, #28]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3720      	adds	r7, #32
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b088      	sub	sp, #32
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a90:	f107 0308 	add.w	r3, r7, #8
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7ff fe28 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	2103      	movs	r1, #3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f9c7 	bl	8009e34 <SDMMC_GetCmdResp6>
 8009aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3720      	adds	r7, #32
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b088      	sub	sp, #32
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009ac0:	230d      	movs	r3, #13
 8009ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ac4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aca:	2300      	movs	r3, #0
 8009acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ad4:	f107 0308 	add.w	r3, r7, #8
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff fe06 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ae4:	210d      	movs	r1, #13
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f828 	bl	8009b3c <SDMMC_GetCmdResp1>
 8009aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aee:	69fb      	ldr	r3, [r7, #28]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3720      	adds	r7, #32
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009b04:	230d      	movs	r3, #13
 8009b06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b18:	f107 0308 	add.w	r3, r7, #8
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7ff fde4 	bl	80096ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009b24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b28:	210d      	movs	r1, #13
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f806 	bl	8009b3c <SDMMC_GetCmdResp1>
 8009b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b32:	69fb      	ldr	r3, [r7, #28]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3720      	adds	r7, #32
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b088      	sub	sp, #32
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	460b      	mov	r3, r1
 8009b46:	607a      	str	r2, [r7, #4]
 8009b48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b4a:	4b70      	ldr	r3, [pc, #448]	@ (8009d0c <SDMMC_GetCmdResp1+0x1d0>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a70      	ldr	r2, [pc, #448]	@ (8009d10 <SDMMC_GetCmdResp1+0x1d4>)
 8009b50:	fba2 2303 	umull	r2, r3, r2, r3
 8009b54:	0a5a      	lsrs	r2, r3, #9
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	fb02 f303 	mul.w	r3, r2, r3
 8009b5c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	1e5a      	subs	r2, r3, #1
 8009b62:	61fa      	str	r2, [r7, #28]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d102      	bne.n	8009b6e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b6c:	e0c9      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b72:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009b74:	69ba      	ldr	r2, [r7, #24]
 8009b76:	4b67      	ldr	r3, [pc, #412]	@ (8009d14 <SDMMC_GetCmdResp1+0x1d8>)
 8009b78:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d0ef      	beq.n	8009b5e <SDMMC_GetCmdResp1+0x22>
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1ea      	bne.n	8009b5e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d004      	beq.n	8009b9e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2204      	movs	r2, #4
 8009b98:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b9a:	2304      	movs	r3, #4
 8009b9c:	e0b1      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d004      	beq.n	8009bb4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2201      	movs	r2, #1
 8009bae:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e0a6      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4a58      	ldr	r2, [pc, #352]	@ (8009d18 <SDMMC_GetCmdResp1+0x1dc>)
 8009bb8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7ff fdc0 	bl	8009740 <SDMMC_GetCommandResponse>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	7afb      	ldrb	r3, [r7, #11]
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d001      	beq.n	8009bce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e099      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009bce:	2100      	movs	r1, #0
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f7ff fdc2 	bl	800975a <SDMMC_GetResponse>
 8009bd6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	4b50      	ldr	r3, [pc, #320]	@ (8009d1c <SDMMC_GetCmdResp1+0x1e0>)
 8009bdc:	4013      	ands	r3, r2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009be2:	2300      	movs	r3, #0
 8009be4:	e08d      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	da02      	bge.n	8009bf2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009bec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009bf0:	e087      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009bfc:	2340      	movs	r3, #64	@ 0x40
 8009bfe:	e080      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009c0a:	2380      	movs	r3, #128	@ 0x80
 8009c0c:	e079      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d002      	beq.n	8009c1e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c1c:	e071      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c2c:	e069      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c3c:	e061      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c4c:	e059      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c5c:	e051      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d002      	beq.n	8009c6e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c6c:	e049      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009c7c:	e041      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009c88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c8c:	e039      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009c9c:	e031      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009ca8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009cac:	e029      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009cb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009cbc:	e021      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009cc8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009ccc:	e019      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009cd8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009cdc:	e011      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009ce8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009cec:	e009      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f003 0308 	and.w	r3, r3, #8
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009cf8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009cfc:	e001      	b.n	8009d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009cfe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3720      	adds	r7, #32
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	24000078 	.word	0x24000078
 8009d10:	10624dd3 	.word	0x10624dd3
 8009d14:	00200045 	.word	0x00200045
 8009d18:	002000c5 	.word	0x002000c5
 8009d1c:	fdffe008 	.word	0xfdffe008

08009d20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009d28:	4b1f      	ldr	r3, [pc, #124]	@ (8009da8 <SDMMC_GetCmdResp2+0x88>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8009dac <SDMMC_GetCmdResp2+0x8c>)
 8009d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d32:	0a5b      	lsrs	r3, r3, #9
 8009d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d38:	fb02 f303 	mul.w	r3, r2, r3
 8009d3c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	1e5a      	subs	r2, r3, #1
 8009d42:	60fa      	str	r2, [r7, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d4c:	e026      	b.n	8009d9c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d52:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0ef      	beq.n	8009d3e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1ea      	bne.n	8009d3e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d004      	beq.n	8009d7e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2204      	movs	r2, #4
 8009d78:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d7a:	2304      	movs	r3, #4
 8009d7c:	e00e      	b.n	8009d9c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e003      	b.n	8009d9c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a06      	ldr	r2, [pc, #24]	@ (8009db0 <SDMMC_GetCmdResp2+0x90>)
 8009d98:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	24000078 	.word	0x24000078
 8009dac:	10624dd3 	.word	0x10624dd3
 8009db0:	002000c5 	.word	0x002000c5

08009db4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8009e28 <SDMMC_GetCmdResp3+0x74>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8009e2c <SDMMC_GetCmdResp3+0x78>)
 8009dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc6:	0a5b      	lsrs	r3, r3, #9
 8009dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dcc:	fb02 f303 	mul.w	r3, r2, r3
 8009dd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	1e5a      	subs	r2, r3, #1
 8009dd6:	60fa      	str	r2, [r7, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d102      	bne.n	8009de2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ddc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009de0:	e01b      	b.n	8009e1a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009de6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0ef      	beq.n	8009dd2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1ea      	bne.n	8009dd2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2204      	movs	r2, #4
 8009e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e0e:	2304      	movs	r3, #4
 8009e10:	e003      	b.n	8009e1a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a06      	ldr	r2, [pc, #24]	@ (8009e30 <SDMMC_GetCmdResp3+0x7c>)
 8009e16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	24000078 	.word	0x24000078
 8009e2c:	10624dd3 	.word	0x10624dd3
 8009e30:	002000c5 	.word	0x002000c5

08009e34 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e42:	4b35      	ldr	r3, [pc, #212]	@ (8009f18 <SDMMC_GetCmdResp6+0xe4>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a35      	ldr	r2, [pc, #212]	@ (8009f1c <SDMMC_GetCmdResp6+0xe8>)
 8009e48:	fba2 2303 	umull	r2, r3, r2, r3
 8009e4c:	0a5b      	lsrs	r3, r3, #9
 8009e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e52:	fb02 f303 	mul.w	r3, r2, r3
 8009e56:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	1e5a      	subs	r2, r3, #1
 8009e5c:	61fa      	str	r2, [r7, #28]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d102      	bne.n	8009e68 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e62:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e66:	e052      	b.n	8009f0e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e6c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d0ef      	beq.n	8009e58 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1ea      	bne.n	8009e58 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e86:	f003 0304 	and.w	r3, r3, #4
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d004      	beq.n	8009e98 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2204      	movs	r2, #4
 8009e92:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e94:	2304      	movs	r3, #4
 8009e96:	e03a      	b.n	8009f0e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d004      	beq.n	8009eae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e02f      	b.n	8009f0e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f7ff fc46 	bl	8009740 <SDMMC_GetCommandResponse>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	7afb      	ldrb	r3, [r7, #11]
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d001      	beq.n	8009ec2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e025      	b.n	8009f0e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	4a16      	ldr	r2, [pc, #88]	@ (8009f20 <SDMMC_GetCmdResp6+0xec>)
 8009ec6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009ec8:	2100      	movs	r1, #0
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7ff fc45 	bl	800975a <SDMMC_GetResponse>
 8009ed0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d106      	bne.n	8009eea <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	0c1b      	lsrs	r3, r3, #16
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e011      	b.n	8009f0e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ef4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ef8:	e009      	b.n	8009f0e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f08:	e001      	b.n	8009f0e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3720      	adds	r7, #32
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	24000078 	.word	0x24000078
 8009f1c:	10624dd3 	.word	0x10624dd3
 8009f20:	002000c5 	.word	0x002000c5

08009f24 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f2c:	4b22      	ldr	r3, [pc, #136]	@ (8009fb8 <SDMMC_GetCmdResp7+0x94>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a22      	ldr	r2, [pc, #136]	@ (8009fbc <SDMMC_GetCmdResp7+0x98>)
 8009f32:	fba2 2303 	umull	r2, r3, r2, r3
 8009f36:	0a5b      	lsrs	r3, r3, #9
 8009f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f3c:	fb02 f303 	mul.w	r3, r2, r3
 8009f40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	1e5a      	subs	r2, r3, #1
 8009f46:	60fa      	str	r2, [r7, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d102      	bne.n	8009f52 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f50:	e02c      	b.n	8009fac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f56:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0ef      	beq.n	8009f42 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1ea      	bne.n	8009f42 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d004      	beq.n	8009f82 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2204      	movs	r2, #4
 8009f7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f7e:	2304      	movs	r3, #4
 8009f80:	e014      	b.n	8009fac <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d004      	beq.n	8009f98 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e009      	b.n	8009fac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2240      	movs	r2, #64	@ 0x40
 8009fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009faa:	2300      	movs	r3, #0

}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	24000078 	.word	0x24000078
 8009fbc:	10624dd3 	.word	0x10624dd3

08009fc0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009fc8:	4b11      	ldr	r3, [pc, #68]	@ (800a010 <SDMMC_GetCmdError+0x50>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a11      	ldr	r2, [pc, #68]	@ (800a014 <SDMMC_GetCmdError+0x54>)
 8009fce:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd2:	0a5b      	lsrs	r3, r3, #9
 8009fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fd8:	fb02 f303 	mul.w	r3, r2, r3
 8009fdc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	1e5a      	subs	r2, r3, #1
 8009fe2:	60fa      	str	r2, [r7, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d102      	bne.n	8009fee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fe8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fec:	e009      	b.n	800a002 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d0f1      	beq.n	8009fde <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a06      	ldr	r2, [pc, #24]	@ (800a018 <SDMMC_GetCmdError+0x58>)
 8009ffe:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	24000078 	.word	0x24000078
 800a014:	10624dd3 	.word	0x10624dd3
 800a018:	002000c5 	.word	0x002000c5

0800a01c <_spi_write>:
#define TCAN_REG_WAKE_CONFIG  0x03
#define TCAN_REG_WAKE_ID      0x04  // Start of 4-byte ID filter
#define TCAN_REG_WAKE_PAYLOAD 0x08  // Start of 8-byte payload filter

// Helper: SPI Read/Write
static void _spi_write(TCAN1146 *dev, uint8_t reg, uint8_t *data, uint8_t len) {
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	607a      	str	r2, [r7, #4]
 800a026:	461a      	mov	r2, r3
 800a028:	460b      	mov	r3, r1
 800a02a:	72fb      	strb	r3, [r7, #11]
 800a02c:	4613      	mov	r3, r2
 800a02e:	72bb      	strb	r3, [r7, #10]
    HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6858      	ldr	r0, [r3, #4]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	891b      	ldrh	r3, [r3, #8]
 800a038:	2200      	movs	r2, #0
 800a03a:	4619      	mov	r1, r3
 800a03c:	f7f8 fbf6 	bl	800282c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(dev->hspi, &reg, 1, HAL_MAX_DELAY);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6818      	ldr	r0, [r3, #0]
 800a044:	f107 010b 	add.w	r1, r7, #11
 800a048:	f04f 33ff 	mov.w	r3, #4294967295
 800a04c:	2201      	movs	r2, #1
 800a04e:	f7fd fd6f 	bl	8007b30 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(dev->hspi, data, len, HAL_MAX_DELAY);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	7abb      	ldrb	r3, [r7, #10]
 800a058:	b29a      	uxth	r2, r3
 800a05a:	f04f 33ff 	mov.w	r3, #4294967295
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	f7fd fd66 	bl	8007b30 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6858      	ldr	r0, [r3, #4]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	891b      	ldrh	r3, [r3, #8]
 800a06c:	2201      	movs	r2, #1
 800a06e:	4619      	mov	r1, r3
 800a070:	f7f8 fbdc 	bl	800282c <HAL_GPIO_WritePin>
}
 800a074:	bf00      	nop
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <_spi_read>:

static void _spi_read(TCAN1146 *dev, uint8_t reg, uint8_t *data, uint8_t len) {
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	607a      	str	r2, [r7, #4]
 800a086:	461a      	mov	r2, r3
 800a088:	460b      	mov	r3, r1
 800a08a:	72fb      	strb	r3, [r7, #11]
 800a08c:	4613      	mov	r3, r2
 800a08e:	72bb      	strb	r3, [r7, #10]
    reg |= 0x80;  // Set read bit
 800a090:	7afb      	ldrb	r3, [r7, #11]
 800a092:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a096:	b2db      	uxtb	r3, r3
 800a098:	72fb      	strb	r3, [r7, #11]
    HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6858      	ldr	r0, [r3, #4]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	891b      	ldrh	r3, [r3, #8]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	f7f8 fbc1 	bl	800282c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(dev->hspi, &reg, 1, HAL_MAX_DELAY);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	f107 010b 	add.w	r1, r7, #11
 800a0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f7fd fd3a 	bl	8007b30 <HAL_SPI_Transmit>
    HAL_SPI_Receive(dev->hspi, data, len, HAL_MAX_DELAY);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6818      	ldr	r0, [r3, #0]
 800a0c0:	7abb      	ldrb	r3, [r7, #10]
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c8:	6879      	ldr	r1, [r7, #4]
 800a0ca:	f7fd ff1f 	bl	8007f0c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6858      	ldr	r0, [r3, #4]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	891b      	ldrh	r3, [r3, #8]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	4619      	mov	r1, r3
 800a0da:	f7f8 fba7 	bl	800282c <HAL_GPIO_WritePin>
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <TCAN1146_Init>:

// Initialize TCAN1146 + Wake-on-CAN
void TCAN1146_Init(TCAN1146 *dev, uint32_t wake_id, uint8_t *wake_payload, uint8_t payload_len) {
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b086      	sub	sp, #24
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	60f8      	str	r0, [r7, #12]
 800a0ee:	60b9      	str	r1, [r7, #8]
 800a0f0:	607a      	str	r2, [r7, #4]
 800a0f2:	70fb      	strb	r3, [r7, #3]
    // Set device to Standby to configure registers
    TCAN1146_SetMode(dev, TCAN_MODE_STANDBY);
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 f83a 	bl	800a170 <TCAN1146_SetMode>

    // Configure Wake-on-CAN:
    // 1. Write 29-bit ID (extended) to registers 0x04-0x07
    uint8_t id_bytes[4] = {
        (wake_id >> 21) & 0xFF,  // Bits 28-21
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	0d5b      	lsrs	r3, r3, #21
    uint8_t id_bytes[4] = {
 800a100:	b2db      	uxtb	r3, r3
 800a102:	753b      	strb	r3, [r7, #20]
        (wake_id >> 13) & 0xFF,  // Bits 20-13
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	0b5b      	lsrs	r3, r3, #13
    uint8_t id_bytes[4] = {
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	757b      	strb	r3, [r7, #21]
        (wake_id >> 5)  & 0xFF,  // Bits 12-5
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	095b      	lsrs	r3, r3, #5
    uint8_t id_bytes[4] = {
 800a110:	b2db      	uxtb	r3, r3
 800a112:	75bb      	strb	r3, [r7, #22]
        (wake_id << 3)  & 0xF8   // Bits 4-0 + 0b111 (extended ID)
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	b2db      	uxtb	r3, r3
 800a118:	00db      	lsls	r3, r3, #3
 800a11a:	b2db      	uxtb	r3, r3
    uint8_t id_bytes[4] = {
 800a11c:	75fb      	strb	r3, [r7, #23]
    };
    _spi_write(dev, TCAN_REG_WAKE_ID, id_bytes, 4);
 800a11e:	f107 0214 	add.w	r2, r7, #20
 800a122:	2304      	movs	r3, #4
 800a124:	2104      	movs	r1, #4
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f7ff ff78 	bl	800a01c <_spi_write>

    // 2. Write payload filter (up to 8 bytes)
    if (wake_payload && payload_len > 0) {
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00d      	beq.n	800a14e <TCAN1146_Init+0x68>
 800a132:	78fb      	ldrb	r3, [r7, #3]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00a      	beq.n	800a14e <TCAN1146_Init+0x68>
        payload_len = (payload_len > 8) ? 8 : payload_len;
 800a138:	78fb      	ldrb	r3, [r7, #3]
 800a13a:	2b08      	cmp	r3, #8
 800a13c:	bf28      	it	cs
 800a13e:	2308      	movcs	r3, #8
 800a140:	70fb      	strb	r3, [r7, #3]
        _spi_write(dev, TCAN_REG_WAKE_PAYLOAD, wake_payload, payload_len);
 800a142:	78fb      	ldrb	r3, [r7, #3]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	2108      	movs	r1, #8
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f7ff ff67 	bl	800a01c <_spi_write>
    }

    // 3. Enable Wake-on-CAN (bit 4 in WAKE_CONFIG)
    uint8_t wake_config = 0x10;  // Wake on matching ID + payload
 800a14e:	2310      	movs	r3, #16
 800a150:	74fb      	strb	r3, [r7, #19]
    _spi_write(dev, TCAN_REG_WAKE_CONFIG, &wake_config, 1);
 800a152:	f107 0213 	add.w	r2, r7, #19
 800a156:	2301      	movs	r3, #1
 800a158:	2103      	movs	r1, #3
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f7ff ff5e 	bl	800a01c <_spi_write>

    // Set to Normal mode (ready for CAN)
    TCAN1146_SetMode(dev, TCAN_MODE_NORMAL);
 800a160:	2100      	movs	r1, #0
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 f804 	bl	800a170 <TCAN1146_SetMode>
}
 800a168:	bf00      	nop
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <TCAN1146_SetMode>:

// Change Mode (Normal, Standby, Listen-Only, Sleep)
void TCAN1146_SetMode(TCAN1146 *dev, TCAN_Mode mode) {
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl_reg;
    _spi_read(dev, TCAN_REG_DEVICE_CTRL, &ctrl_reg, 1);
 800a17c:	f107 020f 	add.w	r2, r7, #15
 800a180:	2301      	movs	r3, #1
 800a182:	2100      	movs	r1, #0
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff ff79 	bl	800a07c <_spi_read>

    // Clear mode bits (bits 1-0)
    ctrl_reg &= ~0x03;
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	f023 0303 	bic.w	r3, r3, #3
 800a190:	b2db      	uxtb	r3, r3
 800a192:	73fb      	strb	r3, [r7, #15]

    switch (mode) {
 800a194:	78fb      	ldrb	r3, [r7, #3]
 800a196:	2b03      	cmp	r3, #3
 800a198:	d81f      	bhi.n	800a1da <TCAN1146_SetMode+0x6a>
 800a19a:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a0 <TCAN1146_SetMode+0x30>)
 800a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a0:	0800a1b1 	.word	0x0800a1b1
 800a1a4:	0800a1b7 	.word	0x0800a1b7
 800a1a8:	0800a1c3 	.word	0x0800a1c3
 800a1ac:	0800a1cf 	.word	0x0800a1cf
        case TCAN_MODE_NORMAL:
            ctrl_reg |= 0x00;  // Normal mode
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	73fb      	strb	r3, [r7, #15]
            break;
 800a1b4:	e011      	b.n	800a1da <TCAN1146_SetMode+0x6a>
        case TCAN_MODE_STANDBY:
            ctrl_reg |= 0x01;  // Standby
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	f043 0301 	orr.w	r3, r3, #1
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	73fb      	strb	r3, [r7, #15]
            break;
 800a1c0:	e00b      	b.n	800a1da <TCAN1146_SetMode+0x6a>
        case TCAN_MODE_LISTEN_ONLY:
            ctrl_reg |= 0x02;  // Listen-Only
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	f043 0302 	orr.w	r3, r3, #2
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	73fb      	strb	r3, [r7, #15]
            break;
 800a1cc:	e005      	b.n	800a1da <TCAN1146_SetMode+0x6a>
        case TCAN_MODE_SLEEP:
            ctrl_reg |= 0x03;  // Sleep
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
 800a1d0:	f043 0303 	orr.w	r3, r3, #3
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	73fb      	strb	r3, [r7, #15]
            break;
 800a1d8:	bf00      	nop
    }

    _spi_write(dev, TCAN_REG_DEVICE_CTRL, &ctrl_reg, 1);
 800a1da:	f107 020f 	add.w	r2, r7, #15
 800a1de:	2301      	movs	r3, #1
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff ff1a 	bl	800a01c <_spi_write>
}
 800a1e8:	bf00      	nop
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <memset>:
 800a1f0:	4402      	add	r2, r0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d100      	bne.n	800a1fa <memset+0xa>
 800a1f8:	4770      	bx	lr
 800a1fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a1fe:	e7f9      	b.n	800a1f4 <memset+0x4>

0800a200 <__libc_init_array>:
 800a200:	b570      	push	{r4, r5, r6, lr}
 800a202:	4d0d      	ldr	r5, [pc, #52]	@ (800a238 <__libc_init_array+0x38>)
 800a204:	4c0d      	ldr	r4, [pc, #52]	@ (800a23c <__libc_init_array+0x3c>)
 800a206:	1b64      	subs	r4, r4, r5
 800a208:	10a4      	asrs	r4, r4, #2
 800a20a:	2600      	movs	r6, #0
 800a20c:	42a6      	cmp	r6, r4
 800a20e:	d109      	bne.n	800a224 <__libc_init_array+0x24>
 800a210:	4d0b      	ldr	r5, [pc, #44]	@ (800a240 <__libc_init_array+0x40>)
 800a212:	4c0c      	ldr	r4, [pc, #48]	@ (800a244 <__libc_init_array+0x44>)
 800a214:	f000 f826 	bl	800a264 <_init>
 800a218:	1b64      	subs	r4, r4, r5
 800a21a:	10a4      	asrs	r4, r4, #2
 800a21c:	2600      	movs	r6, #0
 800a21e:	42a6      	cmp	r6, r4
 800a220:	d105      	bne.n	800a22e <__libc_init_array+0x2e>
 800a222:	bd70      	pop	{r4, r5, r6, pc}
 800a224:	f855 3b04 	ldr.w	r3, [r5], #4
 800a228:	4798      	blx	r3
 800a22a:	3601      	adds	r6, #1
 800a22c:	e7ee      	b.n	800a20c <__libc_init_array+0xc>
 800a22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a232:	4798      	blx	r3
 800a234:	3601      	adds	r6, #1
 800a236:	e7f2      	b.n	800a21e <__libc_init_array+0x1e>
 800a238:	0800a2d8 	.word	0x0800a2d8
 800a23c:	0800a2d8 	.word	0x0800a2d8
 800a240:	0800a2d8 	.word	0x0800a2d8
 800a244:	0800a2dc 	.word	0x0800a2dc

0800a248 <memcpy>:
 800a248:	440a      	add	r2, r1
 800a24a:	4291      	cmp	r1, r2
 800a24c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a250:	d100      	bne.n	800a254 <memcpy+0xc>
 800a252:	4770      	bx	lr
 800a254:	b510      	push	{r4, lr}
 800a256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a25a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a25e:	4291      	cmp	r1, r2
 800a260:	d1f9      	bne.n	800a256 <memcpy+0xe>
 800a262:	bd10      	pop	{r4, pc}

0800a264 <_init>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	bf00      	nop
 800a268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26a:	bc08      	pop	{r3}
 800a26c:	469e      	mov	lr, r3
 800a26e:	4770      	bx	lr

0800a270 <_fini>:
 800a270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a272:	bf00      	nop
 800a274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a276:	bc08      	pop	{r3}
 800a278:	469e      	mov	lr, r3
 800a27a:	4770      	bx	lr
