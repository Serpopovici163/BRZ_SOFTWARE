
CAN_LINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046ac  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004978  08004978  00005978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080049d4  080049d4  000059d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080049d8  080049d8  000059d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  080049dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003a4  24000010  080049ec  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240003b4  080049ec  000063b4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e39b  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b8c  00000000  00000000  000143d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000c58  00000000  00000000  00015f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000961  00000000  00000000  00016bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032a64  00000000  00000000  00017521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e278  00000000  00000000  00049f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00149f74  00000000  00000000  000581fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a2171  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003440  00000000  00000000  001a21b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000008b  00000000  00000000  001a55f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08004960 	.word	0x08004960

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08004960 	.word	0x08004960

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000310:	f000 fb88 	bl	8000a24 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fef4 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f82a 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 fad6 	bl	80008cc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000320:	f000 f896 	bl	8000450 <MX_FDCAN1_Init>
  MX_FDCAN3_Init();
 8000324:	f000 f916 	bl	8000554 <MX_FDCAN3_Init>
  MX_SPI1_Init();
 8000328:	f000 f978 	bl	800061c <MX_SPI1_Init>
  MX_SPI2_Init();
 800032c:	f000 f9cc 	bl	80006c8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000330:	f000 fa20 	bl	8000774 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000334:	f000 fa74 	bl	8000820 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  //start FDCAN
  HAL_FDCAN_Start(&hfdcan1);
 8000338:	480b      	ldr	r0, [pc, #44]	@ (8000368 <main+0x5c>)
 800033a:	f001 fb47 	bl	80019cc <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_BUFFER_NEW_MESSAGE, 0) != HAL_OK) {
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8000344:	4808      	ldr	r0, [pc, #32]	@ (8000368 <main+0x5c>)
 8000346:	f001 fb6d 	bl	8001a24 <HAL_FDCAN_ActivateNotification>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <main+0x48>
	  Error_Handler();
 8000350:	f000 fb94 	bl	8000a7c <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin (R_LED_GPIO_Port, R_LED_Pin);
 8000354:	2102      	movs	r1, #2
 8000356:	4805      	ldr	r0, [pc, #20]	@ (800036c <main+0x60>)
 8000358:	f001 ff25 	bl	80021a6 <HAL_GPIO_TogglePin>
	  HAL_Delay (500);   /* Insert delay 100 ms */
 800035c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000360:	f000 ff60 	bl	8001224 <HAL_Delay>
	  HAL_GPIO_TogglePin (R_LED_GPIO_Port, R_LED_Pin);
 8000364:	bf00      	nop
 8000366:	e7f5      	b.n	8000354 <main+0x48>
 8000368:	2400002c 	.word	0x2400002c
 800036c:	58020800 	.word	0x58020800

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b09c      	sub	sp, #112	@ 0x70
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800037a:	224c      	movs	r2, #76	@ 0x4c
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f004 fab3 	bl	80048ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2220      	movs	r2, #32
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f004 faad 	bl	80048ea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000390:	2002      	movs	r0, #2
 8000392:	f001 ff23 	bl	80021dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000396:	2300      	movs	r3, #0
 8000398:	603b      	str	r3, [r7, #0]
 800039a:	4b2c      	ldr	r3, [pc, #176]	@ (800044c <SystemClock_Config+0xdc>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003a2:	4a2a      	ldr	r2, [pc, #168]	@ (800044c <SystemClock_Config+0xdc>)
 80003a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b28      	ldr	r3, [pc, #160]	@ (800044c <SystemClock_Config+0xdc>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003b6:	bf00      	nop
 80003b8:	4b24      	ldr	r3, [pc, #144]	@ (800044c <SystemClock_Config+0xdc>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003c4:	d1f8      	bne.n	80003b8 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c6:	2302      	movs	r3, #2
 80003c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003ce:	2340      	movs	r3, #64	@ 0x40
 80003d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d6:	2300      	movs	r3, #0
 80003d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003da:	2304      	movs	r3, #4
 80003dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80003de:	230c      	movs	r3, #12
 80003e0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003e2:	2302      	movs	r3, #2
 80003e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80003e6:	2304      	movs	r3, #4
 80003e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003ea:	2302      	movs	r3, #2
 80003ec:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003ee:	230c      	movs	r3, #12
 80003f0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 ff26 	bl	8002250 <HAL_RCC_OscConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800040a:	f000 fb37 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040e:	233f      	movs	r3, #63	@ 0x3f
 8000410:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000412:	2300      	movs	r3, #0
 8000414:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2101      	movs	r1, #1
 8000432:	4618      	mov	r0, r3
 8000434:	f002 fae6 	bl	8002a04 <HAL_RCC_ClockConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800043e:	f000 fb1d 	bl	8000a7c <Error_Handler>
  }
}
 8000442:	bf00      	nop
 8000444:	3770      	adds	r7, #112	@ 0x70
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	58024800 	.word	0x58024800

08000450 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000454:	4b3c      	ldr	r3, [pc, #240]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 8000456:	4a3d      	ldr	r2, [pc, #244]	@ (800054c <MX_FDCAN1_Init+0xfc>)
 8000458:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800045a:	4b3b      	ldr	r3, [pc, #236]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 800045c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000460:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000462:	4b39      	ldr	r3, [pc, #228]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 8000464:	2200      	movs	r2, #0
 8000466:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000468:	4b37      	ldr	r3, [pc, #220]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 800046a:	2201      	movs	r2, #1
 800046c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800046e:	4b36      	ldr	r3, [pc, #216]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 8000470:	2200      	movs	r2, #0
 8000472:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE; //todo enable down the line and flag diag computer
 8000474:	4b34      	ldr	r3, [pc, #208]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 8000476:	2200      	movs	r2, #0
 8000478:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800047a:	4b33      	ldr	r3, [pc, #204]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 800047c:	2210      	movs	r2, #16
 800047e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000480:	4b31      	ldr	r3, [pc, #196]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 8000482:	2201      	movs	r2, #1
 8000484:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000486:	4b30      	ldr	r3, [pc, #192]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 8000488:	2202      	movs	r2, #2
 800048a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800048c:	4b2e      	ldr	r3, [pc, #184]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 800048e:	2202      	movs	r2, #2
 8000490:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000492:	4b2d      	ldr	r3, [pc, #180]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 8000494:	2201      	movs	r2, #1
 8000496:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000498:	4b2b      	ldr	r3, [pc, #172]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 800049a:	2201      	movs	r2, #1
 800049c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800049e:	4b2a      	ldr	r3, [pc, #168]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80004a4:	4b28      	ldr	r3, [pc, #160]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80004aa:	4b27      	ldr	r3, [pc, #156]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80004b0:	4b25      	ldr	r3, [pc, #148]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80004b6:	4b24      	ldr	r3, [pc, #144]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80004bc:	4b22      	ldr	r3, [pc, #136]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004be:	2200      	movs	r2, #0
 80004c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80004c2:	4b21      	ldr	r3, [pc, #132]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004c4:	2204      	movs	r2, #4
 80004c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80004c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80004ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004d0:	2204      	movs	r2, #4
 80004d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80004d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80004da:	4b1b      	ldr	r3, [pc, #108]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004dc:	2204      	movs	r2, #4
 80004de:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80004e0:	4b19      	ldr	r3, [pc, #100]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80004e6:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80004ec:	4b16      	ldr	r3, [pc, #88]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80004f8:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80004fe:	4812      	ldr	r0, [pc, #72]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 8000500:	f001 f810 	bl	8001524 <HAL_FDCAN_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800050a:	f000 fab7 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* Configure standard ID reception filter to Rx buffer 0 */ //copied from https://github.com/STMicroelectronics/STM32CubeH7/blob/master/Projects/STM32H735G-DK/Examples/FDCAN/FDCAN_Loopback/Src/main.c
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800050e:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <MX_FDCAN1_Init+0x100>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8000514:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <MX_FDCAN1_Init+0x100>)
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <MX_FDCAN1_Init+0x100>)
 800051c:	2201      	movs	r2, #1
 800051e:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXBUFFER;
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <MX_FDCAN1_Init+0x100>)
 8000522:	2207      	movs	r2, #7
 8000524:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x209; //brake pedal pressure
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <MX_FDCAN1_Init+0x100>)
 8000528:	f240 2209 	movw	r2, #521	@ 0x209
 800052c:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x555; //steering angle
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <MX_FDCAN1_Init+0x100>)
 8000530:	f240 5255 	movw	r2, #1365	@ 0x555
 8000534:	615a      	str	r2, [r3, #20]
    sFilterConfig.RxBufferIndex = 0;
 8000536:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <MX_FDCAN1_Init+0x100>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
    HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 800053c:	4904      	ldr	r1, [pc, #16]	@ (8000550 <MX_FDCAN1_Init+0x100>)
 800053e:	4802      	ldr	r0, [pc, #8]	@ (8000548 <MX_FDCAN1_Init+0xf8>)
 8000540:	f001 f9ce 	bl	80018e0 <HAL_FDCAN_ConfigFilter>

  /* USER CODE END FDCAN1_Init 2 */

}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2400002c 	.word	0x2400002c
 800054c:	4000a000 	.word	0x4000a000
 8000550:	240000cc 	.word	0x240000cc

08000554 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000558:	4b2e      	ldr	r3, [pc, #184]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 800055a:	4a2f      	ldr	r2, [pc, #188]	@ (8000618 <MX_FDCAN3_Init+0xc4>)
 800055c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800055e:	4b2d      	ldr	r3, [pc, #180]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000564:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800056a:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 800056c:	2200      	movs	r2, #0
 800056e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000570:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 8000572:	2200      	movs	r2, #0
 8000574:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000576:	4b27      	ldr	r3, [pc, #156]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 8000578:	2200      	movs	r2, #0
 800057a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 800057c:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 800057e:	2210      	movs	r2, #16
 8000580:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000582:	4b24      	ldr	r3, [pc, #144]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 8000584:	2201      	movs	r2, #1
 8000586:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000588:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 800058a:	2202      	movs	r2, #2
 800058c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 800058e:	4b21      	ldr	r3, [pc, #132]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 8000590:	2202      	movs	r2, #2
 8000592:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000594:	4b1f      	ldr	r3, [pc, #124]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 8000596:	2201      	movs	r2, #1
 8000598:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800059a:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 800059c:	2201      	movs	r2, #1
 800059e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80005a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80005ac:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80005b8:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80005c4:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80005ca:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80005d0:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005d2:	2204      	movs	r2, #4
 80005d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005de:	2204      	movs	r2, #4
 80005e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005f4:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 80005fc:	2204      	movs	r2, #4
 80005fe:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	@ (8000614 <MX_FDCAN3_Init+0xc0>)
 8000602:	f000 ff8f 	bl	8001524 <HAL_FDCAN_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 800060c:	f000 fa36 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	240000ec 	.word	0x240000ec
 8000618:	4000d400 	.word	0x4000d400

0800061c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000622:	4a28      	ldr	r2, [pc, #160]	@ (80006c4 <MX_SPI1_Init+0xa8>)
 8000624:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000626:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000628:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800062c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800062e:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000636:	2203      	movs	r2, #3
 8000638:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000648:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800064c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000662:	2200      	movs	r2, #0
 8000664:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000668:	2200      	movs	r2, #0
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 800066e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000672:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000676:	2200      	movs	r2, #0
 8000678:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000682:	2200      	movs	r2, #0
 8000684:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 800068e:	2200      	movs	r2, #0
 8000690:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 8000694:	2200      	movs	r2, #0
 8000696:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 800069a:	2200      	movs	r2, #0
 800069c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_SPI1_Init+0xa4>)
 80006ac:	f003 ffde 	bl	800466c <HAL_SPI_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80006b6:	f000 f9e1 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2400018c 	.word	0x2400018c
 80006c4:	40013000 	.word	0x40013000

080006c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <MX_SPI2_Init+0xa4>)
 80006ce:	4a28      	ldr	r2, [pc, #160]	@ (8000770 <MX_SPI2_Init+0xa8>)
 80006d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006d2:	4b26      	ldr	r3, [pc, #152]	@ (800076c <MX_SPI2_Init+0xa4>)
 80006d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006da:	4b24      	ldr	r3, [pc, #144]	@ (800076c <MX_SPI2_Init+0xa4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <MX_SPI2_Init+0xa4>)
 80006e2:	2203      	movs	r2, #3
 80006e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <MX_SPI2_Init+0xa4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_SPI2_Init+0xa4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <MX_SPI2_Init+0xa4>)
 80006f4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80006f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_SPI2_Init+0xa4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_SPI2_Init+0xa4>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_SPI2_Init+0xa4>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070c:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_SPI2_Init+0xa4>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <MX_SPI2_Init+0xa4>)
 8000714:	2200      	movs	r2, #0
 8000716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_SPI2_Init+0xa4>)
 800071a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_SPI2_Init+0xa4>)
 8000722:	2200      	movs	r2, #0
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_SPI2_Init+0xa4>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_SPI2_Init+0xa4>)
 800072e:	2200      	movs	r2, #0
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_SPI2_Init+0xa4>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_SPI2_Init+0xa4>)
 800073a:	2200      	movs	r2, #0
 800073c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_SPI2_Init+0xa4>)
 8000740:	2200      	movs	r2, #0
 8000742:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_SPI2_Init+0xa4>)
 8000746:	2200      	movs	r2, #0
 8000748:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_SPI2_Init+0xa4>)
 800074c:	2200      	movs	r2, #0
 800074e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_SPI2_Init+0xa4>)
 8000752:	2200      	movs	r2, #0
 8000754:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_SPI2_Init+0xa4>)
 8000758:	f003 ff88 	bl	800466c <HAL_SPI_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000762:	f000 f98b 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	24000214 	.word	0x24000214
 8000770:	40003800 	.word	0x40003800

08000774 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000778:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <MX_SPI3_Init+0xa4>)
 800077a:	4a28      	ldr	r2, [pc, #160]	@ (800081c <MX_SPI3_Init+0xa8>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b26      	ldr	r3, [pc, #152]	@ (8000818 <MX_SPI3_Init+0xa4>)
 8000780:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000784:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <MX_SPI3_Init+0xa4>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800078c:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <MX_SPI3_Init+0xa4>)
 800078e:	2203      	movs	r2, #3
 8000790:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <MX_SPI3_Init+0xa4>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <MX_SPI3_Init+0xa4>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007a0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80007a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80007be:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ca:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_SPI3_Init+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_SPI3_Init+0xa4>)
 8000804:	f003 ff32 	bl	800466c <HAL_SPI_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800080e:	f000 f935 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2400029c 	.word	0x2400029c
 800081c:	40003c00 	.word	0x40003c00

08000820 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000824:	4b27      	ldr	r3, [pc, #156]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000826:	4a28      	ldr	r2, [pc, #160]	@ (80008c8 <MX_SPI4_Init+0xa8>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 800082c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000830:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000832:	4b24      	ldr	r3, [pc, #144]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000838:	4b22      	ldr	r3, [pc, #136]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 800083a:	2203      	movs	r2, #3
 800083c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800083e:	4b21      	ldr	r3, [pc, #132]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000844:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800084a:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 800084c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000850:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000858:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800085e:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000866:	2200      	movs	r2, #0
 8000868:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 800086c:	2200      	movs	r2, #0
 800086e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000870:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000872:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000876:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 800087a:	2200      	movs	r2, #0
 800087c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000886:	2200      	movs	r2, #0
 8000888:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 800088c:	2200      	movs	r2, #0
 800088e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000892:	2200      	movs	r2, #0
 8000894:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 8000898:	2200      	movs	r2, #0
 800089a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_SPI4_Init+0xa4>)
 80008b0:	f003 fedc 	bl	800466c <HAL_SPI_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80008ba:	f000 f8df 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	24000324 	.word	0x24000324
 80008c8:	40013400 	.word	0x40013400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	@ 0x30
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000a14 <MX_GPIO_Init+0x148>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e8:	4a4a      	ldr	r2, [pc, #296]	@ (8000a14 <MX_GPIO_Init+0x148>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f2:	4b48      	ldr	r3, [pc, #288]	@ (8000a14 <MX_GPIO_Init+0x148>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	f003 0310 	and.w	r3, r3, #16
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000900:	4b44      	ldr	r3, [pc, #272]	@ (8000a14 <MX_GPIO_Init+0x148>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000906:	4a43      	ldr	r2, [pc, #268]	@ (8000a14 <MX_GPIO_Init+0x148>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000910:	4b40      	ldr	r3, [pc, #256]	@ (8000a14 <MX_GPIO_Init+0x148>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a14 <MX_GPIO_Init+0x148>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	4a3b      	ldr	r2, [pc, #236]	@ (8000a14 <MX_GPIO_Init+0x148>)
 8000926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092e:	4b39      	ldr	r3, [pc, #228]	@ (8000a14 <MX_GPIO_Init+0x148>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b35      	ldr	r3, [pc, #212]	@ (8000a14 <MX_GPIO_Init+0x148>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000942:	4a34      	ldr	r2, [pc, #208]	@ (8000a14 <MX_GPIO_Init+0x148>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094c:	4b31      	ldr	r3, [pc, #196]	@ (8000a14 <MX_GPIO_Init+0x148>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <MX_GPIO_Init+0x148>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	4a2c      	ldr	r2, [pc, #176]	@ (8000a14 <MX_GPIO_Init+0x148>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <MX_GPIO_Init+0x148>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000978:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <MX_GPIO_Init+0x148>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097e:	4a25      	ldr	r2, [pc, #148]	@ (8000a14 <MX_GPIO_Init+0x148>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000988:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <MX_GPIO_Init+0x148>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_LED_Pin|R_LED_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2103      	movs	r1, #3
 800099a:	481f      	ldr	r0, [pc, #124]	@ (8000a18 <MX_GPIO_Init+0x14c>)
 800099c:	f001 fbea 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nBUZZ_GPIO_Port, nBUZZ_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2108      	movs	r1, #8
 80009a4:	481d      	ldr	r0, [pc, #116]	@ (8000a1c <MX_GPIO_Init+0x150>)
 80009a6:	f001 fbe5 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_1_Pin|TRIG_2_Pin|TRIG_3_Pin|TRIG_4_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80009b0:	481b      	ldr	r0, [pc, #108]	@ (8000a20 <MX_GPIO_Init+0x154>)
 80009b2:	f001 fbdf 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : G_LED_Pin R_LED_Pin */
  GPIO_InitStruct.Pin = G_LED_Pin|R_LED_Pin;
 80009b6:	2303      	movs	r3, #3
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009ba:	2311      	movs	r3, #17
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <MX_GPIO_Init+0x14c>)
 80009ce:	f001 fa29 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : nBUZZ_Pin */
  GPIO_InitStruct.Pin = nBUZZ_Pin;
 80009d2:	2308      	movs	r3, #8
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009d6:	2311      	movs	r3, #17
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(nBUZZ_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <MX_GPIO_Init+0x150>)
 80009ea:	f001 fa1b 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_1_Pin TRIG_2_Pin TRIG_3_Pin TRIG_4_Pin */
  GPIO_InitStruct.Pin = TRIG_1_Pin|TRIG_2_Pin|TRIG_3_Pin|TRIG_4_Pin;
 80009ee:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <MX_GPIO_Init+0x154>)
 8000a08:	f001 fa0c 	bl	8001e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0c:	bf00      	nop
 8000a0e:	3730      	adds	r7, #48	@ 0x30
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	58024400 	.word	0x58024400
 8000a18:	58020800 	.word	0x58020800
 8000a1c:	58020000 	.word	0x58020000
 8000a20:	58021000 	.word	0x58021000

08000a24 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a36:	f000 fcfd 	bl	8001434 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a46:	231f      	movs	r3, #31
 8000a48:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a4a:	2387      	movs	r3, #135	@ 0x87
 8000a4c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a52:	2300      	movs	r3, #0
 8000a54:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a56:	2301      	movs	r3, #1
 8000a58:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a66:	463b      	mov	r3, r7
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fd1b 	bl	80014a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a6e:	2004      	movs	r0, #4
 8000a70:	f000 fcf8 	bl	8001464 <HAL_MPU_Enable>

}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <HAL_MspInit+0x30>)
 8000a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a94:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <HAL_MspInit+0x30>)
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_MspInit+0x30>)
 8000aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	58024400 	.word	0x58024400

08000abc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0ba      	sub	sp, #232	@ 0xe8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	22b8      	movs	r2, #184	@ 0xb8
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 ff04 	bl	80048ea <memset>
  if(hfdcan->Instance==FDCAN1)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a57      	ldr	r2, [pc, #348]	@ (8000c44 <HAL_FDCAN_MspInit+0x188>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d151      	bne.n	8000b90 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000aec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000af8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 faad 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000b10:	f7ff ffb4 	bl	8000a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000b14:	4b4c      	ldr	r3, [pc, #304]	@ (8000c48 <HAL_FDCAN_MspInit+0x18c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4a4b      	ldr	r2, [pc, #300]	@ (8000c48 <HAL_FDCAN_MspInit+0x18c>)
 8000b1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8000c48 <HAL_FDCAN_MspInit+0x18c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d10e      	bne.n	8000b44 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b26:	4b49      	ldr	r3, [pc, #292]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000b28:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b2c:	4a47      	ldr	r2, [pc, #284]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b32:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000b36:	4b45      	ldr	r3, [pc, #276]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000b38:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	4b41      	ldr	r3, [pc, #260]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4a:	4a40      	ldr	r2, [pc, #256]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b54:	4b3d      	ldr	r3, [pc, #244]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b7c:	2309      	movs	r3, #9
 8000b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4831      	ldr	r0, [pc, #196]	@ (8000c50 <HAL_FDCAN_MspInit+0x194>)
 8000b8a:	f001 f94b 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000b8e:	e055      	b.n	8000c3c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN3)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a2f      	ldr	r2, [pc, #188]	@ (8000c54 <HAL_FDCAN_MspInit+0x198>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d150      	bne.n	8000c3c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b9a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b9e:	f04f 0300 	mov.w	r3, #0
 8000ba2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ba6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000baa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fa56 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8000bbe:	f7ff ff5d 	bl	8000a7c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <HAL_FDCAN_MspInit+0x18c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c48 <HAL_FDCAN_MspInit+0x18c>)
 8000bca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <HAL_FDCAN_MspInit+0x18c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d10e      	bne.n	8000bf2 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000bd6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000bda:	4a1c      	ldr	r2, [pc, #112]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000be4:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000be6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf8:	4a14      	ldr	r2, [pc, #80]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c02:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <HAL_FDCAN_MspInit+0x190>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c10:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_FDCAN3;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c34:	4619      	mov	r1, r3
 8000c36:	4808      	ldr	r0, [pc, #32]	@ (8000c58 <HAL_FDCAN_MspInit+0x19c>)
 8000c38:	f001 f8f4 	bl	8001e24 <HAL_GPIO_Init>
}
 8000c3c:	bf00      	nop
 8000c3e:	37e8      	adds	r7, #232	@ 0xe8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	4000a000 	.word	0x4000a000
 8000c48:	240003ac 	.word	0x240003ac
 8000c4c:	58024400 	.word	0x58024400
 8000c50:	58020400 	.word	0x58020400
 8000c54:	4000d400 	.word	0x4000d400
 8000c58:	58020c00 	.word	0x58020c00

08000c5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0c0      	sub	sp, #256	@ 0x100
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c78:	22b8      	movs	r2, #184	@ 0xb8
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fe34 	bl	80048ea <memset>
  if(hspi->Instance==SPI1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4aac      	ldr	r2, [pc, #688]	@ (8000f38 <HAL_SPI_MspInit+0x2dc>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d146      	bne.n	8000d1a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000c8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 f9de 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000cae:	f7ff fee5 	bl	8000a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cb2:	4ba2      	ldr	r3, [pc, #648]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cb8:	4aa0      	ldr	r2, [pc, #640]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000cba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cc2:	4b9e      	ldr	r3, [pc, #632]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b9a      	ldr	r3, [pc, #616]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	4a99      	ldr	r2, [pc, #612]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce0:	4b96      	ldr	r3, [pc, #600]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cee:	23f0      	movs	r3, #240	@ 0xf0
 8000cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d06:	2305      	movs	r3, #5
 8000d08:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d10:	4619      	mov	r1, r3
 8000d12:	488b      	ldr	r0, [pc, #556]	@ (8000f40 <HAL_SPI_MspInit+0x2e4>)
 8000d14:	f001 f886 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000d18:	e109      	b.n	8000f2e <HAL_SPI_MspInit+0x2d2>
  else if(hspi->Instance==SPI2)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a89      	ldr	r2, [pc, #548]	@ (8000f44 <HAL_SPI_MspInit+0x2e8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d147      	bne.n	8000db4 <HAL_SPI_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000d24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 f992 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_SPI_MspInit+0xee>
      Error_Handler();
 8000d46:	f7ff fe99 	bl	8000a7c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d4a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d50:	4a7a      	ldr	r2, [pc, #488]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d5a:	4b78      	ldr	r3, [pc, #480]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b74      	ldr	r3, [pc, #464]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6e:	4a73      	ldr	r2, [pc, #460]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d78:	4b70      	ldr	r3, [pc, #448]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	623b      	str	r3, [r7, #32]
 8000d84:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d86:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000da0:	2305      	movs	r3, #5
 8000da2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000daa:	4619      	mov	r1, r3
 8000dac:	4866      	ldr	r0, [pc, #408]	@ (8000f48 <HAL_SPI_MspInit+0x2ec>)
 8000dae:	f001 f839 	bl	8001e24 <HAL_GPIO_Init>
}
 8000db2:	e0bc      	b.n	8000f2e <HAL_SPI_MspInit+0x2d2>
  else if(hspi->Instance==SPI3)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a64      	ldr	r2, [pc, #400]	@ (8000f4c <HAL_SPI_MspInit+0x2f0>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d16c      	bne.n	8000e98 <HAL_SPI_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000dbe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 f945 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 8000de0:	f7ff fe4c 	bl	8000a7c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000de4:	4b55      	ldr	r3, [pc, #340]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dea:	4a54      	ldr	r2, [pc, #336]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000df0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000df4:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b4e      	ldr	r3, [pc, #312]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	4a4c      	ldr	r2, [pc, #304]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e12:	4b4a      	ldr	r3, [pc, #296]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	4b46      	ldr	r3, [pc, #280]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	4a45      	ldr	r2, [pc, #276]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e30:	4b42      	ldr	r3, [pc, #264]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e58:	2306      	movs	r3, #6
 8000e5a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e62:	4619      	mov	r1, r3
 8000e64:	4836      	ldr	r0, [pc, #216]	@ (8000f40 <HAL_SPI_MspInit+0x2e4>)
 8000e66:	f000 ffdd 	bl	8001e24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e6a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e84:	2306      	movs	r3, #6
 8000e86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e8e:	4619      	mov	r1, r3
 8000e90:	482f      	ldr	r0, [pc, #188]	@ (8000f50 <HAL_SPI_MspInit+0x2f4>)
 8000e92:	f000 ffc7 	bl	8001e24 <HAL_GPIO_Init>
}
 8000e96:	e04a      	b.n	8000f2e <HAL_SPI_MspInit+0x2d2>
  else if(hspi->Instance==SPI4)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f54 <HAL_SPI_MspInit+0x2f8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d145      	bne.n	8000f2e <HAL_SPI_MspInit+0x2d2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000ea2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 f8d3 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 8000ec4:	f7ff fdda 	bl	8000a7c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ece:	4a1b      	ldr	r2, [pc, #108]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000ed0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ed4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eec:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <HAL_SPI_MspInit+0x2e0>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f04:	2374      	movs	r3, #116	@ 0x74
 8000f06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000f1c:	2305      	movs	r3, #5
 8000f1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f22:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f26:	4619      	mov	r1, r3
 8000f28:	480b      	ldr	r0, [pc, #44]	@ (8000f58 <HAL_SPI_MspInit+0x2fc>)
 8000f2a:	f000 ff7b 	bl	8001e24 <HAL_GPIO_Init>
}
 8000f2e:	bf00      	nop
 8000f30:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40013000 	.word	0x40013000
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020000 	.word	0x58020000
 8000f44:	40003800 	.word	0x40003800
 8000f48:	58020400 	.word	0x58020400
 8000f4c:	40003c00 	.word	0x40003c00
 8000f50:	58020800 	.word	0x58020800
 8000f54:	40013400 	.word	0x40013400
 8000f58:	58021000 	.word	0x58021000

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <NMI_Handler+0x4>

08000f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <MemManage_Handler+0x4>

08000f74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb2:	f000 f917 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b32      	ldr	r3, [pc, #200]	@ (800108c <SystemInit+0xd0>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc6:	4a31      	ldr	r2, [pc, #196]	@ (800108c <SystemInit+0xd0>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <SystemInit+0xd4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 030f 	and.w	r3, r3, #15
 8000fd8:	2b06      	cmp	r3, #6
 8000fda:	d807      	bhi.n	8000fec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001090 <SystemInit+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f023 030f 	bic.w	r3, r3, #15
 8000fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8001090 <SystemInit+0xd4>)
 8000fe6:	f043 0307 	orr.w	r3, r3, #7
 8000fea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fec:	4b29      	ldr	r3, [pc, #164]	@ (8001094 <SystemInit+0xd8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a28      	ldr	r2, [pc, #160]	@ (8001094 <SystemInit+0xd8>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ff8:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <SystemInit+0xd8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ffe:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <SystemInit+0xd8>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4924      	ldr	r1, [pc, #144]	@ (8001094 <SystemInit+0xd8>)
 8001004:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <SystemInit+0xdc>)
 8001006:	4013      	ands	r3, r2
 8001008:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800100a:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <SystemInit+0xd4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001016:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <SystemInit+0xd4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 030f 	bic.w	r3, r3, #15
 800101e:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <SystemInit+0xd4>)
 8001020:	f043 0307 	orr.w	r3, r3, #7
 8001024:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001026:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <SystemInit+0xd8>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <SystemInit+0xd8>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001032:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <SystemInit+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001038:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <SystemInit+0xd8>)
 800103a:	4a18      	ldr	r2, [pc, #96]	@ (800109c <SystemInit+0xe0>)
 800103c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <SystemInit+0xd8>)
 8001040:	4a17      	ldr	r2, [pc, #92]	@ (80010a0 <SystemInit+0xe4>)
 8001042:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <SystemInit+0xd8>)
 8001046:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <SystemInit+0xe8>)
 8001048:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <SystemInit+0xd8>)
 800104c:	2200      	movs	r2, #0
 800104e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001050:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <SystemInit+0xd8>)
 8001052:	4a14      	ldr	r2, [pc, #80]	@ (80010a4 <SystemInit+0xe8>)
 8001054:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001056:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <SystemInit+0xd8>)
 8001058:	2200      	movs	r2, #0
 800105a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800105c:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <SystemInit+0xd8>)
 800105e:	4a11      	ldr	r2, [pc, #68]	@ (80010a4 <SystemInit+0xe8>)
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <SystemInit+0xd8>)
 8001064:	2200      	movs	r2, #0
 8001066:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <SystemInit+0xd8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a09      	ldr	r2, [pc, #36]	@ (8001094 <SystemInit+0xd8>)
 800106e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001072:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001074:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <SystemInit+0xd8>)
 8001076:	2200      	movs	r2, #0
 8001078:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <SystemInit+0xec>)
 800107c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001080:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	52002000 	.word	0x52002000
 8001094:	58024400 	.word	0x58024400
 8001098:	eaf6ed7f 	.word	0xeaf6ed7f
 800109c:	02020200 	.word	0x02020200
 80010a0:	01ff0000 	.word	0x01ff0000
 80010a4:	01010280 	.word	0x01010280
 80010a8:	52004000 	.word	0x52004000

080010ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b0:	f7ff ff84 	bl	8000fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	@ (80010ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	@ (80010f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010da:	f003 fc0f 	bl	80048fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010de:	f7ff f915 	bl	800030c <main>
  bx  lr
 80010e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010ec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010f0:	080049dc 	.word	0x080049dc
  ldr r2, =_sbss
 80010f4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80010f8:	240003b4 	.word	0x240003b4

080010fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC3_IRQHandler>
	...

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001106:	2003      	movs	r0, #3
 8001108:	f000 f962 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800110c:	f001 fe30 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8001110:	4602      	mov	r2, r0
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <HAL_Init+0x68>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	4913      	ldr	r1, [pc, #76]	@ (800116c <HAL_Init+0x6c>)
 800111e:	5ccb      	ldrb	r3, [r1, r3]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_Init+0x68>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	4a0e      	ldr	r2, [pc, #56]	@ (800116c <HAL_Init+0x6c>)
 8001134:	5cd3      	ldrb	r3, [r2, r3]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	fa22 f303 	lsr.w	r3, r2, r3
 8001140:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <HAL_Init+0x70>)
 8001142:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001144:	4a0b      	ldr	r2, [pc, #44]	@ (8001174 <HAL_Init+0x74>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800114a:	200f      	movs	r0, #15
 800114c:	f000 f814 	bl	8001178 <HAL_InitTick>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e002      	b.n	8001160 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800115a:	f7ff fc95 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	58024400 	.word	0x58024400
 800116c:	080049c4 	.word	0x080049c4
 8001170:	24000004 	.word	0x24000004
 8001174:	24000000 	.word	0x24000000

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_InitTick+0x60>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e021      	b.n	80011d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800118c:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <HAL_InitTick+0x64>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_InitTick+0x60>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f939 	bl	800141a <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f000 f911 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	@ (80011e0 <HAL_InitTick+0x68>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2400000c 	.word	0x2400000c
 80011dc:	24000000 	.word	0x24000000
 80011e0:	24000008 	.word	0x24000008

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	2400000c 	.word	0x2400000c
 8001208:	240003b0 	.word	0x240003b0

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	240003b0 	.word	0x240003b0

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff ffee 	bl	800120c <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_Delay+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800124a:	bf00      	nop
 800124c:	f7ff ffde 	bl	800120c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2400000c 	.word	0x2400000c

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <__NVIC_SetPriorityGrouping+0x40>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	4313      	orrs	r3, r2
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <__NVIC_SetPriorityGrouping+0x40>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00
 80012b0:	05fa0000 	.word	0x05fa0000

080012b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	@ (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	@ (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff47 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff5e 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff90 	bl	8001324 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5f 	bl	80012d0 <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffb2 	bl	800138c <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001438:	f3bf 8f5f 	dmb	sy
}
 800143c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_MPU_Disable+0x28>)
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	4a06      	ldr	r2, [pc, #24]	@ (800145c <HAL_MPU_Disable+0x28>)
 8001444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001448:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800144a:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_MPU_Disable+0x2c>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00
 8001460:	e000ed90 	.word	0xe000ed90

08001464 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800146c:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <HAL_MPU_Enable+0x38>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_MPU_Enable+0x3c>)
 8001478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147a:	4a09      	ldr	r2, [pc, #36]	@ (80014a0 <HAL_MPU_Enable+0x3c>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001480:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001482:	f3bf 8f4f 	dsb	sy
}
 8001486:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001488:	f3bf 8f6f 	isb	sy
}
 800148c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed90 	.word	0xe000ed90
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	785a      	ldrb	r2, [r3, #1]
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <HAL_MPU_ConfigRegion+0x7c>)
 80014b2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <HAL_MPU_ConfigRegion+0x7c>)
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	4a19      	ldr	r2, [pc, #100]	@ (8001520 <HAL_MPU_ConfigRegion+0x7c>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014c0:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <HAL_MPU_ConfigRegion+0x7c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7b1b      	ldrb	r3, [r3, #12]
 80014cc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7adb      	ldrb	r3, [r3, #11]
 80014d2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7a9b      	ldrb	r3, [r3, #10]
 80014da:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7b5b      	ldrb	r3, [r3, #13]
 80014e2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7b9b      	ldrb	r3, [r3, #14]
 80014ea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7bdb      	ldrb	r3, [r3, #15]
 80014f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7a5b      	ldrb	r3, [r3, #9]
 80014fa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7a1b      	ldrb	r3, [r3, #8]
 8001502:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001504:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800150e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001510:	6113      	str	r3, [r2, #16]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed90 	.word	0xe000ed90

08001524 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b098      	sub	sp, #96	@ 0x60
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800152c:	4a84      	ldr	r2, [pc, #528]	@ (8001740 <HAL_FDCAN_Init+0x21c>)
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	4611      	mov	r1, r2
 8001534:	224c      	movs	r2, #76	@ 0x4c
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fa04 	bl	8004944 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e1c6      	b.n	80018d4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a7e      	ldr	r2, [pc, #504]	@ (8001744 <HAL_FDCAN_Init+0x220>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d106      	bne.n	800155e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001558:	461a      	mov	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff faa2 	bl	8000abc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0210 	bic.w	r2, r2, #16
 8001586:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001588:	f7ff fe40 	bl	800120c <HAL_GetTick>
 800158c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800158e:	e014      	b.n	80015ba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001590:	f7ff fe3c 	bl	800120c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b0a      	cmp	r3, #10
 800159c:	d90d      	bls.n	80015ba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2203      	movs	r2, #3
 80015b2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e18c      	b.n	80018d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d0e3      	beq.n	8001590 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d8:	f7ff fe18 	bl	800120c <HAL_GetTick>
 80015dc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80015de:	e014      	b.n	800160a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80015e0:	f7ff fe14 	bl	800120c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b0a      	cmp	r3, #10
 80015ec:	d90d      	bls.n	800160a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2203      	movs	r2, #3
 8001602:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e164      	b.n	80018d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0e3      	beq.n	80015e0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699a      	ldr	r2, [r3, #24]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0202 	orr.w	r2, r2, #2
 8001626:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7c1b      	ldrb	r3, [r3, #16]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800163e:	619a      	str	r2, [r3, #24]
 8001640:	e007      	b.n	8001652 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001650:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7c5b      	ldrb	r3, [r3, #17]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d108      	bne.n	800166c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699a      	ldr	r2, [r3, #24]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001668:	619a      	str	r2, [r3, #24]
 800166a:	e007      	b.n	800167c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800167a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7c9b      	ldrb	r3, [r3, #18]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d108      	bne.n	8001696 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699a      	ldr	r2, [r3, #24]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001692:	619a      	str	r2, [r3, #24]
 8001694:	e007      	b.n	80016a6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80016a4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699a      	ldr	r2, [r3, #24]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80016ca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0210 	bic.w	r2, r2, #16
 80016da:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d108      	bne.n	80016f6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0204 	orr.w	r2, r2, #4
 80016f2:	619a      	str	r2, [r3, #24]
 80016f4:	e030      	b.n	8001758 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d02c      	beq.n	8001758 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d020      	beq.n	8001748 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699a      	ldr	r2, [r3, #24]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001714:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0210 	orr.w	r2, r2, #16
 8001724:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d114      	bne.n	8001758 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699a      	ldr	r2, [r3, #24]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0220 	orr.w	r2, r2, #32
 800173c:	619a      	str	r2, [r3, #24]
 800173e:	e00b      	b.n	8001758 <HAL_FDCAN_Init+0x234>
 8001740:	08004978 	.word	0x08004978
 8001744:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0220 	orr.w	r2, r2, #32
 8001756:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	3b01      	subs	r3, #1
 800175e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	3b01      	subs	r3, #1
 8001766:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001768:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001770:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	3b01      	subs	r3, #1
 800177a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001780:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001782:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800178c:	d115      	bne.n	80017ba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001792:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001798:	3b01      	subs	r3, #1
 800179a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800179c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	3b01      	subs	r3, #1
 80017a4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80017a6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ae:	3b01      	subs	r3, #1
 80017b0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80017b6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017b8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00a      	beq.n	80017d8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e0:	4413      	add	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d011      	beq.n	800180a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80017ee:	f023 0107 	bic.w	r1, r3, #7
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	3360      	adds	r3, #96	@ 0x60
 80017fa:	443b      	add	r3, r7
 80017fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	2b00      	cmp	r3, #0
 8001810:	d011      	beq.n	8001836 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800181a:	f023 0107 	bic.w	r1, r3, #7
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	3360      	adds	r3, #96	@ 0x60
 8001826:	443b      	add	r3, r7
 8001828:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183a:	2b00      	cmp	r3, #0
 800183c:	d012      	beq.n	8001864 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001846:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	3360      	adds	r3, #96	@ 0x60
 8001852:	443b      	add	r3, r7
 8001854:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001858:	011a      	lsls	r2, r3, #4
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001868:	2b00      	cmp	r3, #0
 800186a:	d012      	beq.n	8001892 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001874:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	3360      	adds	r3, #96	@ 0x60
 8001880:	443b      	add	r3, r7
 8001882:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001886:	021a      	lsls	r2, r3, #8
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a11      	ldr	r2, [pc, #68]	@ (80018dc <HAL_FDCAN_Init+0x3b8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d107      	bne.n	80018ac <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f022 0203 	bic.w	r2, r2, #3
 80018aa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f927 	bl	8001b18 <FDCAN_CalcultateRamBlockAddresses>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80018d0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3760      	adds	r7, #96	@ 0x60
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	4000a000 	.word	0x4000a000

080018e0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80018f0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d002      	beq.n	80018fe <HAL_FDCAN_ConfigFilter+0x1e>
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d157      	bne.n	80019ae <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d12b      	bne.n	800195e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b07      	cmp	r3, #7
 800190c:	d10d      	bne.n	800192a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800191a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001920:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001922:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e00e      	b.n	8001948 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001936:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800193e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e025      	b.n	80019aa <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	075a      	lsls	r2, r3, #29
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b07      	cmp	r3, #7
 8001972:	d103      	bne.n	800197c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	e006      	b.n	800198a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	079a      	lsls	r2, r3, #30
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3304      	adds	r3, #4
 80019a2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e008      	b.n	80019c0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019b4:	f043 0202 	orr.w	r2, r3, #2
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
  }
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d111      	bne.n	8001a04 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e008      	b.n	8001a16 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a0a:	f043 0204 	orr.w	r2, r3, #4
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
  }
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001a36:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a38:	7dfb      	ldrb	r3, [r7, #23]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d002      	beq.n	8001a44 <HAL_FDCAN_ActivateNotification+0x20>
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d155      	bne.n	8001af0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d108      	bne.n	8001a64 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a62:	e014      	b.n	8001a8e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d108      	bne.n	8001a86 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0202 	orr.w	r2, r2, #2
 8001a82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a84:	e003      	b.n	8001a8e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d009      	beq.n	8001aac <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <HAL_FDCAN_ActivateNotification+0xec>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	6553      	str	r3, [r2, #84]	@ 0x54
 8001ade:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	0f9b      	lsrs	r3, r3, #30
 8001ae6:	490b      	ldr	r1, [pc, #44]	@ (8001b14 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e008      	b.n	8001b02 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001af6:	f043 0202 	orr.w	r2, r3, #2
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
  }
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	3fcfffff 	.word	0x3fcfffff
 8001b14:	4000a800 	.word	0x4000a800

08001b18 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b24:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001b2e:	4ba7      	ldr	r3, [pc, #668]	@ (8001dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	0091      	lsls	r1, r2, #2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b48:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	4413      	add	r3, r2
 8001b64:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001b6e:	4b97      	ldr	r3, [pc, #604]	@ (8001dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	0091      	lsls	r1, r2, #2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b88:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b90:	041a      	lsls	r2, r3, #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001bb0:	4b86      	ldr	r3, [pc, #536]	@ (8001dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	0091      	lsls	r1, r2, #2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001bca:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	041a      	lsls	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	4413      	add	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bf8:	4b74      	ldr	r3, [pc, #464]	@ (8001dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	0091      	lsls	r1, r2, #2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	430b      	orrs	r3, r1
 8001c06:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001c12:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c1a:	041a      	lsls	r2, r3, #16
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4413      	add	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001c40:	4b62      	ldr	r3, [pc, #392]	@ (8001dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	0091      	lsls	r1, r2, #2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	4413      	add	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001c6c:	4b57      	ldr	r3, [pc, #348]	@ (8001dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	0091      	lsls	r1, r2, #2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c86:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	041a      	lsls	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001cae:	4b47      	ldr	r3, [pc, #284]	@ (8001dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	0091      	lsls	r1, r2, #2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001cc8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ce4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cec:	061a      	lsls	r2, r3, #24
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cfc:	4b34      	ldr	r3, [pc, #208]	@ (8001dd0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001cfe:	4413      	add	r3, r2
 8001d00:	009a      	lsls	r2, r3, #2
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	441a      	add	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	441a      	add	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001d38:	441a      	add	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001d50:	441a      	add	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001d68:	441a      	add	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	441a      	add	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	441a      	add	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001db4:	441a      	add	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc2:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d915      	bls.n	8001df4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001dc8:	e006      	b.n	8001dd8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001dca:	bf00      	nop
 8001dcc:	ffff0003 	.word	0xffff0003
 8001dd0:	10002b00 	.word	0x10002b00
 8001dd4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001dde:	f043 0220 	orr.w	r2, r3, #32
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2203      	movs	r2, #3
 8001dec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e010      	b.n	8001e16 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e005      	b.n	8001e08 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3304      	adds	r3, #4
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d3f3      	bcc.n	8001dfc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e32:	4b86      	ldr	r3, [pc, #536]	@ (800204c <HAL_GPIO_Init+0x228>)
 8001e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e36:	e18c      	b.n	8002152 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 817e 	beq.w	800214c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d005      	beq.n	8001e68 <HAL_GPIO_Init+0x44>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d130      	bne.n	8001eca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 0201 	and.w	r2, r3, #1
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d017      	beq.n	8001f06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d123      	bne.n	8001f5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	69b9      	ldr	r1, [r7, #24]
 8001f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0203 	and.w	r2, r3, #3
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80d8 	beq.w	800214c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002050 <HAL_GPIO_Init+0x22c>)
 8001f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8002050 <HAL_GPIO_Init+0x22c>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fac:	4b28      	ldr	r3, [pc, #160]	@ (8002050 <HAL_GPIO_Init+0x22c>)
 8001fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fba:	4a26      	ldr	r2, [pc, #152]	@ (8002054 <HAL_GPIO_Init+0x230>)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8002058 <HAL_GPIO_Init+0x234>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04a      	beq.n	800207c <HAL_GPIO_Init+0x258>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800205c <HAL_GPIO_Init+0x238>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d02b      	beq.n	8002046 <HAL_GPIO_Init+0x222>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8002060 <HAL_GPIO_Init+0x23c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d025      	beq.n	8002042 <HAL_GPIO_Init+0x21e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8002064 <HAL_GPIO_Init+0x240>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <HAL_GPIO_Init+0x21a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a19      	ldr	r2, [pc, #100]	@ (8002068 <HAL_GPIO_Init+0x244>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0x216>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a18      	ldr	r2, [pc, #96]	@ (800206c <HAL_GPIO_Init+0x248>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0x212>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a17      	ldr	r2, [pc, #92]	@ (8002070 <HAL_GPIO_Init+0x24c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00d      	beq.n	8002032 <HAL_GPIO_Init+0x20e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a16      	ldr	r2, [pc, #88]	@ (8002074 <HAL_GPIO_Init+0x250>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_Init+0x20a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a15      	ldr	r2, [pc, #84]	@ (8002078 <HAL_GPIO_Init+0x254>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_GPIO_Init+0x206>
 8002026:	2309      	movs	r3, #9
 8002028:	e029      	b.n	800207e <HAL_GPIO_Init+0x25a>
 800202a:	230a      	movs	r3, #10
 800202c:	e027      	b.n	800207e <HAL_GPIO_Init+0x25a>
 800202e:	2307      	movs	r3, #7
 8002030:	e025      	b.n	800207e <HAL_GPIO_Init+0x25a>
 8002032:	2306      	movs	r3, #6
 8002034:	e023      	b.n	800207e <HAL_GPIO_Init+0x25a>
 8002036:	2305      	movs	r3, #5
 8002038:	e021      	b.n	800207e <HAL_GPIO_Init+0x25a>
 800203a:	2304      	movs	r3, #4
 800203c:	e01f      	b.n	800207e <HAL_GPIO_Init+0x25a>
 800203e:	2303      	movs	r3, #3
 8002040:	e01d      	b.n	800207e <HAL_GPIO_Init+0x25a>
 8002042:	2302      	movs	r3, #2
 8002044:	e01b      	b.n	800207e <HAL_GPIO_Init+0x25a>
 8002046:	2301      	movs	r3, #1
 8002048:	e019      	b.n	800207e <HAL_GPIO_Init+0x25a>
 800204a:	bf00      	nop
 800204c:	58000080 	.word	0x58000080
 8002050:	58024400 	.word	0x58024400
 8002054:	58000400 	.word	0x58000400
 8002058:	58020000 	.word	0x58020000
 800205c:	58020400 	.word	0x58020400
 8002060:	58020800 	.word	0x58020800
 8002064:	58020c00 	.word	0x58020c00
 8002068:	58021000 	.word	0x58021000
 800206c:	58021400 	.word	0x58021400
 8002070:	58021800 	.word	0x58021800
 8002074:	58021c00 	.word	0x58021c00
 8002078:	58022400 	.word	0x58022400
 800207c:	2300      	movs	r3, #0
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	f002 0203 	and.w	r2, r2, #3
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	4093      	lsls	r3, r2
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208e:	4938      	ldr	r1, [pc, #224]	@ (8002170 <HAL_GPIO_Init+0x34c>)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3301      	adds	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	f47f ae6b 	bne.w	8001e38 <HAL_GPIO_Init+0x14>
  }
}
 8002162:	bf00      	nop
 8002164:	bf00      	nop
 8002166:	3724      	adds	r7, #36	@ 0x24
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	58000400 	.word	0x58000400

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021b8:	887a      	ldrh	r2, [r7, #2]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	041a      	lsls	r2, r3, #16
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	400b      	ands	r3, r1
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80021e4:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_PWREx_ConfigSupply+0x70>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d00a      	beq.n	8002206 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021f0:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_PWREx_ConfigSupply+0x70>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d001      	beq.n	8002202 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e01f      	b.n	8002242 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e01d      	b.n	8002242 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <HAL_PWREx_ConfigSupply+0x70>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	490f      	ldr	r1, [pc, #60]	@ (800224c <HAL_PWREx_ConfigSupply+0x70>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4313      	orrs	r3, r2
 8002214:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002216:	f7fe fff9 	bl	800120c <HAL_GetTick>
 800221a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800221c:	e009      	b.n	8002232 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800221e:	f7fe fff5 	bl	800120c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800222c:	d901      	bls.n	8002232 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e007      	b.n	8002242 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_PWREx_ConfigSupply+0x70>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800223a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800223e:	d1ee      	bne.n	800221e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	58024800 	.word	0x58024800

08002250 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	@ 0x30
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e3c8      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8087 	beq.w	800237e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002270:	4b88      	ldr	r3, [pc, #544]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800227a:	4b86      	ldr	r3, [pc, #536]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 800227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002282:	2b10      	cmp	r3, #16
 8002284:	d007      	beq.n	8002296 <HAL_RCC_OscConfig+0x46>
 8002286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002288:	2b18      	cmp	r3, #24
 800228a:	d110      	bne.n	80022ae <HAL_RCC_OscConfig+0x5e>
 800228c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d10b      	bne.n	80022ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002296:	4b7f      	ldr	r3, [pc, #508]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d06c      	beq.n	800237c <HAL_RCC_OscConfig+0x12c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d168      	bne.n	800237c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e3a2      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x76>
 80022b8:	4b76      	ldr	r3, [pc, #472]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a75      	ldr	r2, [pc, #468]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e02e      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x98>
 80022ce:	4b71      	ldr	r3, [pc, #452]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a70      	ldr	r2, [pc, #448]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80022d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b6e      	ldr	r3, [pc, #440]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6d      	ldr	r2, [pc, #436]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80022e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e01d      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0xbc>
 80022f2:	4b68      	ldr	r3, [pc, #416]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a67      	ldr	r2, [pc, #412]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b65      	ldr	r3, [pc, #404]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a64      	ldr	r2, [pc, #400]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 800230c:	4b61      	ldr	r3, [pc, #388]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a60      	ldr	r2, [pc, #384]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b5e      	ldr	r3, [pc, #376]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a5d      	ldr	r2, [pc, #372]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe ff6e 	bl	800120c <HAL_GetTick>
 8002330:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe ff6a 	bl	800120c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	@ 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e356      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002346:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0xe4>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe ff5a 	bl	800120c <HAL_GetTick>
 8002358:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe ff56 	bl	800120c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	@ 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e342      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800236e:	4b49      	ldr	r3, [pc, #292]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x10c>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 808c 	beq.w	80024a4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238c:	4b41      	ldr	r3, [pc, #260]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002394:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002396:	4b3f      	ldr	r3, [pc, #252]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <HAL_RCC_OscConfig+0x162>
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	2b18      	cmp	r3, #24
 80023a6:	d137      	bne.n	8002418 <HAL_RCC_OscConfig+0x1c8>
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d132      	bne.n	8002418 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b2:	4b38      	ldr	r3, [pc, #224]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x17a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e314      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023ca:	4b32      	ldr	r3, [pc, #200]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0219 	bic.w	r2, r3, #25
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	492f      	ldr	r1, [pc, #188]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe ff16 	bl	800120c <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7fe ff12 	bl	800120c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e2fe      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f6:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	061b      	lsls	r3, r3, #24
 8002410:	4920      	ldr	r1, [pc, #128]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002412:	4313      	orrs	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002416:	e045      	b.n	80024a4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d026      	beq.n	800246e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002420:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 0219 	bic.w	r2, r3, #25
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4919      	ldr	r1, [pc, #100]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7fe feeb 	bl	800120c <HAL_GetTick>
 8002436:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243a:	f7fe fee7 	bl	800120c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e2d3      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002458:	4b0e      	ldr	r3, [pc, #56]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	061b      	lsls	r3, r3, #24
 8002466:	490b      	ldr	r1, [pc, #44]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	e01a      	b.n	80024a4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246e:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a08      	ldr	r2, [pc, #32]	@ (8002494 <HAL_RCC_OscConfig+0x244>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247a:	f7fe fec7 	bl	800120c <HAL_GetTick>
 800247e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002482:	f7fe fec3 	bl	800120c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d903      	bls.n	8002498 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e2af      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
 8002494:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002498:	4b96      	ldr	r3, [pc, #600]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ee      	bne.n	8002482 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d06a      	beq.n	8002586 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b0:	4b90      	ldr	r3, [pc, #576]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024b8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024ba:	4b8e      	ldr	r3, [pc, #568]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d007      	beq.n	80024d6 <HAL_RCC_OscConfig+0x286>
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b18      	cmp	r3, #24
 80024ca:	d11b      	bne.n	8002504 <HAL_RCC_OscConfig+0x2b4>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d116      	bne.n	8002504 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024d6:	4b87      	ldr	r3, [pc, #540]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_RCC_OscConfig+0x29e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b80      	cmp	r3, #128	@ 0x80
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e282      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024ee:	4b81      	ldr	r3, [pc, #516]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	061b      	lsls	r3, r3, #24
 80024fc:	497d      	ldr	r1, [pc, #500]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002502:	e040      	b.n	8002586 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d023      	beq.n	8002554 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800250c:	4b79      	ldr	r3, [pc, #484]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a78      	ldr	r2, [pc, #480]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 8002512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fe78 	bl	800120c <HAL_GetTick>
 800251c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002520:	f7fe fe74 	bl	800120c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e260      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002532:	4b70      	ldr	r3, [pc, #448]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800253e:	4b6d      	ldr	r3, [pc, #436]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	061b      	lsls	r3, r3, #24
 800254c:	4969      	ldr	r1, [pc, #420]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	60cb      	str	r3, [r1, #12]
 8002552:	e018      	b.n	8002586 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002554:	4b67      	ldr	r3, [pc, #412]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a66      	ldr	r2, [pc, #408]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 800255a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800255e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fe54 	bl	800120c <HAL_GetTick>
 8002564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002568:	f7fe fe50 	bl	800120c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e23c      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800257a:	4b5e      	ldr	r3, [pc, #376]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d036      	beq.n	8002600 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d019      	beq.n	80025ce <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259a:	4b56      	ldr	r3, [pc, #344]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 800259c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800259e:	4a55      	ldr	r2, [pc, #340]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe fe31 	bl	800120c <HAL_GetTick>
 80025aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ae:	f7fe fe2d 	bl	800120c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e219      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025c0:	4b4c      	ldr	r3, [pc, #304]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80025c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x35e>
 80025cc:	e018      	b.n	8002600 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ce:	4b49      	ldr	r3, [pc, #292]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80025d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d2:	4a48      	ldr	r2, [pc, #288]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025da:	f7fe fe17 	bl	800120c <HAL_GetTick>
 80025de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e2:	f7fe fe13 	bl	800120c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1ff      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025f4:	4b3f      	ldr	r3, [pc, #252]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80025f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d036      	beq.n	800267a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d019      	beq.n	8002648 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002614:	4b37      	ldr	r3, [pc, #220]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a36      	ldr	r2, [pc, #216]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 800261a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800261e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002620:	f7fe fdf4 	bl	800120c <HAL_GetTick>
 8002624:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002628:	f7fe fdf0 	bl	800120c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1dc      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800263a:	4b2e      	ldr	r3, [pc, #184]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x3d8>
 8002646:	e018      	b.n	800267a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a29      	ldr	r2, [pc, #164]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 800264e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002652:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002654:	f7fe fdda 	bl	800120c <HAL_GetTick>
 8002658:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800265c:	f7fe fdd6 	bl	800120c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e1c2      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800266e:	4b21      	ldr	r3, [pc, #132]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8086 	beq.w	8002794 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002688:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <HAL_RCC_OscConfig+0x4a8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1a      	ldr	r2, [pc, #104]	@ (80026f8 <HAL_RCC_OscConfig+0x4a8>)
 800268e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002692:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002694:	f7fe fdba 	bl	800120c <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269c:	f7fe fdb6 	bl	800120c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	@ 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e1a2      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ae:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <HAL_RCC_OscConfig+0x4a8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d106      	bne.n	80026d0 <HAL_RCC_OscConfig+0x480>
 80026c2:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c6:	4a0b      	ldr	r2, [pc, #44]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ce:	e032      	b.n	8002736 <HAL_RCC_OscConfig+0x4e6>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <HAL_RCC_OscConfig+0x4ac>
 80026d8:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026dc:	4a05      	ldr	r2, [pc, #20]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e4:	4b03      	ldr	r3, [pc, #12]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e8:	4a02      	ldr	r2, [pc, #8]	@ (80026f4 <HAL_RCC_OscConfig+0x4a4>)
 80026ea:	f023 0304 	bic.w	r3, r3, #4
 80026ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f0:	e021      	b.n	8002736 <HAL_RCC_OscConfig+0x4e6>
 80026f2:	bf00      	nop
 80026f4:	58024400 	.word	0x58024400
 80026f8:	58024800 	.word	0x58024800
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b05      	cmp	r3, #5
 8002702:	d10c      	bne.n	800271e <HAL_RCC_OscConfig+0x4ce>
 8002704:	4b83      	ldr	r3, [pc, #524]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002708:	4a82      	ldr	r2, [pc, #520]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002710:	4b80      	ldr	r3, [pc, #512]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002714:	4a7f      	ldr	r2, [pc, #508]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	@ 0x70
 800271c:	e00b      	b.n	8002736 <HAL_RCC_OscConfig+0x4e6>
 800271e:	4b7d      	ldr	r3, [pc, #500]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002722:	4a7c      	ldr	r2, [pc, #496]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6713      	str	r3, [r2, #112]	@ 0x70
 800272a:	4b7a      	ldr	r3, [pc, #488]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272e:	4a79      	ldr	r2, [pc, #484]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d015      	beq.n	800276a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe fd65 	bl	800120c <HAL_GetTick>
 8002742:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe fd61 	bl	800120c <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e14b      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800275c:	4b6d      	ldr	r3, [pc, #436]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ee      	beq.n	8002746 <HAL_RCC_OscConfig+0x4f6>
 8002768:	e014      	b.n	8002794 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276a:	f7fe fd4f 	bl	800120c <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe fd4b 	bl	800120c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e135      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002788:	4b62      	ldr	r3, [pc, #392]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 812a 	beq.w	80029f2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800279e:	4b5d      	ldr	r3, [pc, #372]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027a6:	2b18      	cmp	r3, #24
 80027a8:	f000 80ba 	beq.w	8002920 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	f040 8095 	bne.w	80028e0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b6:	4b57      	ldr	r3, [pc, #348]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a56      	ldr	r2, [pc, #344]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80027bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fd23 	bl	800120c <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe fd1f 	bl	800120c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e10b      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80027ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002918 <HAL_RCC_OscConfig+0x6c8>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	430a      	orrs	r2, r1
 80027fc:	4945      	ldr	r1, [pc, #276]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	628b      	str	r3, [r1, #40]	@ 0x28
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	3b01      	subs	r3, #1
 8002808:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002810:	3b01      	subs	r3, #1
 8002812:	025b      	lsls	r3, r3, #9
 8002814:	b29b      	uxth	r3, r3
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281c:	3b01      	subs	r3, #1
 800281e:	041b      	lsls	r3, r3, #16
 8002820:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282a:	3b01      	subs	r3, #1
 800282c:	061b      	lsls	r3, r3, #24
 800282e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002832:	4938      	ldr	r1, [pc, #224]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002838:	4b36      	ldr	r3, [pc, #216]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800283a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283c:	4a35      	ldr	r2, [pc, #212]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002844:	4b33      	ldr	r3, [pc, #204]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002848:	4b34      	ldr	r3, [pc, #208]	@ (800291c <HAL_RCC_OscConfig+0x6cc>)
 800284a:	4013      	ands	r3, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002850:	00d2      	lsls	r2, r2, #3
 8002852:	4930      	ldr	r1, [pc, #192]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002858:	4b2e      	ldr	r3, [pc, #184]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	f023 020c 	bic.w	r2, r3, #12
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	492b      	ldr	r1, [pc, #172]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800286a:	4b2a      	ldr	r3, [pc, #168]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800286c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286e:	f023 0202 	bic.w	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	4927      	ldr	r1, [pc, #156]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800287c:	4b25      	ldr	r3, [pc, #148]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	4a24      	ldr	r2, [pc, #144]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002888:	4b22      	ldr	r3, [pc, #136]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800288a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288c:	4a21      	ldr	r2, [pc, #132]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800288e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002892:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002894:	4b1f      	ldr	r3, [pc, #124]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	4a1e      	ldr	r2, [pc, #120]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 800289a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800289e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ac:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a18      	ldr	r2, [pc, #96]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80028b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fca8 	bl	800120c <HAL_GetTick>
 80028bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe fca4 	bl	800120c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e090      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x670>
 80028de:	e088      	b.n	80029f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 80028e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fc8e 	bl	800120c <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe fc8a 	bl	800120c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e076      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002906:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <HAL_RCC_OscConfig+0x6c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x6a4>
 8002912:	e06e      	b.n	80029f2 <HAL_RCC_OscConfig+0x7a2>
 8002914:	58024400 	.word	0x58024400
 8002918:	fffffc0c 	.word	0xfffffc0c
 800291c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002920:	4b36      	ldr	r3, [pc, #216]	@ (80029fc <HAL_RCC_OscConfig+0x7ac>)
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002926:	4b35      	ldr	r3, [pc, #212]	@ (80029fc <HAL_RCC_OscConfig+0x7ac>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	2b01      	cmp	r3, #1
 8002932:	d031      	beq.n	8002998 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f003 0203 	and.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d12a      	bne.n	8002998 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d122      	bne.n	8002998 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d11a      	bne.n	8002998 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	0a5b      	lsrs	r3, r3, #9
 8002966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d111      	bne.n	8002998 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	0c1b      	lsrs	r3, r3, #16
 8002978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d108      	bne.n	8002998 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	0e1b      	lsrs	r3, r3, #24
 800298a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002992:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e02b      	b.n	80029f4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800299c:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <HAL_RCC_OscConfig+0x7ac>)
 800299e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a0:	08db      	lsrs	r3, r3, #3
 80029a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d01f      	beq.n	80029f2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80029b2:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <HAL_RCC_OscConfig+0x7ac>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	4a11      	ldr	r2, [pc, #68]	@ (80029fc <HAL_RCC_OscConfig+0x7ac>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029be:	f7fe fc25 	bl	800120c <HAL_GetTick>
 80029c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80029c4:	bf00      	nop
 80029c6:	f7fe fc21 	bl	800120c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d0f9      	beq.n	80029c6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029d2:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <HAL_RCC_OscConfig+0x7ac>)
 80029d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <HAL_RCC_OscConfig+0x7b0>)
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029de:	00d2      	lsls	r2, r2, #3
 80029e0:	4906      	ldr	r1, [pc, #24]	@ (80029fc <HAL_RCC_OscConfig+0x7ac>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80029e6:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <HAL_RCC_OscConfig+0x7ac>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	4a04      	ldr	r2, [pc, #16]	@ (80029fc <HAL_RCC_OscConfig+0x7ac>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3730      	adds	r7, #48	@ 0x30
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	58024400 	.word	0x58024400
 8002a00:	ffff0007 	.word	0xffff0007

08002a04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e19c      	b.n	8002d52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b8a      	ldr	r3, [pc, #552]	@ (8002c44 <HAL_RCC_ClockConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d910      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b87      	ldr	r3, [pc, #540]	@ (8002c44 <HAL_RCC_ClockConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 020f 	bic.w	r2, r3, #15
 8002a2e:	4985      	ldr	r1, [pc, #532]	@ (8002c44 <HAL_RCC_ClockConfig+0x240>)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b83      	ldr	r3, [pc, #524]	@ (8002c44 <HAL_RCC_ClockConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e184      	b.n	8002d52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d010      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	4b7b      	ldr	r3, [pc, #492]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d908      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a64:	4b78      	ldr	r3, [pc, #480]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	4975      	ldr	r1, [pc, #468]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d010      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	4b70      	ldr	r3, [pc, #448]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d908      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a92:	4b6d      	ldr	r3, [pc, #436]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	496a      	ldr	r1, [pc, #424]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	4b64      	ldr	r3, [pc, #400]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d908      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ac0:	4b61      	ldr	r3, [pc, #388]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	495e      	ldr	r1, [pc, #376]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	4b59      	ldr	r3, [pc, #356]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d908      	bls.n	8002b00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002aee:	4b56      	ldr	r3, [pc, #344]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4953      	ldr	r1, [pc, #332]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d010      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	4b4d      	ldr	r3, [pc, #308]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d908      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f023 020f 	bic.w	r2, r3, #15
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4947      	ldr	r1, [pc, #284]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d055      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b3a:	4b43      	ldr	r3, [pc, #268]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4940      	ldr	r1, [pc, #256]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b54:	4b3c      	ldr	r3, [pc, #240]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d121      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0f6      	b.n	8002d52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d107      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b6c:	4b36      	ldr	r3, [pc, #216]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d115      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0ea      	b.n	8002d52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b84:	4b30      	ldr	r3, [pc, #192]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0de      	b.n	8002d52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b94:	4b2c      	ldr	r3, [pc, #176]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0d6      	b.n	8002d52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ba4:	4b28      	ldr	r3, [pc, #160]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f023 0207 	bic.w	r2, r3, #7
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4925      	ldr	r1, [pc, #148]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb6:	f7fe fb29 	bl	800120c <HAL_GetTick>
 8002bba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbe:	f7fe fb25 	bl	800120c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e0be      	b.n	8002d52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d1eb      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d010      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	4b14      	ldr	r3, [pc, #80]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d208      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c02:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f023 020f 	bic.w	r2, r3, #15
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	490e      	ldr	r1, [pc, #56]	@ (8002c48 <HAL_RCC_ClockConfig+0x244>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c14:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <HAL_RCC_ClockConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d214      	bcs.n	8002c4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <HAL_RCC_ClockConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 020f 	bic.w	r2, r3, #15
 8002c2a:	4906      	ldr	r1, [pc, #24]	@ (8002c44 <HAL_RCC_ClockConfig+0x240>)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <HAL_RCC_ClockConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e086      	b.n	8002d52 <HAL_RCC_ClockConfig+0x34e>
 8002c44:	52002000 	.word	0x52002000
 8002c48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d010      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d208      	bcs.n	8002c7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c68:	4b3c      	ldr	r3, [pc, #240]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	4939      	ldr	r1, [pc, #228]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d010      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	4b34      	ldr	r3, [pc, #208]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d208      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c96:	4b31      	ldr	r3, [pc, #196]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	492e      	ldr	r1, [pc, #184]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d010      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699a      	ldr	r2, [r3, #24]
 8002cb8:	4b28      	ldr	r3, [pc, #160]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d208      	bcs.n	8002cd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cc4:	4b25      	ldr	r3, [pc, #148]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	4922      	ldr	r1, [pc, #136]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69da      	ldr	r2, [r3, #28]
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d208      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4917      	ldr	r1, [pc, #92]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d04:	f000 f834 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	4912      	ldr	r1, [pc, #72]	@ (8002d60 <HAL_RCC_ClockConfig+0x35c>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d22:	4b0e      	ldr	r3, [pc, #56]	@ (8002d5c <HAL_RCC_ClockConfig+0x358>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d60 <HAL_RCC_ClockConfig+0x35c>)
 8002d2c:	5cd3      	ldrb	r3, [r2, r3]
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
 8002d38:	4a0a      	ldr	r2, [pc, #40]	@ (8002d64 <HAL_RCC_ClockConfig+0x360>)
 8002d3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d68 <HAL_RCC_ClockConfig+0x364>)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d42:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_RCC_ClockConfig+0x368>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fa16 	bl	8001178 <HAL_InitTick>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	080049c4 	.word	0x080049c4
 8002d64:	24000004 	.word	0x24000004
 8002d68:	24000000 	.word	0x24000000
 8002d6c:	24000008 	.word	0x24000008

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	@ 0x24
 8002d74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d76:	4bb3      	ldr	r3, [pc, #716]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d7e:	2b18      	cmp	r3, #24
 8002d80:	f200 8155 	bhi.w	800302e <HAL_RCC_GetSysClockFreq+0x2be>
 8002d84:	a201      	add	r2, pc, #4	@ (adr r2, 8002d8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8a:	bf00      	nop
 8002d8c:	08002df1 	.word	0x08002df1
 8002d90:	0800302f 	.word	0x0800302f
 8002d94:	0800302f 	.word	0x0800302f
 8002d98:	0800302f 	.word	0x0800302f
 8002d9c:	0800302f 	.word	0x0800302f
 8002da0:	0800302f 	.word	0x0800302f
 8002da4:	0800302f 	.word	0x0800302f
 8002da8:	0800302f 	.word	0x0800302f
 8002dac:	08002e17 	.word	0x08002e17
 8002db0:	0800302f 	.word	0x0800302f
 8002db4:	0800302f 	.word	0x0800302f
 8002db8:	0800302f 	.word	0x0800302f
 8002dbc:	0800302f 	.word	0x0800302f
 8002dc0:	0800302f 	.word	0x0800302f
 8002dc4:	0800302f 	.word	0x0800302f
 8002dc8:	0800302f 	.word	0x0800302f
 8002dcc:	08002e1d 	.word	0x08002e1d
 8002dd0:	0800302f 	.word	0x0800302f
 8002dd4:	0800302f 	.word	0x0800302f
 8002dd8:	0800302f 	.word	0x0800302f
 8002ddc:	0800302f 	.word	0x0800302f
 8002de0:	0800302f 	.word	0x0800302f
 8002de4:	0800302f 	.word	0x0800302f
 8002de8:	0800302f 	.word	0x0800302f
 8002dec:	08002e23 	.word	0x08002e23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002df0:	4b94      	ldr	r3, [pc, #592]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d009      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002dfc:	4b91      	ldr	r3, [pc, #580]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	08db      	lsrs	r3, r3, #3
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	4a90      	ldr	r2, [pc, #576]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e0e:	e111      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e10:	4b8d      	ldr	r3, [pc, #564]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e12:	61bb      	str	r3, [r7, #24]
      break;
 8002e14:	e10e      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e16:	4b8d      	ldr	r3, [pc, #564]	@ (800304c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e18:	61bb      	str	r3, [r7, #24]
      break;
 8002e1a:	e10b      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e1e:	61bb      	str	r3, [r7, #24]
      break;
 8002e20:	e108      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e22:	4b88      	ldr	r3, [pc, #544]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e2c:	4b85      	ldr	r3, [pc, #532]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e38:	4b82      	ldr	r3, [pc, #520]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e42:	4b80      	ldr	r3, [pc, #512]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e46:	08db      	lsrs	r3, r3, #3
 8002e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80e1 	beq.w	8003028 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	f000 8083 	beq.w	8002f74 <HAL_RCC_GetSysClockFreq+0x204>
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	f200 80a1 	bhi.w	8002fb8 <HAL_RCC_GetSysClockFreq+0x248>
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x114>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d056      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e82:	e099      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e84:	4b6f      	ldr	r3, [pc, #444]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02d      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e90:	4b6c      	ldr	r3, [pc, #432]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	4a6b      	ldr	r2, [pc, #428]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	ee07 3a90 	vmov	s15, r3
 8002ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eba:	4b62      	ldr	r3, [pc, #392]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ece:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002eea:	e087      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003058 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002efe:	4b51      	ldr	r3, [pc, #324]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f12:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f2e:	e065      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800305c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f42:	4b40      	ldr	r3, [pc, #256]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f56:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f72:	e043      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003060 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f86:	4b2f      	ldr	r3, [pc, #188]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f9a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fb6:	e021      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800305c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fca:	4b1e      	ldr	r3, [pc, #120]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fde:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ffa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	0a5b      	lsrs	r3, r3, #9
 8003002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003006:	3301      	adds	r3, #1
 8003008:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003014:	edd7 6a07 	vldr	s13, [r7, #28]
 8003018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003020:	ee17 3a90 	vmov	r3, s15
 8003024:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003026:	e005      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
      break;
 800302c:	e002      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800302e:	4b07      	ldr	r3, [pc, #28]	@ (800304c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003030:	61bb      	str	r3, [r7, #24]
      break;
 8003032:	bf00      	nop
  }

  return sysclockfreq;
 8003034:	69bb      	ldr	r3, [r7, #24]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	@ 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	58024400 	.word	0x58024400
 8003048:	03d09000 	.word	0x03d09000
 800304c:	003d0900 	.word	0x003d0900
 8003050:	017d7840 	.word	0x017d7840
 8003054:	46000000 	.word	0x46000000
 8003058:	4c742400 	.word	0x4c742400
 800305c:	4a742400 	.word	0x4a742400
 8003060:	4bbebc20 	.word	0x4bbebc20

08003064 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003068:	b0c6      	sub	sp, #280	@ 0x118
 800306a:	af00      	add	r7, sp, #0
 800306c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003070:	2300      	movs	r3, #0
 8003072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003076:	2300      	movs	r3, #0
 8003078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800307c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003088:	2500      	movs	r5, #0
 800308a:	ea54 0305 	orrs.w	r3, r4, r5
 800308e:	d049      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003096:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800309a:	d02f      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800309c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030a0:	d828      	bhi.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030a6:	d01a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030ac:	d822      	bhi.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030b6:	d007      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030b8:	e01c      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ba:	4bab      	ldr	r3, [pc, #684]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030be:	4aaa      	ldr	r2, [pc, #680]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030c6:	e01a      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030cc:	3308      	adds	r3, #8
 80030ce:	2102      	movs	r1, #2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f001 f967 	bl	80043a4 <RCCEx_PLL2_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030dc:	e00f      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e2:	3328      	adds	r3, #40	@ 0x28
 80030e4:	2102      	movs	r1, #2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 fa0e 	bl	8004508 <RCCEx_PLL3_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030f2:	e004      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030fa:	e000      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80030fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003106:	4b98      	ldr	r3, [pc, #608]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800310a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800310e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003114:	4a94      	ldr	r2, [pc, #592]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003116:	430b      	orrs	r3, r1
 8003118:	6513      	str	r3, [r2, #80]	@ 0x50
 800311a:	e003      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003120:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003130:	f04f 0900 	mov.w	r9, #0
 8003134:	ea58 0309 	orrs.w	r3, r8, r9
 8003138:	d047      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800313a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	2b04      	cmp	r3, #4
 8003142:	d82a      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003144:	a201      	add	r2, pc, #4	@ (adr r2, 800314c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	08003161 	.word	0x08003161
 8003150:	0800316f 	.word	0x0800316f
 8003154:	08003185 	.word	0x08003185
 8003158:	080031a3 	.word	0x080031a3
 800315c:	080031a3 	.word	0x080031a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003160:	4b81      	ldr	r3, [pc, #516]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	4a80      	ldr	r2, [pc, #512]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800316a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800316c:	e01a      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800316e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003172:	3308      	adds	r3, #8
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f001 f914 	bl	80043a4 <RCCEx_PLL2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003182:	e00f      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003188:	3328      	adds	r3, #40	@ 0x28
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f001 f9bb 	bl	8004508 <RCCEx_PLL3_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003198:	e004      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031a0:	e000      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80031a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031ac:	4b6e      	ldr	r3, [pc, #440]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b0:	f023 0107 	bic.w	r1, r3, #7
 80031b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031bc:	430b      	orrs	r3, r1
 80031be:	6513      	str	r3, [r2, #80]	@ 0x50
 80031c0:	e003      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80031d6:	f04f 0b00 	mov.w	fp, #0
 80031da:	ea5a 030b 	orrs.w	r3, sl, fp
 80031de:	d05b      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80031e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031e8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80031ec:	d03b      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80031ee:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80031f2:	d834      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031f8:	d037      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80031fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031fe:	d82e      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003200:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003204:	d033      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003206:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800320a:	d828      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800320c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003210:	d01a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003212:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003216:	d822      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800321c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003220:	d007      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003222:	e01c      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003224:	4b50      	ldr	r3, [pc, #320]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003228:	4a4f      	ldr	r2, [pc, #316]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800322a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800322e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003230:	e01e      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003236:	3308      	adds	r3, #8
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f001 f8b2 	bl	80043a4 <RCCEx_PLL2_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003246:	e013      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800324c:	3328      	adds	r3, #40	@ 0x28
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f001 f959 	bl	8004508 <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800325c:	e008      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003264:	e004      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800326e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003278:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003284:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003288:	4a37      	ldr	r2, [pc, #220]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800328a:	430b      	orrs	r3, r1
 800328c:	6593      	str	r3, [r2, #88]	@ 0x58
 800328e:	e003      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003294:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80032a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80032ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80032b2:	460b      	mov	r3, r1
 80032b4:	4313      	orrs	r3, r2
 80032b6:	d05d      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80032b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032c0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80032c4:	d03b      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80032c6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80032ca:	d834      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032d0:	d037      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80032d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032d6:	d82e      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032dc:	d033      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80032de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032e2:	d828      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032e8:	d01a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80032ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032ee:	d822      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80032f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f8:	d007      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80032fa:	e01c      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	4a19      	ldr	r2, [pc, #100]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003308:	e01e      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800330a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800330e:	3308      	adds	r3, #8
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f001 f846 	bl	80043a4 <RCCEx_PLL2_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800331e:	e013      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003324:	3328      	adds	r3, #40	@ 0x28
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f001 f8ed 	bl	8004508 <RCCEx_PLL3_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003334:	e008      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800333c:	e004      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800333e:	bf00      	nop
 8003340:	e002      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10d      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800335c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003360:	4a01      	ldr	r2, [pc, #4]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003362:	430b      	orrs	r3, r1
 8003364:	6593      	str	r3, [r2, #88]	@ 0x58
 8003366:	e005      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003368:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003370:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003380:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800338a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800338e:	460b      	mov	r3, r1
 8003390:	4313      	orrs	r3, r2
 8003392:	d03a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339a:	2b30      	cmp	r3, #48	@ 0x30
 800339c:	d01f      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800339e:	2b30      	cmp	r3, #48	@ 0x30
 80033a0:	d819      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d00c      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d815      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d019      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d111      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b2:	4baa      	ldr	r3, [pc, #680]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b6:	4aa9      	ldr	r2, [pc, #676]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80033be:	e011      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c4:	3308      	adds	r3, #8
 80033c6:	2102      	movs	r1, #2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 ffeb 	bl	80043a4 <RCCEx_PLL2_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80033d4:	e006      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033dc:	e002      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80033e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033ec:	4b9b      	ldr	r3, [pc, #620]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80033f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fa:	4a98      	ldr	r2, [pc, #608]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033fc:	430b      	orrs	r3, r1
 80033fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003400:	e003      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003402:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003406:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800340a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003416:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800341a:	2300      	movs	r3, #0
 800341c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003420:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003424:	460b      	mov	r3, r1
 8003426:	4313      	orrs	r3, r2
 8003428:	d051      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800342a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003434:	d035      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800343a:	d82e      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800343c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003440:	d031      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003442:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003446:	d828      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344c:	d01a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800344e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003452:	d822      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800345c:	d007      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800345e:	e01c      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003460:	4b7e      	ldr	r3, [pc, #504]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	4a7d      	ldr	r2, [pc, #500]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800346a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800346c:	e01c      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800346e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003472:	3308      	adds	r3, #8
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f000 ff94 	bl	80043a4 <RCCEx_PLL2_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003482:	e011      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003488:	3328      	adds	r3, #40	@ 0x28
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f001 f83b 	bl	8004508 <RCCEx_PLL3_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003498:	e006      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034a0:	e002      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80034a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034b0:	4b6a      	ldr	r3, [pc, #424]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80034b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034be:	4a67      	ldr	r2, [pc, #412]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80034c4:	e003      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80034da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4313      	orrs	r3, r2
 80034ec:	d053      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80034ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034f8:	d033      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80034fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034fe:	d82c      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003500:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003504:	d02f      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003506:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800350a:	d826      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800350c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003510:	d02b      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003512:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003516:	d820      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800351c:	d012      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800351e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003522:	d81a      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d022      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352c:	d115      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800352e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003532:	3308      	adds	r3, #8
 8003534:	2101      	movs	r1, #1
 8003536:	4618      	mov	r0, r3
 8003538:	f000 ff34 	bl	80043a4 <RCCEx_PLL2_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003542:	e015      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003548:	3328      	adds	r3, #40	@ 0x28
 800354a:	2101      	movs	r1, #1
 800354c:	4618      	mov	r0, r3
 800354e:	f000 ffdb 	bl	8004508 <RCCEx_PLL3_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003558:	e00a      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003560:	e006      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003562:	bf00      	nop
 8003564:	e004      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003566:	bf00      	nop
 8003568:	e002      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800356a:	bf00      	nop
 800356c:	e000      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800356e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003578:	4b38      	ldr	r3, [pc, #224]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800357a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003586:	4a35      	ldr	r2, [pc, #212]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003588:	430b      	orrs	r3, r1
 800358a:	6513      	str	r3, [r2, #80]	@ 0x50
 800358c:	e003      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003592:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80035a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80035ac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035b0:	460b      	mov	r3, r1
 80035b2:	4313      	orrs	r3, r2
 80035b4:	d058      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80035b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035c2:	d033      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80035c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035c8:	d82c      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ce:	d02f      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d4:	d826      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035da:	d02b      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80035dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035e0:	d820      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035e6:	d012      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80035e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035ec:	d81a      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d022      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035f6:	d115      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035fc:	3308      	adds	r3, #8
 80035fe:	2101      	movs	r1, #1
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fecf 	bl	80043a4 <RCCEx_PLL2_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800360c:	e015      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800360e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003612:	3328      	adds	r3, #40	@ 0x28
 8003614:	2101      	movs	r1, #1
 8003616:	4618      	mov	r0, r3
 8003618:	f000 ff76 	bl	8004508 <RCCEx_PLL3_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003622:	e00a      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800362a:	e006      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800362c:	bf00      	nop
 800362e:	e004      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003630:	bf00      	nop
 8003632:	e002      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003634:	bf00      	nop
 8003636:	e000      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10e      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003642:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800364a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800364e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003652:	4a02      	ldr	r2, [pc, #8]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003654:	430b      	orrs	r3, r1
 8003656:	6593      	str	r3, [r2, #88]	@ 0x58
 8003658:	e006      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800365a:	bf00      	nop
 800365c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003664:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003674:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800367e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003682:	460b      	mov	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	d037      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800368c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800368e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003692:	d00e      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003698:	d816      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800369e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036a2:	d111      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a4:	4bc4      	ldr	r3, [pc, #784]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	4ac3      	ldr	r2, [pc, #780]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036b0:	e00f      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b6:	3308      	adds	r3, #8
 80036b8:	2101      	movs	r1, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fe72 	bl	80043a4 <RCCEx_PLL2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036c6:	e004      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036ce:	e000      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80036d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036da:	4bb7      	ldr	r3, [pc, #732]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80036e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e8:	4ab3      	ldr	r2, [pc, #716]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036ea:	430b      	orrs	r3, r1
 80036ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80036ee:	e003      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003704:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800370e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003712:	460b      	mov	r3, r1
 8003714:	4313      	orrs	r3, r2
 8003716:	d039      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371e:	2b03      	cmp	r3, #3
 8003720:	d81c      	bhi.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003722:	a201      	add	r2, pc, #4	@ (adr r2, 8003728 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003765 	.word	0x08003765
 800372c:	08003739 	.word	0x08003739
 8003730:	08003747 	.word	0x08003747
 8003734:	08003765 	.word	0x08003765
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003738:	4b9f      	ldr	r3, [pc, #636]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	4a9e      	ldr	r2, [pc, #632]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003744:	e00f      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800374a:	3308      	adds	r3, #8
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fe28 	bl	80043a4 <RCCEx_PLL2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800375a:	e004      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003766:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800376e:	4b92      	ldr	r3, [pc, #584]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003772:	f023 0103 	bic.w	r1, r3, #3
 8003776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800377c:	4a8e      	ldr	r2, [pc, #568]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800377e:	430b      	orrs	r3, r1
 8003780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003782:	e003      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003784:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003788:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800378c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003798:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f000 8099 	beq.w	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ae:	4b83      	ldr	r3, [pc, #524]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a82      	ldr	r2, [pc, #520]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037ba:	f7fd fd27 	bl	800120c <HAL_GetTick>
 80037be:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037c2:	e00b      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c4:	f7fd fd22 	bl	800120c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b64      	cmp	r3, #100	@ 0x64
 80037d2:	d903      	bls.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037da:	e005      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037dc:	4b77      	ldr	r3, [pc, #476]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ed      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80037e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d173      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80037f0:	4b71      	ldr	r3, [pc, #452]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037fc:	4053      	eors	r3, r2
 80037fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003802:	2b00      	cmp	r3, #0
 8003804:	d015      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003806:	4b6c      	ldr	r3, [pc, #432]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003812:	4b69      	ldr	r3, [pc, #420]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003816:	4a68      	ldr	r2, [pc, #416]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800381e:	4b66      	ldr	r3, [pc, #408]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	4a65      	ldr	r2, [pc, #404]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003828:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800382a:	4a63      	ldr	r2, [pc, #396]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800382c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003830:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800383a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383e:	d118      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fd fce4 	bl	800120c <HAL_GetTick>
 8003844:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003848:	e00d      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fd fcdf 	bl	800120c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003854:	1ad2      	subs	r2, r2, r3
 8003856:	f241 3388 	movw	r3, #5000	@ 0x1388
 800385a:	429a      	cmp	r2, r3
 800385c:	d903      	bls.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003864:	e005      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003866:	4b54      	ldr	r3, [pc, #336]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0eb      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003872:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003876:	2b00      	cmp	r3, #0
 8003878:	d129      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800387e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800388a:	d10e      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800388c:	4b4a      	ldr	r3, [pc, #296]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800389c:	091a      	lsrs	r2, r3, #4
 800389e:	4b48      	ldr	r3, [pc, #288]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	4a45      	ldr	r2, [pc, #276]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6113      	str	r3, [r2, #16]
 80038a8:	e005      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80038aa:	4b43      	ldr	r3, [pc, #268]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	4a42      	ldr	r2, [pc, #264]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038b4:	6113      	str	r3, [r2, #16]
 80038b6:	4b40      	ldr	r3, [pc, #256]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80038ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c6:	4a3c      	ldr	r2, [pc, #240]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80038cc:	e008      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80038d6:	e003      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80038e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f002 0301 	and.w	r3, r2, #1
 80038ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80038f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80038fa:	460b      	mov	r3, r1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f000 808f 	beq.w	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003906:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003908:	2b28      	cmp	r3, #40	@ 0x28
 800390a:	d871      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800390c:	a201      	add	r2, pc, #4	@ (adr r2, 8003914 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	080039f9 	.word	0x080039f9
 8003918:	080039f1 	.word	0x080039f1
 800391c:	080039f1 	.word	0x080039f1
 8003920:	080039f1 	.word	0x080039f1
 8003924:	080039f1 	.word	0x080039f1
 8003928:	080039f1 	.word	0x080039f1
 800392c:	080039f1 	.word	0x080039f1
 8003930:	080039f1 	.word	0x080039f1
 8003934:	080039c5 	.word	0x080039c5
 8003938:	080039f1 	.word	0x080039f1
 800393c:	080039f1 	.word	0x080039f1
 8003940:	080039f1 	.word	0x080039f1
 8003944:	080039f1 	.word	0x080039f1
 8003948:	080039f1 	.word	0x080039f1
 800394c:	080039f1 	.word	0x080039f1
 8003950:	080039f1 	.word	0x080039f1
 8003954:	080039db 	.word	0x080039db
 8003958:	080039f1 	.word	0x080039f1
 800395c:	080039f1 	.word	0x080039f1
 8003960:	080039f1 	.word	0x080039f1
 8003964:	080039f1 	.word	0x080039f1
 8003968:	080039f1 	.word	0x080039f1
 800396c:	080039f1 	.word	0x080039f1
 8003970:	080039f1 	.word	0x080039f1
 8003974:	080039f9 	.word	0x080039f9
 8003978:	080039f1 	.word	0x080039f1
 800397c:	080039f1 	.word	0x080039f1
 8003980:	080039f1 	.word	0x080039f1
 8003984:	080039f1 	.word	0x080039f1
 8003988:	080039f1 	.word	0x080039f1
 800398c:	080039f1 	.word	0x080039f1
 8003990:	080039f1 	.word	0x080039f1
 8003994:	080039f9 	.word	0x080039f9
 8003998:	080039f1 	.word	0x080039f1
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	080039f1 	.word	0x080039f1
 80039a4:	080039f1 	.word	0x080039f1
 80039a8:	080039f1 	.word	0x080039f1
 80039ac:	080039f1 	.word	0x080039f1
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	080039f9 	.word	0x080039f9
 80039b8:	58024400 	.word	0x58024400
 80039bc:	58024800 	.word	0x58024800
 80039c0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c8:	3308      	adds	r3, #8
 80039ca:	2101      	movs	r1, #1
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fce9 	bl	80043a4 <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80039d8:	e00f      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039de:	3328      	adds	r3, #40	@ 0x28
 80039e0:	2101      	movs	r1, #1
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fd90 	bl	8004508 <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80039ee:	e004      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039f6:	e000      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80039f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a02:	4bbf      	ldr	r3, [pc, #764]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a06:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a10:	4abb      	ldr	r2, [pc, #748]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f002 0302 	and.w	r3, r2, #2
 8003a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	d041      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d824      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a50 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a9d 	.word	0x08003a9d
 8003a54:	08003a69 	.word	0x08003a69
 8003a58:	08003a7f 	.word	0x08003a7f
 8003a5c:	08003a9d 	.word	0x08003a9d
 8003a60:	08003a9d 	.word	0x08003a9d
 8003a64:	08003a9d 	.word	0x08003a9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fc97 	bl	80043a4 <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a7c:	e00f      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a82:	3328      	adds	r3, #40	@ 0x28
 8003a84:	2101      	movs	r1, #1
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fd3e 	bl	8004508 <RCCEx_PLL3_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a92:	e004      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a9a:	e000      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003aa6:	4b96      	ldr	r3, [pc, #600]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aaa:	f023 0107 	bic.w	r1, r3, #7
 8003aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab4:	4a92      	ldr	r2, [pc, #584]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003aba:	e003      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ac0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f002 0304 	and.w	r3, r2, #4
 8003ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ada:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	d044      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aec:	2b05      	cmp	r3, #5
 8003aee:	d825      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003af0:	a201      	add	r2, pc, #4	@ (adr r2, 8003af8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b45 	.word	0x08003b45
 8003afc:	08003b11 	.word	0x08003b11
 8003b00:	08003b27 	.word	0x08003b27
 8003b04:	08003b45 	.word	0x08003b45
 8003b08:	08003b45 	.word	0x08003b45
 8003b0c:	08003b45 	.word	0x08003b45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b14:	3308      	adds	r3, #8
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fc43 	bl	80043a4 <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b24:	e00f      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2a:	3328      	adds	r3, #40	@ 0x28
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fcea 	bl	8004508 <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b3a:	e004      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b42:	e000      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10b      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b52:	f023 0107 	bic.w	r1, r3, #7
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5e:	4a68      	ldr	r2, [pc, #416]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b64:	e003      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	f002 0320 	and.w	r3, r2, #32
 8003b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003b84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	d055      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b9a:	d033      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ba0:	d82c      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba6:	d02f      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bac:	d826      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bb2:	d02b      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003bb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bb8:	d820      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bbe:	d012      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bc4:	d81a      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d022      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bce:	d115      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fbe3 	bl	80043a4 <RCCEx_PLL2_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003be4:	e015      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bea:	3328      	adds	r3, #40	@ 0x28
 8003bec:	2102      	movs	r1, #2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fc8a 	bl	8004508 <RCCEx_PLL3_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c02:	e006      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c04:	bf00      	nop
 8003c06:	e004      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c08:	bf00      	nop
 8003c0a:	e002      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10b      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c1a:	4b39      	ldr	r3, [pc, #228]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c2a:	4a35      	ldr	r2, [pc, #212]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c30:	e003      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003c46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c50:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003c54:	460b      	mov	r3, r1
 8003c56:	4313      	orrs	r3, r2
 8003c58:	d058      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c62:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c66:	d033      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003c68:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c6c:	d82c      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c72:	d02f      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c78:	d826      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c7e:	d02b      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003c80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c84:	d820      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c8a:	d012      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c90:	d81a      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d022      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9a:	d115      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fb7d 	bl	80043a4 <RCCEx_PLL2_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cb0:	e015      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb6:	3328      	adds	r3, #40	@ 0x28
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fc24 	bl	8004508 <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cc6:	e00a      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cce:	e006      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cd0:	bf00      	nop
 8003cd2:	e004      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cd4:	bf00      	nop
 8003cd6:	e002      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10e      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce6:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cf6:	4a02      	ldr	r2, [pc, #8]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cfc:	e006      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003cfe:	bf00      	nop
 8003d00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003d18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d055      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d34:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d38:	d033      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003d3a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d3e:	d82c      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d44:	d02f      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003d46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d4a:	d826      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d4c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d50:	d02b      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003d52:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d56:	d820      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d5c:	d012      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003d5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d62:	d81a      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d022      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6c:	d115      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d72:	3308      	adds	r3, #8
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fb14 	bl	80043a4 <RCCEx_PLL2_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d82:	e015      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d88:	3328      	adds	r3, #40	@ 0x28
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fbbb 	bl	8004508 <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d98:	e00a      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003da0:	e006      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003da2:	bf00      	nop
 8003da4:	e004      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10b      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003db8:	4ba0      	ldr	r3, [pc, #640]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dc8:	4a9c      	ldr	r2, [pc, #624]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dce:	e003      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f002 0308 	and.w	r3, r2, #8
 8003de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003dee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003df2:	460b      	mov	r3, r1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	d01e      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0a:	3328      	adds	r3, #40	@ 0x28
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fb7a 	bl	8004508 <RCCEx_PLL3_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003e20:	4b86      	ldr	r3, [pc, #536]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e24:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e30:	4a82      	ldr	r2, [pc, #520]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e32:	430b      	orrs	r3, r1
 8003e34:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f002 0310 	and.w	r3, r2, #16
 8003e42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e4c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003e50:	460b      	mov	r3, r1
 8003e52:	4313      	orrs	r3, r2
 8003e54:	d01e      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e62:	d10c      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e68:	3328      	adds	r3, #40	@ 0x28
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fb4b 	bl	8004508 <RCCEx_PLL3_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e8e:	4a6b      	ldr	r2, [pc, #428]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ea6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	d03e      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ebc:	d022      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003ebe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ec2:	d81b      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003ece:	e015      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fa63 	bl	80043a4 <RCCEx_PLL2_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ee4:	e00f      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eea:	3328      	adds	r3, #40	@ 0x28
 8003eec:	2102      	movs	r1, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fb0a 	bl	8004508 <RCCEx_PLL3_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003efa:	e004      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f02:	e000      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f1e:	4a47      	ldr	r2, [pc, #284]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f24:	e003      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003f44:	460b      	mov	r3, r1
 8003f46:	4313      	orrs	r3, r2
 8003f48:	d03b      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f56:	d01f      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003f58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f5c:	d818      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f62:	d003      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003f64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f68:	d007      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003f6a:	e011      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f6c:	4b33      	ldr	r3, [pc, #204]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f70:	4a32      	ldr	r2, [pc, #200]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f78:	e00f      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7e:	3328      	adds	r3, #40	@ 0x28
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fac0 	bl	8004508 <RCCEx_PLL3_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f8e:	e004      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fa2:	4b26      	ldr	r3, [pc, #152]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb2:	4a22      	ldr	r2, [pc, #136]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fb8:	e003      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003fce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fd4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	d034      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fec:	d007      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003fee:	e011      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff0:	4b12      	ldr	r3, [pc, #72]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	4a11      	ldr	r2, [pc, #68]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ffc:	e00e      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004002:	3308      	adds	r3, #8
 8004004:	2102      	movs	r1, #2
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f9cc 	bl	80043a4 <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004012:	e003      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800401a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10d      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004024:	4b05      	ldr	r3, [pc, #20]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004028:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004032:	4a02      	ldr	r2, [pc, #8]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004034:	430b      	orrs	r3, r1
 8004036:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004038:	e006      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800403a:	bf00      	nop
 800403c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004044:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004054:	663b      	str	r3, [r7, #96]	@ 0x60
 8004056:	2300      	movs	r3, #0
 8004058:	667b      	str	r3, [r7, #100]	@ 0x64
 800405a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800405e:	460b      	mov	r3, r1
 8004060:	4313      	orrs	r3, r2
 8004062:	d00c      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004068:	3328      	adds	r3, #40	@ 0x28
 800406a:	2102      	movs	r1, #2
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fa4b 	bl	8004508 <RCCEx_PLL3_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800407e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800408a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800408c:	2300      	movs	r3, #0
 800408e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004090:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004094:	460b      	mov	r3, r1
 8004096:	4313      	orrs	r3, r2
 8004098:	d036      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800409a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800409e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040a4:	d018      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80040a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040aa:	d811      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80040ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b0:	d014      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80040b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b6:	d80b      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d011      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80040bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c0:	d106      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c2:	4bb7      	ldr	r3, [pc, #732]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	4ab6      	ldr	r2, [pc, #728]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80040ce:	e008      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040d6:	e004      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040d8:	bf00      	nop
 80040da:	e002      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040dc:	bf00      	nop
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040ea:	4bad      	ldr	r3, [pc, #692]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040f8:	4aa9      	ldr	r2, [pc, #676]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040fa:	430b      	orrs	r3, r1
 80040fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80040fe:	e003      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004104:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004114:	653b      	str	r3, [r7, #80]	@ 0x50
 8004116:	2300      	movs	r3, #0
 8004118:	657b      	str	r3, [r7, #84]	@ 0x54
 800411a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800411e:	460b      	mov	r3, r1
 8004120:	4313      	orrs	r3, r2
 8004122:	d009      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004124:	4b9e      	ldr	r3, [pc, #632]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004128:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800412c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004132:	4a9b      	ldr	r2, [pc, #620]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004134:	430b      	orrs	r3, r1
 8004136:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004146:	2300      	movs	r3, #0
 8004148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800414e:	460b      	mov	r3, r1
 8004150:	4313      	orrs	r3, r2
 8004152:	d009      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004154:	4b92      	ldr	r3, [pc, #584]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004158:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800415c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004160:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004162:	4a8f      	ldr	r2, [pc, #572]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004164:	430b      	orrs	r3, r1
 8004166:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004174:	643b      	str	r3, [r7, #64]	@ 0x40
 8004176:	2300      	movs	r3, #0
 8004178:	647b      	str	r3, [r7, #68]	@ 0x44
 800417a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004184:	4b86      	ldr	r3, [pc, #536]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	4a85      	ldr	r2, [pc, #532]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800418a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800418e:	6113      	str	r3, [r2, #16]
 8004190:	4b83      	ldr	r3, [pc, #524]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004192:	6919      	ldr	r1, [r3, #16]
 8004194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004198:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800419c:	4a80      	ldr	r2, [pc, #512]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800419e:	430b      	orrs	r3, r1
 80041a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80041ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041b0:	2300      	movs	r3, #0
 80041b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80041b8:	460b      	mov	r3, r1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041be:	4b78      	ldr	r3, [pc, #480]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80041c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041cc:	4a74      	ldr	r2, [pc, #464]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ce:	430b      	orrs	r3, r1
 80041d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
 80041e0:	2300      	movs	r3, #0
 80041e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80041e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80041e8:	460b      	mov	r3, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041ee:	4b6c      	ldr	r3, [pc, #432]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80041f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	4a68      	ldr	r2, [pc, #416]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004200:	430b      	orrs	r3, r1
 8004202:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	2100      	movs	r1, #0
 800420e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004216:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800421a:	460b      	mov	r3, r1
 800421c:	4313      	orrs	r3, r2
 800421e:	d011      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004224:	3308      	adds	r3, #8
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f000 f8bb 	bl	80043a4 <RCCEx_PLL2_Config>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004234:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004240:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	2100      	movs	r1, #0
 800424e:	6239      	str	r1, [r7, #32]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
 8004256:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800425a:	460b      	mov	r3, r1
 800425c:	4313      	orrs	r3, r2
 800425e:	d011      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004264:	3308      	adds	r3, #8
 8004266:	2101      	movs	r1, #1
 8004268:	4618      	mov	r0, r3
 800426a:	f000 f89b 	bl	80043a4 <RCCEx_PLL2_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004280:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	2100      	movs	r1, #0
 800428e:	61b9      	str	r1, [r7, #24]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800429a:	460b      	mov	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	d011      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a4:	3308      	adds	r3, #8
 80042a6:	2102      	movs	r1, #2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 f87b 	bl	80043a4 <RCCEx_PLL2_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80042c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	2100      	movs	r1, #0
 80042ce:	6139      	str	r1, [r7, #16]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80042da:	460b      	mov	r3, r1
 80042dc:	4313      	orrs	r3, r2
 80042de:	d011      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e4:	3328      	adds	r3, #40	@ 0x28
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 f90d 	bl	8004508 <RCCEx_PLL3_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80042f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004300:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	2100      	movs	r1, #0
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800431a:	460b      	mov	r3, r1
 800431c:	4313      	orrs	r3, r2
 800431e:	d011      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004324:	3328      	adds	r3, #40	@ 0x28
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f000 f8ed 	bl	8004508 <RCCEx_PLL3_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004340:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	2100      	movs	r1, #0
 800434e:	6039      	str	r1, [r7, #0]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	e9d7 1200 	ldrd	r1, r2, [r7]
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	d011      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004364:	3328      	adds	r3, #40	@ 0x28
 8004366:	2102      	movs	r1, #2
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f8cd 	bl	8004508 <RCCEx_PLL3_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004380:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004384:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	e000      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
}
 8004392:	4618      	mov	r0, r3
 8004394:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004398:	46bd      	mov	sp, r7
 800439a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800439e:	bf00      	nop
 80043a0:	58024400 	.word	0x58024400

080043a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043b2:	4b53      	ldr	r3, [pc, #332]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d101      	bne.n	80043c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e099      	b.n	80044f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80043c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ce:	f7fc ff1d 	bl	800120c <HAL_GetTick>
 80043d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043d4:	e008      	b.n	80043e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043d6:	f7fc ff19 	bl	800120c <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e086      	b.n	80044f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043e8:	4b45      	ldr	r3, [pc, #276]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f0      	bne.n	80043d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043f4:	4b42      	ldr	r3, [pc, #264]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	031b      	lsls	r3, r3, #12
 8004402:	493f      	ldr	r1, [pc, #252]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004404:	4313      	orrs	r3, r2
 8004406:	628b      	str	r3, [r1, #40]	@ 0x28
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	3b01      	subs	r3, #1
 800440e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	3b01      	subs	r3, #1
 8004418:	025b      	lsls	r3, r3, #9
 800441a:	b29b      	uxth	r3, r3
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	3b01      	subs	r3, #1
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	3b01      	subs	r3, #1
 8004432:	061b      	lsls	r3, r3, #24
 8004434:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004438:	4931      	ldr	r1, [pc, #196]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800443e:	4b30      	ldr	r3, [pc, #192]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	492d      	ldr	r1, [pc, #180]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004450:	4b2b      	ldr	r3, [pc, #172]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	f023 0220 	bic.w	r2, r3, #32
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	4928      	ldr	r1, [pc, #160]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 800445e:	4313      	orrs	r3, r2
 8004460:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004462:	4b27      	ldr	r3, [pc, #156]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	4a26      	ldr	r2, [pc, #152]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004468:	f023 0310 	bic.w	r3, r3, #16
 800446c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800446e:	4b24      	ldr	r3, [pc, #144]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004472:	4b24      	ldr	r3, [pc, #144]	@ (8004504 <RCCEx_PLL2_Config+0x160>)
 8004474:	4013      	ands	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	69d2      	ldr	r2, [r2, #28]
 800447a:	00d2      	lsls	r2, r2, #3
 800447c:	4920      	ldr	r1, [pc, #128]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 800447e:	4313      	orrs	r3, r2
 8004480:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004482:	4b1f      	ldr	r3, [pc, #124]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	4a1e      	ldr	r2, [pc, #120]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004488:	f043 0310 	orr.w	r3, r3, #16
 800448c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004494:	4b1a      	ldr	r3, [pc, #104]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004498:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 800449a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800449e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044a0:	e00f      	b.n	80044c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044a8:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ac:	4a14      	ldr	r2, [pc, #80]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044b4:	e005      	b.n	80044c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044b6:	4b12      	ldr	r3, [pc, #72]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	4a11      	ldr	r2, [pc, #68]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80044c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ce:	f7fc fe9d 	bl	800120c <HAL_GetTick>
 80044d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044d4:	e008      	b.n	80044e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044d6:	f7fc fe99 	bl	800120c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e006      	b.n	80044f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	58024400 	.word	0x58024400
 8004504:	ffff0007 	.word	0xffff0007

08004508 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004516:	4b53      	ldr	r3, [pc, #332]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b03      	cmp	r3, #3
 8004520:	d101      	bne.n	8004526 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e099      	b.n	800465a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004526:	4b4f      	ldr	r3, [pc, #316]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a4e      	ldr	r2, [pc, #312]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800452c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004532:	f7fc fe6b 	bl	800120c <HAL_GetTick>
 8004536:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004538:	e008      	b.n	800454c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800453a:	f7fc fe67 	bl	800120c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e086      	b.n	800465a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800454c:	4b45      	ldr	r3, [pc, #276]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004558:	4b42      	ldr	r3, [pc, #264]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	051b      	lsls	r3, r3, #20
 8004566:	493f      	ldr	r1, [pc, #252]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004568:	4313      	orrs	r3, r2
 800456a:	628b      	str	r3, [r1, #40]	@ 0x28
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	3b01      	subs	r3, #1
 8004572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	3b01      	subs	r3, #1
 800457c:	025b      	lsls	r3, r3, #9
 800457e:	b29b      	uxth	r3, r3
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	3b01      	subs	r3, #1
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	3b01      	subs	r3, #1
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800459c:	4931      	ldr	r1, [pc, #196]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045a2:	4b30      	ldr	r3, [pc, #192]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	492d      	ldr	r1, [pc, #180]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	4928      	ldr	r1, [pc, #160]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80045c6:	4b27      	ldr	r3, [pc, #156]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	4a26      	ldr	r2, [pc, #152]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80045d2:	4b24      	ldr	r3, [pc, #144]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045d6:	4b24      	ldr	r3, [pc, #144]	@ (8004668 <RCCEx_PLL3_Config+0x160>)
 80045d8:	4013      	ands	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	69d2      	ldr	r2, [r2, #28]
 80045de:	00d2      	lsls	r2, r2, #3
 80045e0:	4920      	ldr	r1, [pc, #128]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	4a19      	ldr	r2, [pc, #100]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004602:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004604:	e00f      	b.n	8004626 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d106      	bne.n	800461a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800460c:	4b15      	ldr	r3, [pc, #84]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	4a14      	ldr	r2, [pc, #80]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004612:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004616:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004618:	e005      	b.n	8004626 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800461a:	4b12      	ldr	r3, [pc, #72]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	4a11      	ldr	r2, [pc, #68]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004620:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004624:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004626:	4b0f      	ldr	r3, [pc, #60]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a0e      	ldr	r2, [pc, #56]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004632:	f7fc fdeb 	bl	800120c <HAL_GetTick>
 8004636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004638:	e008      	b.n	800464c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800463a:	f7fc fde7 	bl	800120c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e006      	b.n	800465a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800464c:	4b05      	ldr	r3, [pc, #20]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	58024400 	.word	0x58024400
 8004668:	ffff0007 	.word	0xffff0007

0800466c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e10f      	b.n	800489e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a87      	ldr	r2, [pc, #540]	@ (80048a8 <HAL_SPI_Init+0x23c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00f      	beq.n	80046ae <HAL_SPI_Init+0x42>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a86      	ldr	r2, [pc, #536]	@ (80048ac <HAL_SPI_Init+0x240>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00a      	beq.n	80046ae <HAL_SPI_Init+0x42>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a84      	ldr	r2, [pc, #528]	@ (80048b0 <HAL_SPI_Init+0x244>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d005      	beq.n	80046ae <HAL_SPI_Init+0x42>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b0f      	cmp	r3, #15
 80046a8:	d901      	bls.n	80046ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e0f7      	b.n	800489e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f900 	bl	80048b4 <SPI_GetPacketSize>
 80046b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a7b      	ldr	r2, [pc, #492]	@ (80048a8 <HAL_SPI_Init+0x23c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00c      	beq.n	80046da <HAL_SPI_Init+0x6e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a79      	ldr	r2, [pc, #484]	@ (80048ac <HAL_SPI_Init+0x240>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d007      	beq.n	80046da <HAL_SPI_Init+0x6e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a78      	ldr	r2, [pc, #480]	@ (80048b0 <HAL_SPI_Init+0x244>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d002      	beq.n	80046da <HAL_SPI_Init+0x6e>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d811      	bhi.n	80046fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80046de:	4a72      	ldr	r2, [pc, #456]	@ (80048a8 <HAL_SPI_Init+0x23c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a70      	ldr	r2, [pc, #448]	@ (80048ac <HAL_SPI_Init+0x240>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_SPI_Init+0x8c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6f      	ldr	r2, [pc, #444]	@ (80048b0 <HAL_SPI_Init+0x244>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d104      	bne.n	8004702 <HAL_SPI_Init+0x96>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d901      	bls.n	8004702 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0cd      	b.n	800489e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fc faa0 	bl	8000c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800473e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004748:	d119      	bne.n	800477e <HAL_SPI_Init+0x112>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004752:	d103      	bne.n	800475c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10c      	bne.n	800477e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800476c:	d107      	bne.n	800477e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800477c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00f      	beq.n	80047aa <HAL_SPI_Init+0x13e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b06      	cmp	r3, #6
 8004790:	d90b      	bls.n	80047aa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e007      	b.n	80047ba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69da      	ldr	r2, [r3, #28]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c2:	431a      	orrs	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047cc:	ea42 0103 	orr.w	r1, r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800481a:	ea42 0103 	orr.w	r1, r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d113      	bne.n	800485a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004844:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004858:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40013000 	.word	0x40013000
 80048ac:	40003800 	.word	0x40003800
 80048b0:	40003c00 	.word	0x40003c00

080048b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	3301      	adds	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	3307      	adds	r3, #7
 80048d2:	08db      	lsrs	r3, r3, #3
 80048d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	fb02 f303 	mul.w	r3, r2, r3
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <memset>:
 80048ea:	4402      	add	r2, r0
 80048ec:	4603      	mov	r3, r0
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d100      	bne.n	80048f4 <memset+0xa>
 80048f2:	4770      	bx	lr
 80048f4:	f803 1b01 	strb.w	r1, [r3], #1
 80048f8:	e7f9      	b.n	80048ee <memset+0x4>
	...

080048fc <__libc_init_array>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004934 <__libc_init_array+0x38>)
 8004900:	4c0d      	ldr	r4, [pc, #52]	@ (8004938 <__libc_init_array+0x3c>)
 8004902:	1b64      	subs	r4, r4, r5
 8004904:	10a4      	asrs	r4, r4, #2
 8004906:	2600      	movs	r6, #0
 8004908:	42a6      	cmp	r6, r4
 800490a:	d109      	bne.n	8004920 <__libc_init_array+0x24>
 800490c:	4d0b      	ldr	r5, [pc, #44]	@ (800493c <__libc_init_array+0x40>)
 800490e:	4c0c      	ldr	r4, [pc, #48]	@ (8004940 <__libc_init_array+0x44>)
 8004910:	f000 f826 	bl	8004960 <_init>
 8004914:	1b64      	subs	r4, r4, r5
 8004916:	10a4      	asrs	r4, r4, #2
 8004918:	2600      	movs	r6, #0
 800491a:	42a6      	cmp	r6, r4
 800491c:	d105      	bne.n	800492a <__libc_init_array+0x2e>
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	f855 3b04 	ldr.w	r3, [r5], #4
 8004924:	4798      	blx	r3
 8004926:	3601      	adds	r6, #1
 8004928:	e7ee      	b.n	8004908 <__libc_init_array+0xc>
 800492a:	f855 3b04 	ldr.w	r3, [r5], #4
 800492e:	4798      	blx	r3
 8004930:	3601      	adds	r6, #1
 8004932:	e7f2      	b.n	800491a <__libc_init_array+0x1e>
 8004934:	080049d4 	.word	0x080049d4
 8004938:	080049d4 	.word	0x080049d4
 800493c:	080049d4 	.word	0x080049d4
 8004940:	080049d8 	.word	0x080049d8

08004944 <memcpy>:
 8004944:	440a      	add	r2, r1
 8004946:	4291      	cmp	r1, r2
 8004948:	f100 33ff 	add.w	r3, r0, #4294967295
 800494c:	d100      	bne.n	8004950 <memcpy+0xc>
 800494e:	4770      	bx	lr
 8004950:	b510      	push	{r4, lr}
 8004952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800495a:	4291      	cmp	r1, r2
 800495c:	d1f9      	bne.n	8004952 <memcpy+0xe>
 800495e:	bd10      	pop	{r4, pc}

08004960 <_init>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr

0800496c <_fini>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	bf00      	nop
 8004970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004972:	bc08      	pop	{r3}
 8004974:	469e      	mov	lr, r3
 8004976:	4770      	bx	lr
