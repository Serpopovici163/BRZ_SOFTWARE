
CAN_LINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a8  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004874  08004874  00005874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080048d0  080048d0  000058d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080048d4  080048d4  000058d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  080048d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000384  24000010  080048e8  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000394  080048e8  00006394  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e3ee  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b92  00000000  00000000  0001442c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000c68  00000000  00000000  00015fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000096e  00000000  00000000  00016c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032a64  00000000  00000000  00017596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e2d2  00000000  00000000  00049ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00149fc1  00000000  00000000  000582cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a228d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003488  00000000  00000000  001a22d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000090  00000000  00000000  001a5758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800485c 	.word	0x0800485c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800485c 	.word	0x0800485c

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000310:	f000 fb6c 	bl	80009ec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fee8 	bl	80010e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f838 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 faba 	bl	8000894 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000320:	f000 f8a6 	bl	8000470 <MX_FDCAN1_Init>
  MX_FDCAN3_Init();
 8000324:	f000 f908 	bl	8000538 <MX_FDCAN3_Init>
  MX_SPI1_Init();
 8000328:	f000 f96c 	bl	8000604 <MX_SPI1_Init>
  MX_SPI2_Init();
 800032c:	f000 f9c0 	bl	80006b0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000330:	f000 fa14 	bl	800075c <MX_SPI3_Init>
  MX_SPI4_Init();
 8000334:	f000 fa68 	bl	8000808 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  //start FDCAN1
  HAL_FDCAN_Start(&hfdcan1);
 8000338:	4811      	ldr	r0, [pc, #68]	@ (8000380 <main+0x74>)
 800033a:	f001 fac5 	bl	80018c8 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800033e:	2200      	movs	r2, #0
 8000340:	2101      	movs	r1, #1
 8000342:	480f      	ldr	r0, [pc, #60]	@ (8000380 <main+0x74>)
 8000344:	f001 faec 	bl	8001920 <HAL_FDCAN_ActivateNotification>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <main+0x46>
	  Error_Handler();
 800034e:	f000 fb79 	bl	8000a44 <Error_Handler>
  }

  //start FDCAN3
  HAL_FDCAN_Start(&hfdcan3);
 8000352:	480c      	ldr	r0, [pc, #48]	@ (8000384 <main+0x78>)
 8000354:	f001 fab8 	bl	80018c8 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4809      	ldr	r0, [pc, #36]	@ (8000384 <main+0x78>)
 800035e:	f001 fadf 	bl	8001920 <HAL_FDCAN_ActivateNotification>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <main+0x60>
  	  Error_Handler();
 8000368:	f000 fb6c 	bl	8000a44 <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin (G_LED_GPIO_Port, G_LED_Pin);
 800036c:	2101      	movs	r1, #1
 800036e:	4806      	ldr	r0, [pc, #24]	@ (8000388 <main+0x7c>)
 8000370:	f001 fe97 	bl	80020a2 <HAL_GPIO_TogglePin>
	  HAL_Delay (500);   /* Insert delay 100 ms */
 8000374:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000378:	f000 ff48 	bl	800120c <HAL_Delay>
	  HAL_GPIO_TogglePin (G_LED_GPIO_Port, G_LED_Pin);
 800037c:	bf00      	nop
 800037e:	e7f5      	b.n	800036c <main+0x60>
 8000380:	2400002c 	.word	0x2400002c
 8000384:	240000cc 	.word	0x240000cc
 8000388:	58020800 	.word	0x58020800

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b09c      	sub	sp, #112	@ 0x70
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000396:	224c      	movs	r2, #76	@ 0x4c
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f004 fa23 	bl	80047e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2220      	movs	r2, #32
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f004 fa1d 	bl	80047e6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003ac:	2002      	movs	r0, #2
 80003ae:	f001 fe93 	bl	80020d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003b2:	2300      	movs	r3, #0
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	4b2d      	ldr	r3, [pc, #180]	@ (800046c <SystemClock_Config+0xe0>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003be:	4a2b      	ldr	r2, [pc, #172]	@ (800046c <SystemClock_Config+0xe0>)
 80003c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b29      	ldr	r3, [pc, #164]	@ (800046c <SystemClock_Config+0xe0>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003d2:	bf00      	nop
 80003d4:	4b25      	ldr	r3, [pc, #148]	@ (800046c <SystemClock_Config+0xe0>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003e0:	d1f8      	bne.n	80003d4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003e2:	2303      	movs	r3, #3
 80003e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003f0:	2340      	movs	r3, #64	@ 0x40
 80003f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f4:	2302      	movs	r3, #2
 80003f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003f8:	2300      	movs	r3, #0
 80003fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003fc:	2304      	movs	r3, #4
 80003fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000400:	230c      	movs	r3, #12
 8000402:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000404:	2302      	movs	r3, #2
 8000406:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 128;
 8000408:	2380      	movs	r3, #128	@ 0x80
 800040a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800040c:	2302      	movs	r3, #2
 800040e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000410:	230c      	movs	r3, #12
 8000412:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000414:	2300      	movs	r3, #0
 8000416:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000420:	4618      	mov	r0, r3
 8000422:	f001 fe93 	bl	800214c <HAL_RCC_OscConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800042c:	f000 fb0a 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000430:	233f      	movs	r3, #63	@ 0x3f
 8000432:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2101      	movs	r1, #1
 8000454:	4618      	mov	r0, r3
 8000456:	f002 fa53 	bl	8002900 <HAL_RCC_ClockConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000460:	f000 faf0 	bl	8000a44 <Error_Handler>
  }
}
 8000464:	bf00      	nop
 8000466:	3770      	adds	r7, #112	@ 0x70
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	58024800 	.word	0x58024800

08000470 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000474:	4b2e      	ldr	r3, [pc, #184]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 8000476:	4a2f      	ldr	r2, [pc, #188]	@ (8000534 <MX_FDCAN1_Init+0xc4>)
 8000478:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000480:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000486:	4b2a      	ldr	r3, [pc, #168]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 8000488:	2200      	movs	r2, #0
 800048a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800048c:	4b28      	ldr	r3, [pc, #160]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 800048e:	2200      	movs	r2, #0
 8000490:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000492:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 8000494:	2200      	movs	r2, #0
 8000496:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000498:	4b25      	ldr	r3, [pc, #148]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 800049a:	220a      	movs	r2, #10
 800049c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800049e:	4b24      	ldr	r3, [pc, #144]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80004a4:	4b22      	ldr	r3, [pc, #136]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004a6:	2202      	movs	r2, #2
 80004a8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80004aa:	4b21      	ldr	r3, [pc, #132]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004ac:	2202      	movs	r2, #2
 80004ae:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80004b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80004b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80004bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004be:	2201      	movs	r2, #1
 80004c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80004c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80004c8:	4b19      	ldr	r3, [pc, #100]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80004ce:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80004d4:	4b16      	ldr	r3, [pc, #88]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 5;
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004dc:	2205      	movs	r2, #5
 80004de:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80004e0:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80004e6:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80004ec:	4b10      	ldr	r3, [pc, #64]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004ee:	2204      	movs	r2, #4
 80004f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80004f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 8000500:	2200      	movs	r2, #0
 8000502:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000504:	4b0a      	ldr	r3, [pc, #40]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 8000506:	2200      	movs	r2, #0
 8000508:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 5;
 800050a:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 800050c:	2205      	movs	r2, #5
 800050e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000510:	4b07      	ldr	r3, [pc, #28]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 8000512:	2200      	movs	r2, #0
 8000514:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000516:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 8000518:	2204      	movs	r2, #4
 800051a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800051c:	4804      	ldr	r0, [pc, #16]	@ (8000530 <MX_FDCAN1_Init+0xc0>)
 800051e:	f000 fff5 	bl	800150c <HAL_FDCAN_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000528:	f000 fa8c 	bl	8000a44 <Error_Handler>

  // NO FILTER NEEDED SINCE WE'RE TRYNA RECORD EVERYTHING

  /* USER CODE END FDCAN1_Init 2 */

}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2400002c 	.word	0x2400002c
 8000534:	4000a000 	.word	0x4000a000

08000538 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800053c:	4b2f      	ldr	r3, [pc, #188]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 800053e:	4a30      	ldr	r2, [pc, #192]	@ (8000600 <MX_FDCAN3_Init+0xc8>)
 8000540:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000542:	4b2e      	ldr	r3, [pc, #184]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 8000544:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000548:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800054a:	4b2c      	ldr	r3, [pc, #176]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 8000550:	4b2a      	ldr	r3, [pc, #168]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 8000552:	2201      	movs	r2, #1
 8000554:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000556:	4b29      	ldr	r3, [pc, #164]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 8000558:	2200      	movs	r2, #0
 800055a:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800055c:	4b27      	ldr	r3, [pc, #156]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 800055e:	2200      	movs	r2, #0
 8000560:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 5;
 8000562:	4b26      	ldr	r3, [pc, #152]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 8000564:	2205      	movs	r2, #5
 8000566:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000568:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 800056a:	2201      	movs	r2, #1
 800056c:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800056e:	4b23      	ldr	r3, [pc, #140]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 8000570:	2202      	movs	r2, #2
 8000572:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000574:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 8000576:	2202      	movs	r2, #2
 8000578:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800057a:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 800057c:	2201      	movs	r2, #1
 800057e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 8000582:	2201      	movs	r2, #1
 8000584:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000586:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 8000588:	2201      	movs	r2, #1
 800058a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 800058e:	2201      	movs	r2, #1
 8000590:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 200;
 8000592:	4b1a      	ldr	r3, [pc, #104]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 8000594:	22c8      	movs	r2, #200	@ 0xc8
 8000596:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 800059a:	2200      	movs	r2, #0
 800059c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 800059e:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80005aa:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005ac:	2204      	movs	r2, #4
 80005ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 5;
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005b2:	2205      	movs	r2, #5
 80005b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005b8:	2212      	movs	r2, #18
 80005ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 5;
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005d6:	2205      	movs	r2, #5
 80005d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005e2:	2212      	movs	r2, #18
 80005e4:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <MX_FDCAN3_Init+0xc4>)
 80005e8:	f000 ff90 	bl	800150c <HAL_FDCAN_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 80005f2:	f000 fa27 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	240000cc 	.word	0x240000cc
 8000600:	4000d400 	.word	0x4000d400

08000604 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000608:	4b27      	ldr	r3, [pc, #156]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 800060a:	4a28      	ldr	r2, [pc, #160]	@ (80006ac <MX_SPI1_Init+0xa8>)
 800060c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800060e:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000610:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000614:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000616:	4b24      	ldr	r3, [pc, #144]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800061c:	4b22      	ldr	r3, [pc, #136]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 800061e:	2203      	movs	r2, #3
 8000620:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000622:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800062e:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000630:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000634:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000636:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800063c:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000642:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 800064a:	2200      	movs	r2, #0
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800064e:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000650:	2200      	movs	r2, #0
 8000652:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000656:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800065a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 800065e:	2200      	movs	r2, #0
 8000660:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000664:	2200      	movs	r2, #0
 8000666:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 800066a:	2200      	movs	r2, #0
 800066c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000670:	2200      	movs	r2, #0
 8000672:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000676:	2200      	movs	r2, #0
 8000678:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 800067c:	2200      	movs	r2, #0
 800067e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000682:	2200      	movs	r2, #0
 8000684:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000688:	2200      	movs	r2, #0
 800068a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 800068e:	2200      	movs	r2, #0
 8000690:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <MX_SPI1_Init+0xa4>)
 8000694:	f003 ff68 	bl	8004568 <HAL_SPI_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800069e:	f000 f9d1 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2400016c 	.word	0x2400016c
 80006ac:	40013000 	.word	0x40013000

080006b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006b4:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006b6:	4a28      	ldr	r2, [pc, #160]	@ (8000758 <MX_SPI2_Init+0xa8>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006c8:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006ca:	2203      	movs	r2, #3
 80006cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006dc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80006e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_SPI2_Init+0xa4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_SPI2_Init+0xa4>)
 8000702:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000706:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_SPI2_Init+0xa4>)
 800070a:	2200      	movs	r2, #0
 800070c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_SPI2_Init+0xa4>)
 8000710:	2200      	movs	r2, #0
 8000712:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_SPI2_Init+0xa4>)
 8000716:	2200      	movs	r2, #0
 8000718:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_SPI2_Init+0xa4>)
 800071c:	2200      	movs	r2, #0
 800071e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_SPI2_Init+0xa4>)
 8000722:	2200      	movs	r2, #0
 8000724:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_SPI2_Init+0xa4>)
 8000728:	2200      	movs	r2, #0
 800072a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_SPI2_Init+0xa4>)
 800072e:	2200      	movs	r2, #0
 8000730:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_SPI2_Init+0xa4>)
 8000734:	2200      	movs	r2, #0
 8000736:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_SPI2_Init+0xa4>)
 800073a:	2200      	movs	r2, #0
 800073c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_SPI2_Init+0xa4>)
 8000740:	f003 ff12 	bl	8004568 <HAL_SPI_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800074a:	f000 f97b 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	240001f4 	.word	0x240001f4
 8000758:	40003800 	.word	0x40003800

0800075c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000760:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <MX_SPI3_Init+0xa4>)
 8000762:	4a28      	ldr	r2, [pc, #160]	@ (8000804 <MX_SPI3_Init+0xa8>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <MX_SPI3_Init+0xa4>)
 8000768:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800076c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <MX_SPI3_Init+0xa4>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000774:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <MX_SPI3_Init+0xa4>)
 8000776:	2203      	movs	r2, #3
 8000778:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_SPI3_Init+0xa4>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000780:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_SPI3_Init+0xa4>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000786:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <MX_SPI3_Init+0xa4>)
 8000788:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800078c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <MX_SPI3_Init+0xa4>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_SPI3_Init+0xa4>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_SPI3_Init+0xa4>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_SPI3_Init+0xa4>)
 80007ec:	f003 febc 	bl	8004568 <HAL_SPI_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80007f6:	f000 f925 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2400027c 	.word	0x2400027c
 8000804:	40003c00 	.word	0x40003c00

08000808 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_SPI4_Init+0x84>)
 800080e:	4a20      	ldr	r2, [pc, #128]	@ (8000890 <MX_SPI4_Init+0x88>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <MX_SPI4_Init+0x84>)
 8000814:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000818:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_SPI4_Init+0x84>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_SPI4_Init+0x84>)
 8000822:	220f      	movs	r2, #15
 8000824:	60da      	str	r2, [r3, #12]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <MX_SPI4_Init+0x84>)
 8000828:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800082c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_SPI4_Init+0x84>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hspi4.Init.TIMode = SPI_TIMODE_ENABLE;
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_SPI4_Init+0x84>)
 8000836:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800083a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083c:	4b13      	ldr	r3, [pc, #76]	@ (800088c <MX_SPI4_Init+0x84>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_SPI4_Init+0x84>)
 8000844:	2200      	movs	r2, #0
 8000846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000848:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_SPI4_Init+0x84>)
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_SPI4_Init+0x84>)
 8000850:	2200      	movs	r2, #0
 8000852:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000854:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <MX_SPI4_Init+0x84>)
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_SPI4_Init+0x84>)
 800085c:	2200      	movs	r2, #0
 800085e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000860:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <MX_SPI4_Init+0x84>)
 8000862:	2200      	movs	r2, #0
 8000864:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_SPI4_Init+0x84>)
 8000868:	2200      	movs	r2, #0
 800086a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	@ (800088c <MX_SPI4_Init+0x84>)
 800086e:	2200      	movs	r2, #0
 8000870:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_SPI4_Init+0x84>)
 8000874:	2200      	movs	r2, #0
 8000876:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	@ (800088c <MX_SPI4_Init+0x84>)
 800087a:	f003 fe75 	bl	8004568 <HAL_SPI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SPI4_Init+0x80>
  {
    Error_Handler();
 8000884:	f000 f8de 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	24000304 	.word	0x24000304
 8000890:	40013400 	.word	0x40013400

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	@ 0x30
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008aa:	4b4c      	ldr	r3, [pc, #304]	@ (80009dc <MX_GPIO_Init+0x148>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b0:	4a4a      	ldr	r2, [pc, #296]	@ (80009dc <MX_GPIO_Init+0x148>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ba:	4b48      	ldr	r3, [pc, #288]	@ (80009dc <MX_GPIO_Init+0x148>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c0:	f003 0310 	and.w	r3, r3, #16
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b44      	ldr	r3, [pc, #272]	@ (80009dc <MX_GPIO_Init+0x148>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ce:	4a43      	ldr	r2, [pc, #268]	@ (80009dc <MX_GPIO_Init+0x148>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d8:	4b40      	ldr	r3, [pc, #256]	@ (80009dc <MX_GPIO_Init+0x148>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b3d      	ldr	r3, [pc, #244]	@ (80009dc <MX_GPIO_Init+0x148>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	4a3b      	ldr	r2, [pc, #236]	@ (80009dc <MX_GPIO_Init+0x148>)
 80008ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f6:	4b39      	ldr	r3, [pc, #228]	@ (80009dc <MX_GPIO_Init+0x148>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <MX_GPIO_Init+0x148>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	4a34      	ldr	r2, [pc, #208]	@ (80009dc <MX_GPIO_Init+0x148>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000914:	4b31      	ldr	r3, [pc, #196]	@ (80009dc <MX_GPIO_Init+0x148>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <MX_GPIO_Init+0x148>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a2c      	ldr	r2, [pc, #176]	@ (80009dc <MX_GPIO_Init+0x148>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b2a      	ldr	r3, [pc, #168]	@ (80009dc <MX_GPIO_Init+0x148>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <MX_GPIO_Init+0x148>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	4a25      	ldr	r2, [pc, #148]	@ (80009dc <MX_GPIO_Init+0x148>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000950:	4b22      	ldr	r3, [pc, #136]	@ (80009dc <MX_GPIO_Init+0x148>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_LED_Pin|R_LED_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2103      	movs	r1, #3
 8000962:	481f      	ldr	r0, [pc, #124]	@ (80009e0 <MX_GPIO_Init+0x14c>)
 8000964:	f001 fb84 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nBUZZ_GPIO_Port, nBUZZ_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2108      	movs	r1, #8
 800096c:	481d      	ldr	r0, [pc, #116]	@ (80009e4 <MX_GPIO_Init+0x150>)
 800096e:	f001 fb7f 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_1_Pin|TRIG_2_Pin|TRIG_3_Pin|TRIG_4_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000978:	481b      	ldr	r0, [pc, #108]	@ (80009e8 <MX_GPIO_Init+0x154>)
 800097a:	f001 fb79 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : G_LED_Pin R_LED_Pin */
  GPIO_InitStruct.Pin = G_LED_Pin|R_LED_Pin;
 800097e:	2303      	movs	r3, #3
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000982:	2311      	movs	r3, #17
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4812      	ldr	r0, [pc, #72]	@ (80009e0 <MX_GPIO_Init+0x14c>)
 8000996:	f001 f9c3 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : nBUZZ_Pin */
  GPIO_InitStruct.Pin = nBUZZ_Pin;
 800099a:	2308      	movs	r3, #8
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800099e:	2311      	movs	r3, #17
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(nBUZZ_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MX_GPIO_Init+0x150>)
 80009b2:	f001 f9b5 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_1_Pin TRIG_2_Pin TRIG_3_Pin TRIG_4_Pin */
  GPIO_InitStruct.Pin = TRIG_1_Pin|TRIG_2_Pin|TRIG_3_Pin|TRIG_4_Pin;
 80009b6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	@ (80009e8 <MX_GPIO_Init+0x154>)
 80009d0:	f001 f9a6 	bl	8001d20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	@ 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	58024400 	.word	0x58024400
 80009e0:	58020800 	.word	0x58020800
 80009e4:	58020000 	.word	0x58020000
 80009e8:	58021000 	.word	0x58021000

080009ec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009fe:	f000 fd0d 	bl	800141c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a0e:	231f      	movs	r3, #31
 8000a10:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a12:	2387      	movs	r3, #135	@ 0x87
 8000a14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fd2b 	bl	800148c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a36:	2004      	movs	r0, #4
 8000a38:	f000 fd08 	bl	800144c <HAL_MPU_Enable>

}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <Error_Handler+0x8>

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <HAL_MspInit+0x30>)
 8000a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a5c:	4a08      	ldr	r2, [pc, #32]	@ (8000a80 <HAL_MspInit+0x30>)
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
 8000a62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_MspInit+0x30>)
 8000a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	58024400 	.word	0x58024400

08000a84 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0ba      	sub	sp, #232	@ 0xe8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	22b8      	movs	r2, #184	@ 0xb8
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fe9e 	bl	80047e6 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a56      	ldr	r2, [pc, #344]	@ (8000c08 <HAL_FDCAN_MspInit+0x184>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d150      	bne.n	8000b56 <HAL_FDCAN_MspInit+0xd2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ab4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac6:	f107 0318 	add.w	r3, r7, #24
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fa48 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000ad6:	f7ff ffb5 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ada:	4b4c      	ldr	r3, [pc, #304]	@ (8000c0c <HAL_FDCAN_MspInit+0x188>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8000c0c <HAL_FDCAN_MspInit+0x188>)
 8000ae2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ae4:	4b49      	ldr	r3, [pc, #292]	@ (8000c0c <HAL_FDCAN_MspInit+0x188>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d10e      	bne.n	8000b0a <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000aec:	4b48      	ldr	r3, [pc, #288]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000aee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000af2:	4a47      	ldr	r2, [pc, #284]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000af8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000afc:	4b44      	ldr	r3, [pc, #272]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000afe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b41      	ldr	r3, [pc, #260]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	4a3f      	ldr	r2, [pc, #252]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b42:	2309      	movs	r3, #9
 8000b44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4831      	ldr	r0, [pc, #196]	@ (8000c14 <HAL_FDCAN_MspInit+0x190>)
 8000b50:	f001 f8e6 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000b54:	e054      	b.n	8000c00 <HAL_FDCAN_MspInit+0x17c>
  else if(hfdcan->Instance==FDCAN3)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c18 <HAL_FDCAN_MspInit+0x194>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d14f      	bne.n	8000c00 <HAL_FDCAN_MspInit+0x17c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 f9f2 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_FDCAN_MspInit+0x102>
      Error_Handler();
 8000b82:	f7ff ff5f 	bl	8000a44 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <HAL_FDCAN_MspInit+0x188>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000c0c <HAL_FDCAN_MspInit+0x188>)
 8000b8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000b90:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <HAL_FDCAN_MspInit+0x188>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d10e      	bne.n	8000bb6 <HAL_FDCAN_MspInit+0x132>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000b9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000baa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	4a14      	ldr	r2, [pc, #80]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <HAL_FDCAN_MspInit+0x18c>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	f003 0308 	and.w	r3, r3, #8
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000bd4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000bd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_FDCAN3;
 8000bee:	2305      	movs	r3, #5
 8000bf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <HAL_FDCAN_MspInit+0x198>)
 8000bfc:	f001 f890 	bl	8001d20 <HAL_GPIO_Init>
}
 8000c00:	bf00      	nop
 8000c02:	37e8      	adds	r7, #232	@ 0xe8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	4000a000 	.word	0x4000a000
 8000c0c:	2400038c 	.word	0x2400038c
 8000c10:	58024400 	.word	0x58024400
 8000c14:	58020400 	.word	0x58020400
 8000c18:	4000d400 	.word	0x4000d400
 8000c1c:	58020c00 	.word	0x58020c00

08000c20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0c0      	sub	sp, #256	@ 0x100
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c3c:	22b8      	movs	r2, #184	@ 0xb8
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 fdd0 	bl	80047e6 <memset>
  if(hspi->Instance==SPI1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4ab5      	ldr	r2, [pc, #724]	@ (8000f20 <HAL_SPI_MspInit+0x300>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d146      	bne.n	8000cde <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000c50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 f97a 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000c72:	f7ff fee7 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c76:	4bab      	ldr	r3, [pc, #684]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c7c:	4aa9      	ldr	r2, [pc, #676]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000c7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c86:	4ba7      	ldr	r3, [pc, #668]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4ba3      	ldr	r3, [pc, #652]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9a:	4aa2      	ldr	r2, [pc, #648]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca4:	4b9f      	ldr	r3, [pc, #636]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cb2:	23f0      	movs	r3, #240	@ 0xf0
 8000cb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4894      	ldr	r0, [pc, #592]	@ (8000f28 <HAL_SPI_MspInit+0x308>)
 8000cd8:	f001 f822 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000cdc:	e11a      	b.n	8000f14 <HAL_SPI_MspInit+0x2f4>
  else if(hspi->Instance==SPI2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a92      	ldr	r2, [pc, #584]	@ (8000f2c <HAL_SPI_MspInit+0x30c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d147      	bne.n	8000d78 <HAL_SPI_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000ce8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 f92e 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_SPI_MspInit+0xee>
      Error_Handler();
 8000d0a:	f7ff fe9b 	bl	8000a44 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d0e:	4b85      	ldr	r3, [pc, #532]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d14:	4a83      	ldr	r2, [pc, #524]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d1e:	4b81      	ldr	r3, [pc, #516]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b7d      	ldr	r3, [pc, #500]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d32:	4a7c      	ldr	r2, [pc, #496]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3c:	4b79      	ldr	r3, [pc, #484]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d4a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d64:	2305      	movs	r3, #5
 8000d66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d6e:	4619      	mov	r1, r3
 8000d70:	486f      	ldr	r0, [pc, #444]	@ (8000f30 <HAL_SPI_MspInit+0x310>)
 8000d72:	f000 ffd5 	bl	8001d20 <HAL_GPIO_Init>
}
 8000d76:	e0cd      	b.n	8000f14 <HAL_SPI_MspInit+0x2f4>
  else if(hspi->Instance==SPI3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a6d      	ldr	r2, [pc, #436]	@ (8000f34 <HAL_SPI_MspInit+0x314>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d16c      	bne.n	8000e5c <HAL_SPI_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000d82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 f8e1 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 8000da4:	f7ff fe4e 	bl	8000a44 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da8:	4b5e      	ldr	r3, [pc, #376]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000daa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dae:	4a5d      	ldr	r2, [pc, #372]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000db0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000db4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000db8:	4b5a      	ldr	r3, [pc, #360]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000dba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b57      	ldr	r3, [pc, #348]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	4a55      	ldr	r2, [pc, #340]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd6:	4b53      	ldr	r3, [pc, #332]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	4a4e      	ldr	r2, [pc, #312]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df4:	4b4b      	ldr	r3, [pc, #300]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e1c:	2306      	movs	r3, #6
 8000e1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e26:	4619      	mov	r1, r3
 8000e28:	483f      	ldr	r0, [pc, #252]	@ (8000f28 <HAL_SPI_MspInit+0x308>)
 8000e2a:	f000 ff79 	bl	8001d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e2e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e52:	4619      	mov	r1, r3
 8000e54:	4838      	ldr	r0, [pc, #224]	@ (8000f38 <HAL_SPI_MspInit+0x318>)
 8000e56:	f000 ff63 	bl	8001d20 <HAL_GPIO_Init>
}
 8000e5a:	e05b      	b.n	8000f14 <HAL_SPI_MspInit+0x2f4>
  else if(hspi->Instance==SPI4)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a36      	ldr	r2, [pc, #216]	@ (8000f3c <HAL_SPI_MspInit+0x31c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d156      	bne.n	8000f14 <HAL_SPI_MspInit+0x2f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000e66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000e72:	2304      	movs	r3, #4
 8000e74:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000e76:	230c      	movs	r3, #12
 8000e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL2.PLL2Q = 128;
 8000e7e:	2380      	movs	r3, #128	@ 0x80
 8000e80:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e86:	23c0      	movs	r3, #192	@ 0xc0
 8000e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000e92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 f85e 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_SPI_MspInit+0x28e>
      Error_Handler();
 8000eaa:	f7ff fdcb 	bl	8000a44 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000eae:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000eb6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed2:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <HAL_SPI_MspInit+0x304>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000eea:	2374      	movs	r3, #116	@ 0x74
 8000eec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000f02:	2305      	movs	r3, #5
 8000f04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f08:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <HAL_SPI_MspInit+0x320>)
 8000f10:	f000 ff06 	bl	8001d20 <HAL_GPIO_Init>
}
 8000f14:	bf00      	nop
 8000f16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40013000 	.word	0x40013000
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58020000 	.word	0x58020000
 8000f2c:	40003800 	.word	0x40003800
 8000f30:	58020400 	.word	0x58020400
 8000f34:	40003c00 	.word	0x40003c00
 8000f38:	58020800 	.word	0x58020800
 8000f3c:	40013400 	.word	0x40013400
 8000f40:	58021000 	.word	0x58021000

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <NMI_Handler+0x4>

08000f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9a:	f000 f917 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b32      	ldr	r3, [pc, #200]	@ (8001074 <SystemInit+0xd0>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fae:	4a31      	ldr	r2, [pc, #196]	@ (8001074 <SystemInit+0xd0>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8001078 <SystemInit+0xd4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	2b06      	cmp	r3, #6
 8000fc2:	d807      	bhi.n	8000fd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001078 <SystemInit+0xd4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f023 030f 	bic.w	r3, r3, #15
 8000fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8001078 <SystemInit+0xd4>)
 8000fce:	f043 0307 	orr.w	r3, r3, #7
 8000fd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fd4:	4b29      	ldr	r3, [pc, #164]	@ (800107c <SystemInit+0xd8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a28      	ldr	r2, [pc, #160]	@ (800107c <SystemInit+0xd8>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	@ (800107c <SystemInit+0xd8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	@ (800107c <SystemInit+0xd8>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4924      	ldr	r1, [pc, #144]	@ (800107c <SystemInit+0xd8>)
 8000fec:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <SystemInit+0xdc>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ff2:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <SystemInit+0xd4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8001078 <SystemInit+0xd4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 030f 	bic.w	r3, r3, #15
 8001006:	4a1c      	ldr	r2, [pc, #112]	@ (8001078 <SystemInit+0xd4>)
 8001008:	f043 0307 	orr.w	r3, r3, #7
 800100c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <SystemInit+0xd8>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <SystemInit+0xd8>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800101a:	4b18      	ldr	r3, [pc, #96]	@ (800107c <SystemInit+0xd8>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001020:	4b16      	ldr	r3, [pc, #88]	@ (800107c <SystemInit+0xd8>)
 8001022:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <SystemInit+0xe0>)
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <SystemInit+0xd8>)
 8001028:	4a17      	ldr	r2, [pc, #92]	@ (8001088 <SystemInit+0xe4>)
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <SystemInit+0xd8>)
 800102e:	4a17      	ldr	r2, [pc, #92]	@ (800108c <SystemInit+0xe8>)
 8001030:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <SystemInit+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001038:	4b10      	ldr	r3, [pc, #64]	@ (800107c <SystemInit+0xd8>)
 800103a:	4a14      	ldr	r2, [pc, #80]	@ (800108c <SystemInit+0xe8>)
 800103c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <SystemInit+0xd8>)
 8001040:	2200      	movs	r2, #0
 8001042:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001044:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <SystemInit+0xd8>)
 8001046:	4a11      	ldr	r2, [pc, #68]	@ (800108c <SystemInit+0xe8>)
 8001048:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800104a:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <SystemInit+0xd8>)
 800104c:	2200      	movs	r2, #0
 800104e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <SystemInit+0xd8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a09      	ldr	r2, [pc, #36]	@ (800107c <SystemInit+0xd8>)
 8001056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800105a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800105c:	4b07      	ldr	r3, [pc, #28]	@ (800107c <SystemInit+0xd8>)
 800105e:	2200      	movs	r2, #0
 8001060:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <SystemInit+0xec>)
 8001064:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001068:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	52002000 	.word	0x52002000
 800107c:	58024400 	.word	0x58024400
 8001080:	eaf6ed7f 	.word	0xeaf6ed7f
 8001084:	02020200 	.word	0x02020200
 8001088:	01ff0000 	.word	0x01ff0000
 800108c:	01010280 	.word	0x01010280
 8001090:	52004000 	.word	0x52004000

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001098:	f7ff ff84 	bl	8000fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	@ (80010d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	@ (80010e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f003 fb99 	bl	80047f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff f921 	bl	800030c <main>
  bx  lr
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010d4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010d8:	080048d8 	.word	0x080048d8
  ldr r2, =_sbss
 80010dc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80010e0:	24000394 	.word	0x24000394

080010e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC3_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ee:	2003      	movs	r0, #3
 80010f0:	f000 f962 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010f4:	f001 fdba 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_Init+0x68>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	4913      	ldr	r1, [pc, #76]	@ (8001154 <HAL_Init+0x6c>)
 8001106:	5ccb      	ldrb	r3, [r1, r3]
 8001108:	f003 031f 	and.w	r3, r3, #31
 800110c:	fa22 f303 	lsr.w	r3, r2, r3
 8001110:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_Init+0x68>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	4a0e      	ldr	r2, [pc, #56]	@ (8001154 <HAL_Init+0x6c>)
 800111c:	5cd3      	ldrb	r3, [r2, r3]
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <HAL_Init+0x70>)
 800112a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800112c:	4a0b      	ldr	r2, [pc, #44]	@ (800115c <HAL_Init+0x74>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001132:	200f      	movs	r0, #15
 8001134:	f000 f814 	bl	8001160 <HAL_InitTick>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e002      	b.n	8001148 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001142:	f7ff fc85 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	58024400 	.word	0x58024400
 8001154:	080048c0 	.word	0x080048c0
 8001158:	24000004 	.word	0x24000004
 800115c:	24000000 	.word	0x24000000

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_InitTick+0x60>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e021      	b.n	80011b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_InitTick+0x64>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_InitTick+0x60>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f939 	bl	8001402 <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 f911 	bl	80013ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	@ (80011c8 <HAL_InitTick+0x68>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2400000c 	.word	0x2400000c
 80011c4:	24000000 	.word	0x24000000
 80011c8:	24000008 	.word	0x24000008

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2400000c 	.word	0x2400000c
 80011f0:	24000390 	.word	0x24000390

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	24000390 	.word	0x24000390

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2400000c 	.word	0x2400000c

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <__NVIC_SetPriorityGrouping+0x40>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	4313      	orrs	r3, r2
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <__NVIC_SetPriorityGrouping+0x40>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	05fa0000 	.word	0x05fa0000

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	@ (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	@ (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	@ 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	@ 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001384:	d301      	bcc.n	800138a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001386:	2301      	movs	r3, #1
 8001388:	e00f      	b.n	80013aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138a:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <SysTick_Config+0x40>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001392:	210f      	movs	r1, #15
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f7ff ff8e 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <SysTick_Config+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <SysTick_Config+0x40>)
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff47 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff5e 	bl	800129c <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff90 	bl	800130c <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5f 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffb2 	bl	8001374 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001420:	f3bf 8f5f 	dmb	sy
}
 8001424:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <HAL_MPU_Disable+0x28>)
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142a:	4a06      	ldr	r2, [pc, #24]	@ (8001444 <HAL_MPU_Disable+0x28>)
 800142c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001430:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_MPU_Disable+0x2c>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00
 8001448:	e000ed90 	.word	0xe000ed90

0800144c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001454:	4a0b      	ldr	r2, [pc, #44]	@ (8001484 <HAL_MPU_Enable+0x38>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <HAL_MPU_Enable+0x3c>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <HAL_MPU_Enable+0x3c>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001468:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800146a:	f3bf 8f4f 	dsb	sy
}
 800146e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001470:	f3bf 8f6f 	isb	sy
}
 8001474:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed90 	.word	0xe000ed90
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	785a      	ldrb	r2, [r3, #1]
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <HAL_MPU_ConfigRegion+0x7c>)
 800149a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <HAL_MPU_ConfigRegion+0x7c>)
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	4a19      	ldr	r2, [pc, #100]	@ (8001508 <HAL_MPU_ConfigRegion+0x7c>)
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014a8:	4a17      	ldr	r2, [pc, #92]	@ (8001508 <HAL_MPU_ConfigRegion+0x7c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7b1b      	ldrb	r3, [r3, #12]
 80014b4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7adb      	ldrb	r3, [r3, #11]
 80014ba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7a9b      	ldrb	r3, [r3, #10]
 80014c2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7b5b      	ldrb	r3, [r3, #13]
 80014ca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7b9b      	ldrb	r3, [r3, #14]
 80014d2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7bdb      	ldrb	r3, [r3, #15]
 80014da:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7a5b      	ldrb	r3, [r3, #9]
 80014e2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7a1b      	ldrb	r3, [r3, #8]
 80014ea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014ec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014f4:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014f6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014f8:	6113      	str	r3, [r2, #16]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed90 	.word	0xe000ed90

0800150c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b098      	sub	sp, #96	@ 0x60
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001514:	4a84      	ldr	r2, [pc, #528]	@ (8001728 <HAL_FDCAN_Init+0x21c>)
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4611      	mov	r1, r2
 800151c:	224c      	movs	r2, #76	@ 0x4c
 800151e:	4618      	mov	r0, r3
 8001520:	f003 f98e 	bl	8004840 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e1c6      	b.n	80018bc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7e      	ldr	r2, [pc, #504]	@ (800172c <HAL_FDCAN_Init+0x220>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d106      	bne.n	8001546 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001540:	461a      	mov	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fa92 	bl	8000a84 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0210 	bic.w	r2, r2, #16
 800156e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001570:	f7ff fe40 	bl	80011f4 <HAL_GetTick>
 8001574:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001576:	e014      	b.n	80015a2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001578:	f7ff fe3c 	bl	80011f4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b0a      	cmp	r3, #10
 8001584:	d90d      	bls.n	80015a2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2203      	movs	r2, #3
 800159a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e18c      	b.n	80018bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d0e3      	beq.n	8001578 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c0:	f7ff fe18 	bl	80011f4 <HAL_GetTick>
 80015c4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80015c6:	e014      	b.n	80015f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80015c8:	f7ff fe14 	bl	80011f4 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b0a      	cmp	r3, #10
 80015d4:	d90d      	bls.n	80015f2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2203      	movs	r2, #3
 80015ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e164      	b.n	80018bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0e3      	beq.n	80015c8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699a      	ldr	r2, [r3, #24]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0202 	orr.w	r2, r2, #2
 800160e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7c1b      	ldrb	r3, [r3, #16]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d108      	bne.n	800162a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699a      	ldr	r2, [r3, #24]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001626:	619a      	str	r2, [r3, #24]
 8001628:	e007      	b.n	800163a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699a      	ldr	r2, [r3, #24]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001638:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7c5b      	ldrb	r3, [r3, #17]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d108      	bne.n	8001654 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001650:	619a      	str	r2, [r3, #24]
 8001652:	e007      	b.n	8001664 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001662:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7c9b      	ldrb	r3, [r3, #18]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800167a:	619a      	str	r2, [r3, #24]
 800167c:	e007      	b.n	800168e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800168c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80016b2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0210 	bic.w	r2, r2, #16
 80016c2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d108      	bne.n	80016de <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699a      	ldr	r2, [r3, #24]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0204 	orr.w	r2, r2, #4
 80016da:	619a      	str	r2, [r3, #24]
 80016dc:	e030      	b.n	8001740 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d02c      	beq.n	8001740 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d020      	beq.n	8001730 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699a      	ldr	r2, [r3, #24]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016fc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0210 	orr.w	r2, r2, #16
 800170c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d114      	bne.n	8001740 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	699a      	ldr	r2, [r3, #24]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0220 	orr.w	r2, r2, #32
 8001724:	619a      	str	r2, [r3, #24]
 8001726:	e00b      	b.n	8001740 <HAL_FDCAN_Init+0x234>
 8001728:	08004874 	.word	0x08004874
 800172c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0220 	orr.w	r2, r2, #32
 800173e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	3b01      	subs	r3, #1
 8001746:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	3b01      	subs	r3, #1
 800174e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001750:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001758:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	3b01      	subs	r3, #1
 8001762:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001768:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800176a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001774:	d115      	bne.n	80017a2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001780:	3b01      	subs	r3, #1
 8001782:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001784:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	3b01      	subs	r3, #1
 800178c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800178e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	3b01      	subs	r3, #1
 8001798:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800179e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017a0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00a      	beq.n	80017c0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c8:	4413      	add	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d011      	beq.n	80017f2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80017d6:	f023 0107 	bic.w	r1, r3, #7
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	3360      	adds	r3, #96	@ 0x60
 80017e2:	443b      	add	r3, r7
 80017e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d011      	beq.n	800181e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001802:	f023 0107 	bic.w	r1, r3, #7
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	3360      	adds	r3, #96	@ 0x60
 800180e:	443b      	add	r3, r7
 8001810:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001822:	2b00      	cmp	r3, #0
 8001824:	d012      	beq.n	800184c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800182e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	3360      	adds	r3, #96	@ 0x60
 800183a:	443b      	add	r3, r7
 800183c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001840:	011a      	lsls	r2, r3, #4
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001850:	2b00      	cmp	r3, #0
 8001852:	d012      	beq.n	800187a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800185c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	3360      	adds	r3, #96	@ 0x60
 8001868:	443b      	add	r3, r7
 800186a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800186e:	021a      	lsls	r2, r3, #8
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a11      	ldr	r2, [pc, #68]	@ (80018c4 <HAL_FDCAN_Init+0x3b8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d107      	bne.n	8001894 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f022 0203 	bic.w	r2, r2, #3
 8001892:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f8b1 	bl	8001a14 <FDCAN_CalcultateRamBlockAddresses>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80018b8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3760      	adds	r7, #96	@ 0x60
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	4000a000 	.word	0x4000a000

080018c8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d111      	bne.n	8001900 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	e008      	b.n	8001912 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001906:	f043 0204 	orr.w	r2, r3, #4
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
  }
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001932:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d002      	beq.n	8001940 <HAL_FDCAN_ActivateNotification+0x20>
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d155      	bne.n	80019ec <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d108      	bne.n	8001960 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800195e:	e014      	b.n	800198a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	4013      	ands	r3, r2
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	429a      	cmp	r2, r3
 800196e:	d108      	bne.n	8001982 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0202 	orr.w	r2, r2, #2
 800197e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001980:	e003      	b.n	800198a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2203      	movs	r2, #3
 8001988:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001990:	2b00      	cmp	r3, #0
 8001992:	d009      	beq.n	80019a8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <HAL_FDCAN_ActivateNotification+0xec>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	430b      	orrs	r3, r1
 80019d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <HAL_FDCAN_ActivateNotification+0xf0>)
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	0f9b      	lsrs	r3, r3, #30
 80019e2:	490b      	ldr	r1, [pc, #44]	@ (8001a10 <HAL_FDCAN_ActivateNotification+0xf0>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e008      	b.n	80019fe <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019f2:	f043 0202 	orr.w	r2, r3, #2
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
  }
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	3fcfffff 	.word	0x3fcfffff
 8001a10:	4000a800 	.word	0x4000a800

08001a14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a20:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001a2a:	4ba7      	ldr	r3, [pc, #668]	@ (8001cc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	0091      	lsls	r1, r2, #2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	430b      	orrs	r3, r1
 8001a38:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a44:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a4c:	041a      	lsls	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001a6a:	4b97      	ldr	r3, [pc, #604]	@ (8001cc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	0091      	lsls	r1, r2, #2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	430b      	orrs	r3, r1
 8001a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a84:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a8c:	041a      	lsls	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001aac:	4b86      	ldr	r3, [pc, #536]	@ (8001cc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	0091      	lsls	r1, r2, #2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001ac6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	041a      	lsls	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	4413      	add	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001af4:	4b74      	ldr	r3, [pc, #464]	@ (8001cc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	0091      	lsls	r1, r2, #2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	430b      	orrs	r3, r1
 8001b02:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001b0e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b16:	041a      	lsls	r2, r3, #16
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	4413      	add	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001b3c:	4b62      	ldr	r3, [pc, #392]	@ (8001cc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	0091      	lsls	r1, r2, #2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001b68:	4b57      	ldr	r3, [pc, #348]	@ (8001cc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	0091      	lsls	r1, r2, #2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	430b      	orrs	r3, r1
 8001b76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b82:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8a:	041a      	lsls	r2, r3, #16
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001baa:	4b47      	ldr	r3, [pc, #284]	@ (8001cc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	0091      	lsls	r1, r2, #2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001bc4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001be0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be8:	061a      	lsls	r2, r3, #24
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bf8:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009a      	lsls	r2, r3, #2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	441a      	add	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	441a      	add	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001c2e:	fb01 f303 	mul.w	r3, r1, r3
 8001c32:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001c34:	441a      	add	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001c4c:	441a      	add	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001c64:	441a      	add	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	441a      	add	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	441a      	add	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001cb0:	441a      	add	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cbe:	4a04      	ldr	r2, [pc, #16]	@ (8001cd0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d915      	bls.n	8001cf0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001cc4:	e006      	b.n	8001cd4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001cc6:	bf00      	nop
 8001cc8:	ffff0003 	.word	0xffff0003
 8001ccc:	10002b00 	.word	0x10002b00
 8001cd0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cda:	f043 0220 	orr.w	r2, r3, #32
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e010      	b.n	8001d12 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e005      	b.n	8001d04 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3304      	adds	r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d3f3      	bcc.n	8001cf8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d2e:	4b86      	ldr	r3, [pc, #536]	@ (8001f48 <HAL_GPIO_Init+0x228>)
 8001d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d32:	e18c      	b.n	800204e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 817e 	beq.w	8002048 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d005      	beq.n	8001d64 <HAL_GPIO_Init+0x44>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d130      	bne.n	8001dc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	f003 0201 	and.w	r2, r3, #1
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d017      	beq.n	8001e02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2203      	movs	r2, #3
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d123      	bne.n	8001e56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	69b9      	ldr	r1, [r7, #24]
 8001e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0203 	and.w	r2, r3, #3
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80d8 	beq.w	8002048 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e98:	4b2c      	ldr	r3, [pc, #176]	@ (8001f4c <HAL_GPIO_Init+0x22c>)
 8001e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8001f4c <HAL_GPIO_Init+0x22c>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ea8:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <HAL_GPIO_Init+0x22c>)
 8001eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb6:	4a26      	ldr	r2, [pc, #152]	@ (8001f50 <HAL_GPIO_Init+0x230>)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f54 <HAL_GPIO_Init+0x234>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d04a      	beq.n	8001f78 <HAL_GPIO_Init+0x258>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f58 <HAL_GPIO_Init+0x238>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02b      	beq.n	8001f42 <HAL_GPIO_Init+0x222>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a1b      	ldr	r2, [pc, #108]	@ (8001f5c <HAL_GPIO_Init+0x23c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d025      	beq.n	8001f3e <HAL_GPIO_Init+0x21e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f60 <HAL_GPIO_Init+0x240>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01f      	beq.n	8001f3a <HAL_GPIO_Init+0x21a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a19      	ldr	r2, [pc, #100]	@ (8001f64 <HAL_GPIO_Init+0x244>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d019      	beq.n	8001f36 <HAL_GPIO_Init+0x216>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <HAL_GPIO_Init+0x248>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a17      	ldr	r2, [pc, #92]	@ (8001f6c <HAL_GPIO_Init+0x24c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_Init+0x20e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a16      	ldr	r2, [pc, #88]	@ (8001f70 <HAL_GPIO_Init+0x250>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x20a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a15      	ldr	r2, [pc, #84]	@ (8001f74 <HAL_GPIO_Init+0x254>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_Init+0x206>
 8001f22:	2309      	movs	r3, #9
 8001f24:	e029      	b.n	8001f7a <HAL_GPIO_Init+0x25a>
 8001f26:	230a      	movs	r3, #10
 8001f28:	e027      	b.n	8001f7a <HAL_GPIO_Init+0x25a>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e025      	b.n	8001f7a <HAL_GPIO_Init+0x25a>
 8001f2e:	2306      	movs	r3, #6
 8001f30:	e023      	b.n	8001f7a <HAL_GPIO_Init+0x25a>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e021      	b.n	8001f7a <HAL_GPIO_Init+0x25a>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e01f      	b.n	8001f7a <HAL_GPIO_Init+0x25a>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e01d      	b.n	8001f7a <HAL_GPIO_Init+0x25a>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e01b      	b.n	8001f7a <HAL_GPIO_Init+0x25a>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e019      	b.n	8001f7a <HAL_GPIO_Init+0x25a>
 8001f46:	bf00      	nop
 8001f48:	58000080 	.word	0x58000080
 8001f4c:	58024400 	.word	0x58024400
 8001f50:	58000400 	.word	0x58000400
 8001f54:	58020000 	.word	0x58020000
 8001f58:	58020400 	.word	0x58020400
 8001f5c:	58020800 	.word	0x58020800
 8001f60:	58020c00 	.word	0x58020c00
 8001f64:	58021000 	.word	0x58021000
 8001f68:	58021400 	.word	0x58021400
 8001f6c:	58021800 	.word	0x58021800
 8001f70:	58021c00 	.word	0x58021c00
 8001f74:	58022400 	.word	0x58022400
 8001f78:	2300      	movs	r3, #0
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	f002 0203 	and.w	r2, r2, #3
 8001f80:	0092      	lsls	r2, r2, #2
 8001f82:	4093      	lsls	r3, r2
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8a:	4938      	ldr	r1, [pc, #224]	@ (800206c <HAL_GPIO_Init+0x34c>)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	3301      	adds	r3, #1
 800204c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	f47f ae6b 	bne.w	8001d34 <HAL_GPIO_Init+0x14>
  }
}
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	3724      	adds	r7, #36	@ 0x24
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	58000400 	.word	0x58000400

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020b4:	887a      	ldrh	r2, [r7, #2]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4013      	ands	r3, r2
 80020ba:	041a      	lsls	r2, r3, #16
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43d9      	mvns	r1, r3
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	400b      	ands	r3, r1
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	619a      	str	r2, [r3, #24]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80020e0:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <HAL_PWREx_ConfigSupply+0x70>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d00a      	beq.n	8002102 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020ec:	4b16      	ldr	r3, [pc, #88]	@ (8002148 <HAL_PWREx_ConfigSupply+0x70>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e01f      	b.n	800213e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e01d      	b.n	800213e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002102:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <HAL_PWREx_ConfigSupply+0x70>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f023 0207 	bic.w	r2, r3, #7
 800210a:	490f      	ldr	r1, [pc, #60]	@ (8002148 <HAL_PWREx_ConfigSupply+0x70>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4313      	orrs	r3, r2
 8002110:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002112:	f7ff f86f 	bl	80011f4 <HAL_GetTick>
 8002116:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002118:	e009      	b.n	800212e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800211a:	f7ff f86b 	bl	80011f4 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002128:	d901      	bls.n	800212e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e007      	b.n	800213e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_PWREx_ConfigSupply+0x70>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800213a:	d1ee      	bne.n	800211a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	58024800 	.word	0x58024800

0800214c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	@ 0x30
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e3c8      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8087 	beq.w	800227a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216c:	4b88      	ldr	r3, [pc, #544]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002176:	4b86      	ldr	r3, [pc, #536]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800217c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800217e:	2b10      	cmp	r3, #16
 8002180:	d007      	beq.n	8002192 <HAL_RCC_OscConfig+0x46>
 8002182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002184:	2b18      	cmp	r3, #24
 8002186:	d110      	bne.n	80021aa <HAL_RCC_OscConfig+0x5e>
 8002188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d10b      	bne.n	80021aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002192:	4b7f      	ldr	r3, [pc, #508]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d06c      	beq.n	8002278 <HAL_RCC_OscConfig+0x12c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d168      	bne.n	8002278 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e3a2      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x76>
 80021b4:	4b76      	ldr	r3, [pc, #472]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a75      	ldr	r2, [pc, #468]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e02e      	b.n	8002220 <HAL_RCC_OscConfig+0xd4>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x98>
 80021ca:	4b71      	ldr	r3, [pc, #452]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a70      	ldr	r2, [pc, #448]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80021d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6d      	ldr	r2, [pc, #436]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80021dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e01d      	b.n	8002220 <HAL_RCC_OscConfig+0xd4>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0xbc>
 80021ee:	4b68      	ldr	r3, [pc, #416]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a67      	ldr	r2, [pc, #412]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b65      	ldr	r3, [pc, #404]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a64      	ldr	r2, [pc, #400]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0xd4>
 8002208:	4b61      	ldr	r3, [pc, #388]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a60      	ldr	r2, [pc, #384]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 800220e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b5e      	ldr	r3, [pc, #376]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a5d      	ldr	r2, [pc, #372]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800221e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ffe4 	bl	80011f4 <HAL_GetTick>
 800222c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002230:	f7fe ffe0 	bl	80011f4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	@ 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e356      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002242:	4b53      	ldr	r3, [pc, #332]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0xe4>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe ffd0 	bl	80011f4 <HAL_GetTick>
 8002254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002258:	f7fe ffcc 	bl	80011f4 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	@ 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e342      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800226a:	4b49      	ldr	r3, [pc, #292]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x10c>
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 808c 	beq.w	80023a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002288:	4b41      	ldr	r3, [pc, #260]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002290:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002292:	4b3f      	ldr	r3, [pc, #252]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_RCC_OscConfig+0x162>
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	2b18      	cmp	r3, #24
 80022a2:	d137      	bne.n	8002314 <HAL_RCC_OscConfig+0x1c8>
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d132      	bne.n	8002314 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ae:	4b38      	ldr	r3, [pc, #224]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x17a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e314      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022c6:	4b32      	ldr	r3, [pc, #200]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 0219 	bic.w	r2, r3, #25
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	492f      	ldr	r1, [pc, #188]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe ff8c 	bl	80011f4 <HAL_GetTick>
 80022dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e0:	f7fe ff88 	bl	80011f4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e2fe      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022f2:	4b27      	ldr	r3, [pc, #156]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fe:	4b24      	ldr	r3, [pc, #144]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	061b      	lsls	r3, r3, #24
 800230c:	4920      	ldr	r1, [pc, #128]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002312:	e045      	b.n	80023a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d026      	beq.n	800236a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800231c:	4b1c      	ldr	r3, [pc, #112]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 0219 	bic.w	r2, r3, #25
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4919      	ldr	r1, [pc, #100]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7fe ff61 	bl	80011f4 <HAL_GetTick>
 8002332:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002336:	f7fe ff5d 	bl	80011f4 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e2d3      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002348:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	490b      	ldr	r1, [pc, #44]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
 8002368:	e01a      	b.n	80023a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a08      	ldr	r2, [pc, #32]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7fe ff3d 	bl	80011f4 <HAL_GetTick>
 800237a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237e:	f7fe ff39 	bl	80011f4 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d903      	bls.n	8002394 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e2af      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
 8002390:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002394:	4b96      	ldr	r3, [pc, #600]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1ee      	bne.n	800237e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d06a      	beq.n	8002482 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ac:	4b90      	ldr	r3, [pc, #576]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023b6:	4b8e      	ldr	r3, [pc, #568]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80023b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d007      	beq.n	80023d2 <HAL_RCC_OscConfig+0x286>
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b18      	cmp	r3, #24
 80023c6:	d11b      	bne.n	8002400 <HAL_RCC_OscConfig+0x2b4>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d116      	bne.n	8002400 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023d2:	4b87      	ldr	r3, [pc, #540]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x29e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	2b80      	cmp	r3, #128	@ 0x80
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e282      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023ea:	4b81      	ldr	r3, [pc, #516]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	061b      	lsls	r3, r3, #24
 80023f8:	497d      	ldr	r1, [pc, #500]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023fe:	e040      	b.n	8002482 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002408:	4b79      	ldr	r3, [pc, #484]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a78      	ldr	r2, [pc, #480]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 800240e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe feee 	bl	80011f4 <HAL_GetTick>
 8002418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800241c:	f7fe feea 	bl	80011f4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e260      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800242e:	4b70      	ldr	r3, [pc, #448]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800243a:	4b6d      	ldr	r3, [pc, #436]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	061b      	lsls	r3, r3, #24
 8002448:	4969      	ldr	r1, [pc, #420]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	60cb      	str	r3, [r1, #12]
 800244e:	e018      	b.n	8002482 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002450:	4b67      	ldr	r3, [pc, #412]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a66      	ldr	r2, [pc, #408]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 8002456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe feca 	bl	80011f4 <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002464:	f7fe fec6 	bl	80011f4 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e23c      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002476:	4b5e      	ldr	r3, [pc, #376]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d036      	beq.n	80024fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d019      	beq.n	80024ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b56      	ldr	r3, [pc, #344]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 8002498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249a:	4a55      	ldr	r2, [pc, #340]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7fe fea7 	bl	80011f4 <HAL_GetTick>
 80024a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024aa:	f7fe fea3 	bl	80011f4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e219      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024bc:	4b4c      	ldr	r3, [pc, #304]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80024be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x35e>
 80024c8:	e018      	b.n	80024fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ca:	4b49      	ldr	r3, [pc, #292]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80024cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ce:	4a48      	ldr	r2, [pc, #288]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fe fe8d 	bl	80011f4 <HAL_GetTick>
 80024da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024de:	f7fe fe89 	bl	80011f4 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1ff      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024f0:	4b3f      	ldr	r3, [pc, #252]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80024f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d036      	beq.n	8002576 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d019      	beq.n	8002544 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002510:	4b37      	ldr	r3, [pc, #220]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a36      	ldr	r2, [pc, #216]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 8002516:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800251a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800251c:	f7fe fe6a 	bl	80011f4 <HAL_GetTick>
 8002520:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002524:	f7fe fe66 	bl	80011f4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e1dc      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002536:	4b2e      	ldr	r3, [pc, #184]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x3d8>
 8002542:	e018      	b.n	8002576 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002544:	4b2a      	ldr	r3, [pc, #168]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a29      	ldr	r2, [pc, #164]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 800254a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800254e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002550:	f7fe fe50 	bl	80011f4 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002558:	f7fe fe4c 	bl	80011f4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1c2      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800256a:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8086 	beq.w	8002690 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002584:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_RCC_OscConfig+0x4a8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1a      	ldr	r2, [pc, #104]	@ (80025f4 <HAL_RCC_OscConfig+0x4a8>)
 800258a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800258e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002590:	f7fe fe30 	bl	80011f4 <HAL_GetTick>
 8002594:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002598:	f7fe fe2c 	bl	80011f4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	@ 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e1a2      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025aa:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_RCC_OscConfig+0x4a8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d106      	bne.n	80025cc <HAL_RCC_OscConfig+0x480>
 80025be:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c2:	4a0b      	ldr	r2, [pc, #44]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ca:	e032      	b.n	8002632 <HAL_RCC_OscConfig+0x4e6>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d111      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4ac>
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d8:	4a05      	ldr	r2, [pc, #20]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e0:	4b03      	ldr	r3, [pc, #12]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e4:	4a02      	ldr	r2, [pc, #8]	@ (80025f0 <HAL_RCC_OscConfig+0x4a4>)
 80025e6:	f023 0304 	bic.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ec:	e021      	b.n	8002632 <HAL_RCC_OscConfig+0x4e6>
 80025ee:	bf00      	nop
 80025f0:	58024400 	.word	0x58024400
 80025f4:	58024800 	.word	0x58024800
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d10c      	bne.n	800261a <HAL_RCC_OscConfig+0x4ce>
 8002600:	4b83      	ldr	r3, [pc, #524]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002604:	4a82      	ldr	r2, [pc, #520]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	6713      	str	r3, [r2, #112]	@ 0x70
 800260c:	4b80      	ldr	r3, [pc, #512]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002610:	4a7f      	ldr	r2, [pc, #508]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6713      	str	r3, [r2, #112]	@ 0x70
 8002618:	e00b      	b.n	8002632 <HAL_RCC_OscConfig+0x4e6>
 800261a:	4b7d      	ldr	r3, [pc, #500]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261e:	4a7c      	ldr	r2, [pc, #496]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	@ 0x70
 8002626:	4b7a      	ldr	r3, [pc, #488]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262a:	4a79      	ldr	r2, [pc, #484]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d015      	beq.n	8002666 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fe fddb 	bl	80011f4 <HAL_GetTick>
 800263e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe fdd7 	bl	80011f4 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e14b      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002658:	4b6d      	ldr	r3, [pc, #436]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ee      	beq.n	8002642 <HAL_RCC_OscConfig+0x4f6>
 8002664:	e014      	b.n	8002690 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7fe fdc5 	bl	80011f4 <HAL_GetTick>
 800266a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800266c:	e00a      	b.n	8002684 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266e:	f7fe fdc1 	bl	80011f4 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e135      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002684:	4b62      	ldr	r3, [pc, #392]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ee      	bne.n	800266e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 812a 	beq.w	80028ee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800269a:	4b5d      	ldr	r3, [pc, #372]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026a2:	2b18      	cmp	r3, #24
 80026a4:	f000 80ba 	beq.w	800281c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	f040 8095 	bne.w	80027dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b57      	ldr	r3, [pc, #348]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a56      	ldr	r2, [pc, #344]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 80026b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe fd99 	bl	80011f4 <HAL_GetTick>
 80026c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c6:	f7fe fd95 	bl	80011f4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e10b      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 80026e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002814 <HAL_RCC_OscConfig+0x6c8>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	430a      	orrs	r2, r1
 80026f8:	4945      	ldr	r1, [pc, #276]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	3b01      	subs	r3, #1
 8002704:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270c:	3b01      	subs	r3, #1
 800270e:	025b      	lsls	r3, r3, #9
 8002710:	b29b      	uxth	r3, r3
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002718:	3b01      	subs	r3, #1
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002726:	3b01      	subs	r3, #1
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800272e:	4938      	ldr	r1, [pc, #224]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002734:	4b36      	ldr	r3, [pc, #216]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	4a35      	ldr	r2, [pc, #212]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002740:	4b33      	ldr	r3, [pc, #204]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002744:	4b34      	ldr	r3, [pc, #208]	@ (8002818 <HAL_RCC_OscConfig+0x6cc>)
 8002746:	4013      	ands	r3, r2
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800274c:	00d2      	lsls	r2, r2, #3
 800274e:	4930      	ldr	r1, [pc, #192]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002754:	4b2e      	ldr	r3, [pc, #184]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	f023 020c 	bic.w	r2, r3, #12
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	492b      	ldr	r1, [pc, #172]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002766:	4b2a      	ldr	r3, [pc, #168]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276a:	f023 0202 	bic.w	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	4927      	ldr	r1, [pc, #156]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002778:	4b25      	ldr	r3, [pc, #148]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	4a24      	ldr	r2, [pc, #144]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002784:	4b22      	ldr	r3, [pc, #136]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	4a21      	ldr	r2, [pc, #132]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 800278a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800278e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002790:	4b1f      	ldr	r3, [pc, #124]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002794:	4a1e      	ldr	r2, [pc, #120]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002796:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800279a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800279c:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a8:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a18      	ldr	r2, [pc, #96]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 80027ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fd1e 	bl	80011f4 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fd1a 	bl	80011f4 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e090      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027ce:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x670>
 80027da:	e088      	b.n	80028ee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 80027e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fd04 	bl	80011f4 <HAL_GetTick>
 80027ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fd00 	bl	80011f4 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e076      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002802:	4b03      	ldr	r3, [pc, #12]	@ (8002810 <HAL_RCC_OscConfig+0x6c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x6a4>
 800280e:	e06e      	b.n	80028ee <HAL_RCC_OscConfig+0x7a2>
 8002810:	58024400 	.word	0x58024400
 8002814:	fffffc0c 	.word	0xfffffc0c
 8002818:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800281c:	4b36      	ldr	r3, [pc, #216]	@ (80028f8 <HAL_RCC_OscConfig+0x7ac>)
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002822:	4b35      	ldr	r3, [pc, #212]	@ (80028f8 <HAL_RCC_OscConfig+0x7ac>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	2b01      	cmp	r3, #1
 800282e:	d031      	beq.n	8002894 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f003 0203 	and.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d12a      	bne.n	8002894 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d122      	bne.n	8002894 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d11a      	bne.n	8002894 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	0a5b      	lsrs	r3, r3, #9
 8002862:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d111      	bne.n	8002894 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	0c1b      	lsrs	r3, r3, #16
 8002874:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d108      	bne.n	8002894 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	0e1b      	lsrs	r3, r3, #24
 8002886:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e02b      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002898:	4b17      	ldr	r3, [pc, #92]	@ (80028f8 <HAL_RCC_OscConfig+0x7ac>)
 800289a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800289c:	08db      	lsrs	r3, r3, #3
 800289e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d01f      	beq.n	80028ee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80028ae:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <HAL_RCC_OscConfig+0x7ac>)
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	4a11      	ldr	r2, [pc, #68]	@ (80028f8 <HAL_RCC_OscConfig+0x7ac>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028ba:	f7fe fc9b 	bl	80011f4 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80028c0:	bf00      	nop
 80028c2:	f7fe fc97 	bl	80011f4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d0f9      	beq.n	80028c2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028ce:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <HAL_RCC_OscConfig+0x7ac>)
 80028d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028d2:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <HAL_RCC_OscConfig+0x7b0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028da:	00d2      	lsls	r2, r2, #3
 80028dc:	4906      	ldr	r1, [pc, #24]	@ (80028f8 <HAL_RCC_OscConfig+0x7ac>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80028e2:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_RCC_OscConfig+0x7ac>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <HAL_RCC_OscConfig+0x7ac>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3730      	adds	r7, #48	@ 0x30
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	58024400 	.word	0x58024400
 80028fc:	ffff0007 	.word	0xffff0007

08002900 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e19c      	b.n	8002c4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b8a      	ldr	r3, [pc, #552]	@ (8002b40 <HAL_RCC_ClockConfig+0x240>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d910      	bls.n	8002944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b87      	ldr	r3, [pc, #540]	@ (8002b40 <HAL_RCC_ClockConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 020f 	bic.w	r2, r3, #15
 800292a:	4985      	ldr	r1, [pc, #532]	@ (8002b40 <HAL_RCC_ClockConfig+0x240>)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b83      	ldr	r3, [pc, #524]	@ (8002b40 <HAL_RCC_ClockConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e184      	b.n	8002c4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d010      	beq.n	8002972 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	4b7b      	ldr	r3, [pc, #492]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800295c:	429a      	cmp	r2, r3
 800295e:	d908      	bls.n	8002972 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002960:	4b78      	ldr	r3, [pc, #480]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	4975      	ldr	r1, [pc, #468]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 800296e:	4313      	orrs	r3, r2
 8002970:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d010      	beq.n	80029a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	4b70      	ldr	r3, [pc, #448]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800298a:	429a      	cmp	r2, r3
 800298c:	d908      	bls.n	80029a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800298e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	496a      	ldr	r1, [pc, #424]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 800299c:	4313      	orrs	r3, r2
 800299e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d010      	beq.n	80029ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	4b64      	ldr	r3, [pc, #400]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d908      	bls.n	80029ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029bc:	4b61      	ldr	r3, [pc, #388]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	495e      	ldr	r1, [pc, #376]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d010      	beq.n	80029fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	4b59      	ldr	r3, [pc, #356]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d908      	bls.n	80029fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029ea:	4b56      	ldr	r3, [pc, #344]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	4953      	ldr	r1, [pc, #332]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d010      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d908      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b4a      	ldr	r3, [pc, #296]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f023 020f 	bic.w	r2, r3, #15
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4947      	ldr	r1, [pc, #284]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d055      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a36:	4b43      	ldr	r3, [pc, #268]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4940      	ldr	r1, [pc, #256]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d107      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a50:	4b3c      	ldr	r3, [pc, #240]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d121      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0f6      	b.n	8002c4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a68:	4b36      	ldr	r3, [pc, #216]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d115      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0ea      	b.n	8002c4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a80:	4b30      	ldr	r3, [pc, #192]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0de      	b.n	8002c4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a90:	4b2c      	ldr	r3, [pc, #176]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0d6      	b.n	8002c4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aa0:	4b28      	ldr	r3, [pc, #160]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f023 0207 	bic.w	r2, r3, #7
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4925      	ldr	r1, [pc, #148]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab2:	f7fe fb9f 	bl	80011f4 <HAL_GetTick>
 8002ab6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aba:	f7fe fb9b 	bl	80011f4 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0be      	b.n	8002c4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d1eb      	bne.n	8002aba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d010      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d208      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afe:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f023 020f 	bic.w	r2, r3, #15
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	490e      	ldr	r1, [pc, #56]	@ (8002b44 <HAL_RCC_ClockConfig+0x244>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_RCC_ClockConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d214      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_RCC_ClockConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 020f 	bic.w	r2, r3, #15
 8002b26:	4906      	ldr	r1, [pc, #24]	@ (8002b40 <HAL_RCC_ClockConfig+0x240>)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <HAL_RCC_ClockConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e086      	b.n	8002c4e <HAL_RCC_ClockConfig+0x34e>
 8002b40:	52002000 	.word	0x52002000
 8002b44:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d010      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	4b3f      	ldr	r3, [pc, #252]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d208      	bcs.n	8002b76 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b64:	4b3c      	ldr	r3, [pc, #240]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	4939      	ldr	r1, [pc, #228]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d010      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	4b34      	ldr	r3, [pc, #208]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d208      	bcs.n	8002ba4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b92:	4b31      	ldr	r3, [pc, #196]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	492e      	ldr	r1, [pc, #184]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	4b28      	ldr	r3, [pc, #160]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d208      	bcs.n	8002bd2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bc0:	4b25      	ldr	r3, [pc, #148]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	4922      	ldr	r1, [pc, #136]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d010      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d208      	bcs.n	8002c00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bee:	4b1a      	ldr	r3, [pc, #104]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4917      	ldr	r1, [pc, #92]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c00:	f000 f834 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	4912      	ldr	r1, [pc, #72]	@ (8002c5c <HAL_RCC_ClockConfig+0x35c>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <HAL_RCC_ClockConfig+0x358>)
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <HAL_RCC_ClockConfig+0x35c>)
 8002c28:	5cd3      	ldrb	r3, [r2, r3]
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
 8002c34:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <HAL_RCC_ClockConfig+0x360>)
 8002c36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c38:	4a0a      	ldr	r2, [pc, #40]	@ (8002c64 <HAL_RCC_ClockConfig+0x364>)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_RCC_ClockConfig+0x368>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fa8c 	bl	8001160 <HAL_InitTick>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	080048c0 	.word	0x080048c0
 8002c60:	24000004 	.word	0x24000004
 8002c64:	24000000 	.word	0x24000000
 8002c68:	24000008 	.word	0x24000008

08002c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	@ 0x24
 8002c70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c72:	4bb3      	ldr	r3, [pc, #716]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c7a:	2b18      	cmp	r3, #24
 8002c7c:	f200 8155 	bhi.w	8002f2a <HAL_RCC_GetSysClockFreq+0x2be>
 8002c80:	a201      	add	r2, pc, #4	@ (adr r2, 8002c88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c86:	bf00      	nop
 8002c88:	08002ced 	.word	0x08002ced
 8002c8c:	08002f2b 	.word	0x08002f2b
 8002c90:	08002f2b 	.word	0x08002f2b
 8002c94:	08002f2b 	.word	0x08002f2b
 8002c98:	08002f2b 	.word	0x08002f2b
 8002c9c:	08002f2b 	.word	0x08002f2b
 8002ca0:	08002f2b 	.word	0x08002f2b
 8002ca4:	08002f2b 	.word	0x08002f2b
 8002ca8:	08002d13 	.word	0x08002d13
 8002cac:	08002f2b 	.word	0x08002f2b
 8002cb0:	08002f2b 	.word	0x08002f2b
 8002cb4:	08002f2b 	.word	0x08002f2b
 8002cb8:	08002f2b 	.word	0x08002f2b
 8002cbc:	08002f2b 	.word	0x08002f2b
 8002cc0:	08002f2b 	.word	0x08002f2b
 8002cc4:	08002f2b 	.word	0x08002f2b
 8002cc8:	08002d19 	.word	0x08002d19
 8002ccc:	08002f2b 	.word	0x08002f2b
 8002cd0:	08002f2b 	.word	0x08002f2b
 8002cd4:	08002f2b 	.word	0x08002f2b
 8002cd8:	08002f2b 	.word	0x08002f2b
 8002cdc:	08002f2b 	.word	0x08002f2b
 8002ce0:	08002f2b 	.word	0x08002f2b
 8002ce4:	08002f2b 	.word	0x08002f2b
 8002ce8:	08002d1f 	.word	0x08002d1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cec:	4b94      	ldr	r3, [pc, #592]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cf8:	4b91      	ldr	r3, [pc, #580]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	08db      	lsrs	r3, r3, #3
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	4a90      	ldr	r2, [pc, #576]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
 8002d08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002d0a:	e111      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d0c:	4b8d      	ldr	r3, [pc, #564]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d0e:	61bb      	str	r3, [r7, #24]
      break;
 8002d10:	e10e      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d12:	4b8d      	ldr	r3, [pc, #564]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d14:	61bb      	str	r3, [r7, #24]
      break;
 8002d16:	e10b      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d18:	4b8c      	ldr	r3, [pc, #560]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d1a:	61bb      	str	r3, [r7, #24]
      break;
 8002d1c:	e108      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d1e:	4b88      	ldr	r3, [pc, #544]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d28:	4b85      	ldr	r3, [pc, #532]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d34:	4b82      	ldr	r3, [pc, #520]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d3e:	4b80      	ldr	r3, [pc, #512]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d42:	08db      	lsrs	r3, r3, #3
 8002d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	ee07 3a90 	vmov	s15, r3
 8002d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80e1 	beq.w	8002f24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	f000 8083 	beq.w	8002e70 <HAL_RCC_GetSysClockFreq+0x204>
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	f200 80a1 	bhi.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x248>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x114>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d056      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d7e:	e099      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d80:	4b6f      	ldr	r3, [pc, #444]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02d      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	4a6b      	ldr	r2, [pc, #428]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db6:	4b62      	ldr	r3, [pc, #392]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002de6:	e087      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002f54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dfa:	4b51      	ldr	r3, [pc, #324]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e2a:	e065      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002f58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e3e:	4b40      	ldr	r3, [pc, #256]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e6e:	e043      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002f5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e82:	4b2f      	ldr	r3, [pc, #188]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eb2:	e021      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ebe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ef6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	0a5b      	lsrs	r3, r3, #9
 8002efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f02:	3301      	adds	r3, #1
 8002f04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	ee07 3a90 	vmov	s15, r3
 8002f0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f1c:	ee17 3a90 	vmov	r3, s15
 8002f20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002f22:	e005      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
      break;
 8002f28:	e002      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f2a:	4b07      	ldr	r3, [pc, #28]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f2c:	61bb      	str	r3, [r7, #24]
      break;
 8002f2e:	bf00      	nop
  }

  return sysclockfreq;
 8002f30:	69bb      	ldr	r3, [r7, #24]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	@ 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	58024400 	.word	0x58024400
 8002f44:	03d09000 	.word	0x03d09000
 8002f48:	003d0900 	.word	0x003d0900
 8002f4c:	017d7840 	.word	0x017d7840
 8002f50:	46000000 	.word	0x46000000
 8002f54:	4c742400 	.word	0x4c742400
 8002f58:	4a742400 	.word	0x4a742400
 8002f5c:	4bbebc20 	.word	0x4bbebc20

08002f60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f64:	b0c6      	sub	sp, #280	@ 0x118
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002f84:	2500      	movs	r5, #0
 8002f86:	ea54 0305 	orrs.w	r3, r4, r5
 8002f8a:	d049      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f96:	d02f      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002f98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f9c:	d828      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fa2:	d01a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fa8:	d822      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fb2:	d007      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fb4:	e01c      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb6:	4bab      	ldr	r3, [pc, #684]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fba:	4aaa      	ldr	r2, [pc, #680]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fc2:	e01a      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fc8:	3308      	adds	r3, #8
 8002fca:	2102      	movs	r1, #2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 f967 	bl	80042a0 <RCCEx_PLL2_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fd8:	e00f      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fde:	3328      	adds	r3, #40	@ 0x28
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 fa0e 	bl	8004404 <RCCEx_PLL3_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fee:	e004      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ff6:	e000      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003002:	4b98      	ldr	r3, [pc, #608]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003006:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800300a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800300e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003010:	4a94      	ldr	r2, [pc, #592]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003012:	430b      	orrs	r3, r1
 8003014:	6513      	str	r3, [r2, #80]	@ 0x50
 8003016:	e003      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800301c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800302c:	f04f 0900 	mov.w	r9, #0
 8003030:	ea58 0309 	orrs.w	r3, r8, r9
 8003034:	d047      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800303a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303c:	2b04      	cmp	r3, #4
 800303e:	d82a      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003040:	a201      	add	r2, pc, #4	@ (adr r2, 8003048 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800305d 	.word	0x0800305d
 800304c:	0800306b 	.word	0x0800306b
 8003050:	08003081 	.word	0x08003081
 8003054:	0800309f 	.word	0x0800309f
 8003058:	0800309f 	.word	0x0800309f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800305c:	4b81      	ldr	r3, [pc, #516]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	4a80      	ldr	r2, [pc, #512]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003068:	e01a      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800306a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800306e:	3308      	adds	r3, #8
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f001 f914 	bl	80042a0 <RCCEx_PLL2_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800307e:	e00f      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003084:	3328      	adds	r3, #40	@ 0x28
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f001 f9bb 	bl	8004404 <RCCEx_PLL3_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003094:	e004      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800309c:	e000      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800309e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030a8:	4b6e      	ldr	r3, [pc, #440]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ac:	f023 0107 	bic.w	r1, r3, #7
 80030b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	4a6b      	ldr	r2, [pc, #428]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80030bc:	e003      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80030c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80030d2:	f04f 0b00 	mov.w	fp, #0
 80030d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80030da:	d05b      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80030dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80030e4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80030e8:	d03b      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80030ea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80030ee:	d834      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80030f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030f4:	d037      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80030f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030fa:	d82e      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80030fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003100:	d033      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003102:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003106:	d828      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003108:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800310c:	d01a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800310e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003112:	d822      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003118:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800311c:	d007      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800311e:	e01c      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003120:	4b50      	ldr	r3, [pc, #320]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003124:	4a4f      	ldr	r2, [pc, #316]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800312a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800312c:	e01e      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800312e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003132:	3308      	adds	r3, #8
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f001 f8b2 	bl	80042a0 <RCCEx_PLL2_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003142:	e013      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003148:	3328      	adds	r3, #40	@ 0x28
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f001 f959 	bl	8004404 <RCCEx_PLL3_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003158:	e008      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003160:	e004      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003162:	bf00      	nop
 8003164:	e002      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800316a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800316c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10b      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003174:	4b3b      	ldr	r3, [pc, #236]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003178:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800317c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003180:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003184:	4a37      	ldr	r2, [pc, #220]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003186:	430b      	orrs	r3, r1
 8003188:	6593      	str	r3, [r2, #88]	@ 0x58
 800318a:	e003      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003190:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80031a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80031aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80031ae:	460b      	mov	r3, r1
 80031b0:	4313      	orrs	r3, r2
 80031b2:	d05d      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80031b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80031bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80031c0:	d03b      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80031c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80031c6:	d834      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031cc:	d037      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80031ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031d2:	d82e      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031d8:	d033      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80031da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031de:	d828      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031e4:	d01a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80031e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031ea:	d822      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80031f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f4:	d007      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80031f6:	e01c      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	4a19      	ldr	r2, [pc, #100]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003204:	e01e      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800320a:	3308      	adds	r3, #8
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f001 f846 	bl	80042a0 <RCCEx_PLL2_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800321a:	e013      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800321c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003220:	3328      	adds	r3, #40	@ 0x28
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f001 f8ed 	bl	8004404 <RCCEx_PLL3_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003230:	e008      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003238:	e004      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800323a:	bf00      	nop
 800323c:	e002      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800323e:	bf00      	nop
 8003240:	e000      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10d      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003250:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003258:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800325c:	4a01      	ldr	r2, [pc, #4]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800325e:	430b      	orrs	r3, r1
 8003260:	6593      	str	r3, [r2, #88]	@ 0x58
 8003262:	e005      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003264:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800326c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800327c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003280:	2300      	movs	r3, #0
 8003282:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003286:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800328a:	460b      	mov	r3, r1
 800328c:	4313      	orrs	r3, r2
 800328e:	d03a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003296:	2b30      	cmp	r3, #48	@ 0x30
 8003298:	d01f      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800329a:	2b30      	cmp	r3, #48	@ 0x30
 800329c:	d819      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d00c      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d815      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d019      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d111      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ae:	4baa      	ldr	r3, [pc, #680]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b2:	4aa9      	ldr	r2, [pc, #676]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032ba:	e011      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032c0:	3308      	adds	r3, #8
 80032c2:	2102      	movs	r1, #2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 ffeb 	bl	80042a0 <RCCEx_PLL2_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032d0:	e006      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032d8:	e002      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80032de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80032e8:	4b9b      	ldr	r3, [pc, #620]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80032f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f6:	4a98      	ldr	r2, [pc, #608]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032f8:	430b      	orrs	r3, r1
 80032fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032fc:	e003      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003302:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003312:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003316:	2300      	movs	r3, #0
 8003318:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800331c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003320:	460b      	mov	r3, r1
 8003322:	4313      	orrs	r3, r2
 8003324:	d051      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800332a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003330:	d035      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003332:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003336:	d82e      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003338:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800333c:	d031      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800333e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003342:	d828      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003348:	d01a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800334a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800334e:	d822      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003358:	d007      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800335a:	e01c      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800335c:	4b7e      	ldr	r3, [pc, #504]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	4a7d      	ldr	r2, [pc, #500]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003368:	e01c      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800336a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800336e:	3308      	adds	r3, #8
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f000 ff94 	bl	80042a0 <RCCEx_PLL2_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800337e:	e011      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003384:	3328      	adds	r3, #40	@ 0x28
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f001 f83b 	bl	8004404 <RCCEx_PLL3_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003394:	e006      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800339c:	e002      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800339e:	bf00      	nop
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80033a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80033b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	4a67      	ldr	r2, [pc, #412]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033bc:	430b      	orrs	r3, r1
 80033be:	6513      	str	r3, [r2, #80]	@ 0x50
 80033c0:	e003      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80033d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033da:	2300      	movs	r3, #0
 80033dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033e0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4313      	orrs	r3, r2
 80033e8:	d053      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80033ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f4:	d033      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80033f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033fa:	d82c      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80033fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003400:	d02f      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003402:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003406:	d826      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003408:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800340c:	d02b      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800340e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003412:	d820      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003418:	d012      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800341a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800341e:	d81a      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d022      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003428:	d115      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800342a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342e:	3308      	adds	r3, #8
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f000 ff34 	bl	80042a0 <RCCEx_PLL2_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800343e:	e015      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003444:	3328      	adds	r3, #40	@ 0x28
 8003446:	2101      	movs	r1, #1
 8003448:	4618      	mov	r0, r3
 800344a:	f000 ffdb 	bl	8004404 <RCCEx_PLL3_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003454:	e00a      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800345c:	e006      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800345e:	bf00      	nop
 8003460:	e004      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003462:	bf00      	nop
 8003464:	e002      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800346a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003474:	4b38      	ldr	r3, [pc, #224]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003478:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800347c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003482:	4a35      	ldr	r2, [pc, #212]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003484:	430b      	orrs	r3, r1
 8003486:	6513      	str	r3, [r2, #80]	@ 0x50
 8003488:	e003      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800348e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800349e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80034a8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034ac:	460b      	mov	r3, r1
 80034ae:	4313      	orrs	r3, r2
 80034b0:	d058      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80034b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80034ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034be:	d033      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80034c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034c4:	d82c      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ca:	d02f      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d0:	d826      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034d6:	d02b      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80034d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034dc:	d820      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034e2:	d012      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80034e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034e8:	d81a      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d022      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80034ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034f2:	d115      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f8:	3308      	adds	r3, #8
 80034fa:	2101      	movs	r1, #1
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fecf 	bl	80042a0 <RCCEx_PLL2_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003508:	e015      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800350a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800350e:	3328      	adds	r3, #40	@ 0x28
 8003510:	2101      	movs	r1, #1
 8003512:	4618      	mov	r0, r3
 8003514:	f000 ff76 	bl	8004404 <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800351e:	e00a      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003526:	e006      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003528:	bf00      	nop
 800352a:	e004      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800352c:	bf00      	nop
 800352e:	e002      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003530:	bf00      	nop
 8003532:	e000      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003536:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10e      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800353e:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003542:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800354a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800354e:	4a02      	ldr	r2, [pc, #8]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003550:	430b      	orrs	r3, r1
 8003552:	6593      	str	r3, [r2, #88]	@ 0x58
 8003554:	e006      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003556:	bf00      	nop
 8003558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003560:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800357a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800357e:	460b      	mov	r3, r1
 8003580:	4313      	orrs	r3, r2
 8003582:	d037      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800358a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800358e:	d00e      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003594:	d816      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d018      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800359a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800359e:	d111      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a0:	4bc4      	ldr	r3, [pc, #784]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a4:	4ac3      	ldr	r2, [pc, #780]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035ac:	e00f      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b2:	3308      	adds	r3, #8
 80035b4:	2101      	movs	r1, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fe72 	bl	80042a0 <RCCEx_PLL2_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035c2:	e004      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035ca:	e000      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80035cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035d6:	4bb7      	ldr	r3, [pc, #732]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80035de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e4:	4ab3      	ldr	r2, [pc, #716]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80035ea:	e003      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80035f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003600:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800360a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800360e:	460b      	mov	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	d039      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361a:	2b03      	cmp	r3, #3
 800361c:	d81c      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800361e:	a201      	add	r2, pc, #4	@ (adr r2, 8003624 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003624:	08003661 	.word	0x08003661
 8003628:	08003635 	.word	0x08003635
 800362c:	08003643 	.word	0x08003643
 8003630:	08003661 	.word	0x08003661
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003634:	4b9f      	ldr	r3, [pc, #636]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	4a9e      	ldr	r2, [pc, #632]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800363a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800363e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003640:	e00f      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003646:	3308      	adds	r3, #8
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fe28 	bl	80042a0 <RCCEx_PLL2_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003656:	e004      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800366a:	4b92      	ldr	r3, [pc, #584]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800366c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366e:	f023 0103 	bic.w	r1, r3, #3
 8003672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003678:	4a8e      	ldr	r2, [pc, #568]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800367a:	430b      	orrs	r3, r1
 800367c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800367e:	e003      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003684:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800369e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f000 8099 	beq.w	80037dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036aa:	4b83      	ldr	r3, [pc, #524]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a82      	ldr	r2, [pc, #520]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b6:	f7fd fd9d 	bl	80011f4 <HAL_GetTick>
 80036ba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036be:	e00b      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c0:	f7fd fd98 	bl	80011f4 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b64      	cmp	r3, #100	@ 0x64
 80036ce:	d903      	bls.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036d6:	e005      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036d8:	4b77      	ldr	r3, [pc, #476]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ed      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80036e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d173      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80036ec:	4b71      	ldr	r3, [pc, #452]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036f8:	4053      	eors	r3, r2
 80036fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d015      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003702:	4b6c      	ldr	r3, [pc, #432]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800370a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370e:	4b69      	ldr	r3, [pc, #420]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	4a68      	ldr	r2, [pc, #416]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003718:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371a:	4b66      	ldr	r3, [pc, #408]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	4a65      	ldr	r2, [pc, #404]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003724:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003726:	4a63      	ldr	r2, [pc, #396]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800372c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800372e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003732:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800373a:	d118      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fd fd5a 	bl	80011f4 <HAL_GetTick>
 8003740:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003744:	e00d      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fd fd55 	bl	80011f4 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003750:	1ad2      	subs	r2, r2, r3
 8003752:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003756:	429a      	cmp	r2, r3
 8003758:	d903      	bls.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003760:	e005      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003762:	4b54      	ldr	r3, [pc, #336]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0eb      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800376e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003772:	2b00      	cmp	r3, #0
 8003774:	d129      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800377e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003782:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003786:	d10e      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003788:	4b4a      	ldr	r3, [pc, #296]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003794:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003798:	091a      	lsrs	r2, r3, #4
 800379a:	4b48      	ldr	r3, [pc, #288]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800379c:	4013      	ands	r3, r2
 800379e:	4a45      	ldr	r2, [pc, #276]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6113      	str	r3, [r2, #16]
 80037a4:	e005      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80037a6:	4b43      	ldr	r3, [pc, #268]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	4a42      	ldr	r2, [pc, #264]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80037b0:	6113      	str	r3, [r2, #16]
 80037b2:	4b40      	ldr	r3, [pc, #256]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80037b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c2:	4a3c      	ldr	r2, [pc, #240]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c8:	e008      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80037d2:	e003      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80037dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	f002 0301 	and.w	r3, r2, #1
 80037e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037ec:	2300      	movs	r3, #0
 80037ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80037f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80037f6:	460b      	mov	r3, r1
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f000 808f 	beq.w	800391c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80037fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003802:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003804:	2b28      	cmp	r3, #40	@ 0x28
 8003806:	d871      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003808:	a201      	add	r2, pc, #4	@ (adr r2, 8003810 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	080038f5 	.word	0x080038f5
 8003814:	080038ed 	.word	0x080038ed
 8003818:	080038ed 	.word	0x080038ed
 800381c:	080038ed 	.word	0x080038ed
 8003820:	080038ed 	.word	0x080038ed
 8003824:	080038ed 	.word	0x080038ed
 8003828:	080038ed 	.word	0x080038ed
 800382c:	080038ed 	.word	0x080038ed
 8003830:	080038c1 	.word	0x080038c1
 8003834:	080038ed 	.word	0x080038ed
 8003838:	080038ed 	.word	0x080038ed
 800383c:	080038ed 	.word	0x080038ed
 8003840:	080038ed 	.word	0x080038ed
 8003844:	080038ed 	.word	0x080038ed
 8003848:	080038ed 	.word	0x080038ed
 800384c:	080038ed 	.word	0x080038ed
 8003850:	080038d7 	.word	0x080038d7
 8003854:	080038ed 	.word	0x080038ed
 8003858:	080038ed 	.word	0x080038ed
 800385c:	080038ed 	.word	0x080038ed
 8003860:	080038ed 	.word	0x080038ed
 8003864:	080038ed 	.word	0x080038ed
 8003868:	080038ed 	.word	0x080038ed
 800386c:	080038ed 	.word	0x080038ed
 8003870:	080038f5 	.word	0x080038f5
 8003874:	080038ed 	.word	0x080038ed
 8003878:	080038ed 	.word	0x080038ed
 800387c:	080038ed 	.word	0x080038ed
 8003880:	080038ed 	.word	0x080038ed
 8003884:	080038ed 	.word	0x080038ed
 8003888:	080038ed 	.word	0x080038ed
 800388c:	080038ed 	.word	0x080038ed
 8003890:	080038f5 	.word	0x080038f5
 8003894:	080038ed 	.word	0x080038ed
 8003898:	080038ed 	.word	0x080038ed
 800389c:	080038ed 	.word	0x080038ed
 80038a0:	080038ed 	.word	0x080038ed
 80038a4:	080038ed 	.word	0x080038ed
 80038a8:	080038ed 	.word	0x080038ed
 80038ac:	080038ed 	.word	0x080038ed
 80038b0:	080038f5 	.word	0x080038f5
 80038b4:	58024400 	.word	0x58024400
 80038b8:	58024800 	.word	0x58024800
 80038bc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c4:	3308      	adds	r3, #8
 80038c6:	2101      	movs	r1, #1
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fce9 	bl	80042a0 <RCCEx_PLL2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80038d4:	e00f      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038da:	3328      	adds	r3, #40	@ 0x28
 80038dc:	2101      	movs	r1, #1
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fd90 	bl	8004404 <RCCEx_PLL3_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80038ea:	e004      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038f2:	e000      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80038f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80038fe:	4bbf      	ldr	r3, [pc, #764]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800390a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800390c:	4abb      	ldr	r2, [pc, #748]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800390e:	430b      	orrs	r3, r1
 8003910:	6553      	str	r3, [r2, #84]	@ 0x54
 8003912:	e003      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003918:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800391c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f002 0302 	and.w	r3, r2, #2
 8003928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800392c:	2300      	movs	r3, #0
 800392e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003932:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	d041      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800393c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003942:	2b05      	cmp	r3, #5
 8003944:	d824      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003946:	a201      	add	r2, pc, #4	@ (adr r2, 800394c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	08003999 	.word	0x08003999
 8003950:	08003965 	.word	0x08003965
 8003954:	0800397b 	.word	0x0800397b
 8003958:	08003999 	.word	0x08003999
 800395c:	08003999 	.word	0x08003999
 8003960:	08003999 	.word	0x08003999
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003968:	3308      	adds	r3, #8
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fc97 	bl	80042a0 <RCCEx_PLL2_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003978:	e00f      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397e:	3328      	adds	r3, #40	@ 0x28
 8003980:	2101      	movs	r1, #1
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fd3e 	bl	8004404 <RCCEx_PLL3_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800398e:	e004      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003996:	e000      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039a2:	4b96      	ldr	r3, [pc, #600]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a6:	f023 0107 	bic.w	r1, r3, #7
 80039aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b0:	4a92      	ldr	r2, [pc, #584]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039b2:	430b      	orrs	r3, r1
 80039b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80039b6:	e003      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f002 0304 	and.w	r3, r2, #4
 80039cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039da:	460b      	mov	r3, r1
 80039dc:	4313      	orrs	r3, r2
 80039de:	d044      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80039e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d825      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80039ec:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a41 	.word	0x08003a41
 80039f8:	08003a0d 	.word	0x08003a0d
 80039fc:	08003a23 	.word	0x08003a23
 8003a00:	08003a41 	.word	0x08003a41
 8003a04:	08003a41 	.word	0x08003a41
 8003a08:	08003a41 	.word	0x08003a41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a10:	3308      	adds	r3, #8
 8003a12:	2101      	movs	r1, #1
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fc43 	bl	80042a0 <RCCEx_PLL2_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a20:	e00f      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a26:	3328      	adds	r3, #40	@ 0x28
 8003a28:	2101      	movs	r1, #1
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fcea 	bl	8004404 <RCCEx_PLL3_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a36:	e004      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a3e:	e000      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10b      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a4a:	4b6c      	ldr	r3, [pc, #432]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4e:	f023 0107 	bic.w	r1, r3, #7
 8003a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5a:	4a68      	ldr	r2, [pc, #416]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a60:	e003      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f002 0320 	and.w	r3, r2, #32
 8003a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4313      	orrs	r3, r2
 8003a88:	d055      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a96:	d033      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a9c:	d82c      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa2:	d02f      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa8:	d826      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003aaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003aae:	d02b      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003ab0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ab4:	d820      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aba:	d012      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ac0:	d81a      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d022      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003ac6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aca:	d115      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fbe3 	bl	80042a0 <RCCEx_PLL2_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ae0:	e015      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae6:	3328      	adds	r3, #40	@ 0x28
 8003ae8:	2102      	movs	r1, #2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fc8a 	bl	8004404 <RCCEx_PLL3_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003af6:	e00a      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003afe:	e006      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b00:	bf00      	nop
 8003b02:	e004      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b04:	bf00      	nop
 8003b06:	e002      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b08:	bf00      	nop
 8003b0a:	e000      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b16:	4b39      	ldr	r3, [pc, #228]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b26:	4a35      	ldr	r2, [pc, #212]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b2c:	e003      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003b42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b46:	2300      	movs	r3, #0
 8003b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b4c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b50:	460b      	mov	r3, r1
 8003b52:	4313      	orrs	r3, r2
 8003b54:	d058      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b62:	d033      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003b64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b68:	d82c      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b6e:	d02f      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b74:	d826      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003b76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b7a:	d02b      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003b7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b80:	d820      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003b82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b86:	d012      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b8c:	d81a      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d022      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b96:	d115      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fb7d 	bl	80042a0 <RCCEx_PLL2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003bac:	e015      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb2:	3328      	adds	r3, #40	@ 0x28
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fc24 	bl	8004404 <RCCEx_PLL3_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003bc2:	e00a      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bca:	e006      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003bcc:	bf00      	nop
 8003bce:	e004      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003bd0:	bf00      	nop
 8003bd2:	e002      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10e      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bf2:	4a02      	ldr	r2, [pc, #8]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bf8:	e006      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003bfa:	bf00      	nop
 8003bfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003c14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003c22:	460b      	mov	r3, r1
 8003c24:	4313      	orrs	r3, r2
 8003c26:	d055      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c34:	d033      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003c36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c3a:	d82c      	bhi.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c40:	d02f      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c46:	d826      	bhi.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003c4c:	d02b      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003c4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003c52:	d820      	bhi.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c58:	d012      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c5e:	d81a      	bhi.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d022      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c68:	d115      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c6e:	3308      	adds	r3, #8
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fb14 	bl	80042a0 <RCCEx_PLL2_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c7e:	e015      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c84:	3328      	adds	r3, #40	@ 0x28
 8003c86:	2102      	movs	r1, #2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fbbb 	bl	8004404 <RCCEx_PLL3_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c94:	e00a      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c9c:	e006      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003c9e:	bf00      	nop
 8003ca0:	e004      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ca2:	bf00      	nop
 8003ca4:	e002      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ca6:	bf00      	nop
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003cb4:	4ba0      	ldr	r3, [pc, #640]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cc4:	4a9c      	ldr	r2, [pc, #624]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cca:	e003      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f002 0308 	and.w	r3, r2, #8
 8003ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003cea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	d01e      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d06:	3328      	adds	r3, #40	@ 0x28
 8003d08:	2102      	movs	r1, #2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fb7a 	bl	8004404 <RCCEx_PLL3_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003d1c:	4b86      	ldr	r3, [pc, #536]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d2c:	4a82      	ldr	r2, [pc, #520]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	f002 0310 	and.w	r3, r2, #16
 8003d3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d42:	2300      	movs	r3, #0
 8003d44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d48:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	d01e      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d64:	3328      	adds	r3, #40	@ 0x28
 8003d66:	2102      	movs	r1, #2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fb4b 	bl	8004404 <RCCEx_PLL3_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8a:	4a6b      	ldr	r2, [pc, #428]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003d9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d9e:	2300      	movs	r3, #0
 8003da0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003da2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003da6:	460b      	mov	r3, r1
 8003da8:	4313      	orrs	r3, r2
 8003daa:	d03e      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003db8:	d022      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dbe:	d81b      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc8:	d00b      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003dca:	e015      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fa63 	bl	80042a0 <RCCEx_PLL2_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003de0:	e00f      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de6:	3328      	adds	r3, #40	@ 0x28
 8003de8:	2102      	movs	r1, #2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fb0a 	bl	8004404 <RCCEx_PLL3_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003df6:	e004      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e1a:	4a47      	ldr	r2, [pc, #284]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e20:	e003      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e36:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e38:	2300      	movs	r3, #0
 8003e3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003e40:	460b      	mov	r3, r1
 8003e42:	4313      	orrs	r3, r2
 8003e44:	d03b      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e52:	d01f      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003e54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e58:	d818      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003e5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e5e:	d003      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003e60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e64:	d007      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003e66:	e011      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e68:	4b33      	ldr	r3, [pc, #204]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	4a32      	ldr	r2, [pc, #200]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e74:	e00f      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e7a:	3328      	adds	r3, #40	@ 0x28
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fac0 	bl	8004404 <RCCEx_PLL3_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e8a:	e004      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e92:	e000      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e9e:	4b26      	ldr	r3, [pc, #152]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eae:	4a22      	ldr	r2, [pc, #136]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003eb4:	e003      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003eca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ecc:	2300      	movs	r3, #0
 8003ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ed0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	d034      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee8:	d007      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003eea:	e011      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	4a11      	ldr	r2, [pc, #68]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ef8:	e00e      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efe:	3308      	adds	r3, #8
 8003f00:	2102      	movs	r1, #2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f9cc 	bl	80042a0 <RCCEx_PLL2_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f0e:	e003      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10d      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f20:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2e:	4a02      	ldr	r2, [pc, #8]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f30:	430b      	orrs	r3, r1
 8003f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f34:	e006      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003f36:	bf00      	nop
 8003f38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003f50:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f52:	2300      	movs	r3, #0
 8003f54:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f56:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	d00c      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f64:	3328      	adds	r3, #40	@ 0x28
 8003f66:	2102      	movs	r1, #2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fa4b 	bl	8004404 <RCCEx_PLL3_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003f86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f88:	2300      	movs	r3, #0
 8003f8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f8c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003f90:	460b      	mov	r3, r1
 8003f92:	4313      	orrs	r3, r2
 8003f94:	d036      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fa0:	d018      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003fa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fa6:	d811      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fac:	d014      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fb2:	d80b      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d011      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003fb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fbc:	d106      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fbe:	4bb7      	ldr	r3, [pc, #732]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	4ab6      	ldr	r2, [pc, #728]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003fca:	e008      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fd2:	e004      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003fd4:	bf00      	nop
 8003fd6:	e002      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003fd8:	bf00      	nop
 8003fda:	e000      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fe6:	4bad      	ldr	r3, [pc, #692]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ff4:	4aa9      	ldr	r2, [pc, #676]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ffa:	e003      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004000:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004010:	653b      	str	r3, [r7, #80]	@ 0x50
 8004012:	2300      	movs	r3, #0
 8004014:	657b      	str	r3, [r7, #84]	@ 0x54
 8004016:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800401a:	460b      	mov	r3, r1
 800401c:	4313      	orrs	r3, r2
 800401e:	d009      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004020:	4b9e      	ldr	r3, [pc, #632]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004024:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402e:	4a9b      	ldr	r2, [pc, #620]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004030:	430b      	orrs	r3, r1
 8004032:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004042:	2300      	movs	r3, #0
 8004044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004046:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d009      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004050:	4b92      	ldr	r3, [pc, #584]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004054:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800405c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800405e:	4a8f      	ldr	r2, [pc, #572]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004060:	430b      	orrs	r3, r1
 8004062:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004070:	643b      	str	r3, [r7, #64]	@ 0x40
 8004072:	2300      	movs	r3, #0
 8004074:	647b      	str	r3, [r7, #68]	@ 0x44
 8004076:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	d00e      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004080:	4b86      	ldr	r3, [pc, #536]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	4a85      	ldr	r2, [pc, #532]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004086:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800408a:	6113      	str	r3, [r2, #16]
 800408c:	4b83      	ldr	r3, [pc, #524]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800408e:	6919      	ldr	r1, [r3, #16]
 8004090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004094:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004098:	4a80      	ldr	r2, [pc, #512]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800409a:	430b      	orrs	r3, r1
 800409c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800409e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80040aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040ac:	2300      	movs	r3, #0
 80040ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80040b4:	460b      	mov	r3, r1
 80040b6:	4313      	orrs	r3, r2
 80040b8:	d009      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80040ba:	4b78      	ldr	r3, [pc, #480]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80040c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c8:	4a74      	ldr	r2, [pc, #464]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040ca:	430b      	orrs	r3, r1
 80040cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80040da:	633b      	str	r3, [r7, #48]	@ 0x30
 80040dc:	2300      	movs	r3, #0
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80040e4:	460b      	mov	r3, r1
 80040e6:	4313      	orrs	r3, r2
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040ea:	4b6c      	ldr	r3, [pc, #432]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80040f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	4a68      	ldr	r2, [pc, #416]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	2100      	movs	r1, #0
 800410a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004112:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	d011      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800411c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004120:	3308      	adds	r3, #8
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f8bb 	bl	80042a0 <RCCEx_PLL2_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800413c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	2100      	movs	r1, #0
 800414a:	6239      	str	r1, [r7, #32]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
 8004152:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004156:	460b      	mov	r3, r1
 8004158:	4313      	orrs	r3, r2
 800415a:	d011      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800415c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004160:	3308      	adds	r3, #8
 8004162:	2101      	movs	r1, #1
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f89b 	bl	80042a0 <RCCEx_PLL2_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800417c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	2100      	movs	r1, #0
 800418a:	61b9      	str	r1, [r7, #24]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004196:	460b      	mov	r3, r1
 8004198:	4313      	orrs	r3, r2
 800419a:	d011      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800419c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a0:	3308      	adds	r3, #8
 80041a2:	2102      	movs	r1, #2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f87b 	bl	80042a0 <RCCEx_PLL2_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80041b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80041c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c8:	2100      	movs	r1, #0
 80041ca:	6139      	str	r1, [r7, #16]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80041d6:	460b      	mov	r3, r1
 80041d8:	4313      	orrs	r3, r2
 80041da:	d011      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e0:	3328      	adds	r3, #40	@ 0x28
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 f90d 	bl	8004404 <RCCEx_PLL3_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80041f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	2100      	movs	r1, #0
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004216:	460b      	mov	r3, r1
 8004218:	4313      	orrs	r3, r2
 800421a:	d011      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800421c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004220:	3328      	adds	r3, #40	@ 0x28
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f000 f8ed 	bl	8004404 <RCCEx_PLL3_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004230:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004238:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800423c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	2100      	movs	r1, #0
 800424a:	6039      	str	r1, [r7, #0]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	607b      	str	r3, [r7, #4]
 8004252:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004256:	460b      	mov	r3, r1
 8004258:	4313      	orrs	r3, r2
 800425a:	d011      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800425c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004260:	3328      	adds	r3, #40	@ 0x28
 8004262:	2102      	movs	r1, #2
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f8cd 	bl	8004404 <RCCEx_PLL3_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800427c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004280:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
}
 800428e:	4618      	mov	r0, r3
 8004290:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004294:	46bd      	mov	sp, r7
 8004296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800429a:	bf00      	nop
 800429c:	58024400 	.word	0x58024400

080042a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042ae:	4b53      	ldr	r3, [pc, #332]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80042b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d101      	bne.n	80042be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e099      	b.n	80043f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042be:	4b4f      	ldr	r3, [pc, #316]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a4e      	ldr	r2, [pc, #312]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80042c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ca:	f7fc ff93 	bl	80011f4 <HAL_GetTick>
 80042ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042d0:	e008      	b.n	80042e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042d2:	f7fc ff8f 	bl	80011f4 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e086      	b.n	80043f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042e4:	4b45      	ldr	r3, [pc, #276]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f0      	bne.n	80042d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042f0:	4b42      	ldr	r3, [pc, #264]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80042f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	031b      	lsls	r3, r3, #12
 80042fe:	493f      	ldr	r1, [pc, #252]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 8004300:	4313      	orrs	r3, r2
 8004302:	628b      	str	r3, [r1, #40]	@ 0x28
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	3b01      	subs	r3, #1
 800430a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	3b01      	subs	r3, #1
 8004314:	025b      	lsls	r3, r3, #9
 8004316:	b29b      	uxth	r3, r3
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	3b01      	subs	r3, #1
 8004320:	041b      	lsls	r3, r3, #16
 8004322:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	3b01      	subs	r3, #1
 800432e:	061b      	lsls	r3, r3, #24
 8004330:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004334:	4931      	ldr	r1, [pc, #196]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 8004336:	4313      	orrs	r3, r2
 8004338:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800433a:	4b30      	ldr	r3, [pc, #192]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 800433c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	492d      	ldr	r1, [pc, #180]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800434c:	4b2b      	ldr	r3, [pc, #172]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 800434e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004350:	f023 0220 	bic.w	r2, r3, #32
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	4928      	ldr	r1, [pc, #160]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 800435a:	4313      	orrs	r3, r2
 800435c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800435e:	4b27      	ldr	r3, [pc, #156]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 8004360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004362:	4a26      	ldr	r2, [pc, #152]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 8004364:	f023 0310 	bic.w	r3, r3, #16
 8004368:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800436a:	4b24      	ldr	r3, [pc, #144]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 800436c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800436e:	4b24      	ldr	r3, [pc, #144]	@ (8004400 <RCCEx_PLL2_Config+0x160>)
 8004370:	4013      	ands	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	69d2      	ldr	r2, [r2, #28]
 8004376:	00d2      	lsls	r2, r2, #3
 8004378:	4920      	ldr	r1, [pc, #128]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800437e:	4b1f      	ldr	r3, [pc, #124]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	4a1e      	ldr	r2, [pc, #120]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 8004384:	f043 0310 	orr.w	r3, r3, #16
 8004388:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d106      	bne.n	800439e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004390:	4b1a      	ldr	r3, [pc, #104]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	4a19      	ldr	r2, [pc, #100]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 8004396:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800439a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800439c:	e00f      	b.n	80043be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d106      	bne.n	80043b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043a4:	4b15      	ldr	r3, [pc, #84]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80043a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a8:	4a14      	ldr	r2, [pc, #80]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80043aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043b0:	e005      	b.n	80043be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043b2:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	4a11      	ldr	r2, [pc, #68]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80043b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80043bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043be:	4b0f      	ldr	r3, [pc, #60]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a0e      	ldr	r2, [pc, #56]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80043c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ca:	f7fc ff13 	bl	80011f4 <HAL_GetTick>
 80043ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043d0:	e008      	b.n	80043e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043d2:	f7fc ff0f 	bl	80011f4 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e006      	b.n	80043f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043e4:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <RCCEx_PLL2_Config+0x15c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	58024400 	.word	0x58024400
 8004400:	ffff0007 	.word	0xffff0007

08004404 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004412:	4b53      	ldr	r3, [pc, #332]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b03      	cmp	r3, #3
 800441c:	d101      	bne.n	8004422 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e099      	b.n	8004556 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004422:	4b4f      	ldr	r3, [pc, #316]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a4e      	ldr	r2, [pc, #312]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 8004428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800442c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442e:	f7fc fee1 	bl	80011f4 <HAL_GetTick>
 8004432:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004434:	e008      	b.n	8004448 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004436:	f7fc fedd 	bl	80011f4 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e086      	b.n	8004556 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004448:	4b45      	ldr	r3, [pc, #276]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f0      	bne.n	8004436 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004454:	4b42      	ldr	r3, [pc, #264]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 8004456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004458:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	051b      	lsls	r3, r3, #20
 8004462:	493f      	ldr	r1, [pc, #252]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	628b      	str	r3, [r1, #40]	@ 0x28
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	3b01      	subs	r3, #1
 800446e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	3b01      	subs	r3, #1
 8004478:	025b      	lsls	r3, r3, #9
 800447a:	b29b      	uxth	r3, r3
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	3b01      	subs	r3, #1
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	3b01      	subs	r3, #1
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004498:	4931      	ldr	r1, [pc, #196]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800449e:	4b30      	ldr	r3, [pc, #192]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	492d      	ldr	r1, [pc, #180]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4928      	ldr	r1, [pc, #160]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044c2:	4b27      	ldr	r3, [pc, #156]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	4a26      	ldr	r2, [pc, #152]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044ce:	4b24      	ldr	r3, [pc, #144]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044d2:	4b24      	ldr	r3, [pc, #144]	@ (8004564 <RCCEx_PLL3_Config+0x160>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	69d2      	ldr	r2, [r2, #28]
 80044da:	00d2      	lsls	r2, r2, #3
 80044dc:	4920      	ldr	r1, [pc, #128]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 80044fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004500:	e00f      	b.n	8004522 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d106      	bne.n	8004516 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004508:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 800450e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004512:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004514:	e005      	b.n	8004522 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004516:	4b12      	ldr	r3, [pc, #72]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 8004518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451a:	4a11      	ldr	r2, [pc, #68]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 800451c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004520:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004522:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a0e      	ldr	r2, [pc, #56]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800452c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452e:	f7fc fe61 	bl	80011f4 <HAL_GetTick>
 8004532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004534:	e008      	b.n	8004548 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004536:	f7fc fe5d 	bl	80011f4 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e006      	b.n	8004556 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004548:	4b05      	ldr	r3, [pc, #20]	@ (8004560 <RCCEx_PLL3_Config+0x15c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004554:	7bfb      	ldrb	r3, [r7, #15]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	58024400 	.word	0x58024400
 8004564:	ffff0007 	.word	0xffff0007

08004568 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e10f      	b.n	800479a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a87      	ldr	r2, [pc, #540]	@ (80047a4 <HAL_SPI_Init+0x23c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00f      	beq.n	80045aa <HAL_SPI_Init+0x42>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a86      	ldr	r2, [pc, #536]	@ (80047a8 <HAL_SPI_Init+0x240>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00a      	beq.n	80045aa <HAL_SPI_Init+0x42>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a84      	ldr	r2, [pc, #528]	@ (80047ac <HAL_SPI_Init+0x244>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d005      	beq.n	80045aa <HAL_SPI_Init+0x42>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2b0f      	cmp	r3, #15
 80045a4:	d901      	bls.n	80045aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0f7      	b.n	800479a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f900 	bl	80047b0 <SPI_GetPacketSize>
 80045b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a7b      	ldr	r2, [pc, #492]	@ (80047a4 <HAL_SPI_Init+0x23c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00c      	beq.n	80045d6 <HAL_SPI_Init+0x6e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a79      	ldr	r2, [pc, #484]	@ (80047a8 <HAL_SPI_Init+0x240>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <HAL_SPI_Init+0x6e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a78      	ldr	r2, [pc, #480]	@ (80047ac <HAL_SPI_Init+0x244>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d002      	beq.n	80045d6 <HAL_SPI_Init+0x6e>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d811      	bhi.n	80045fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80045da:	4a72      	ldr	r2, [pc, #456]	@ (80047a4 <HAL_SPI_Init+0x23c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d009      	beq.n	80045f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a70      	ldr	r2, [pc, #448]	@ (80047a8 <HAL_SPI_Init+0x240>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d004      	beq.n	80045f4 <HAL_SPI_Init+0x8c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6f      	ldr	r2, [pc, #444]	@ (80047ac <HAL_SPI_Init+0x244>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d104      	bne.n	80045fe <HAL_SPI_Init+0x96>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d901      	bls.n	80045fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e0cd      	b.n	800479a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fb04 	bl	8000c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800463a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004644:	d119      	bne.n	800467a <HAL_SPI_Init+0x112>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800464e:	d103      	bne.n	8004658 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10c      	bne.n	800467a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004668:	d107      	bne.n	800467a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004678:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00f      	beq.n	80046a6 <HAL_SPI_Init+0x13e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	2b06      	cmp	r3, #6
 800468c:	d90b      	bls.n	80046a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e007      	b.n	80046b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69da      	ldr	r2, [r3, #28]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	431a      	orrs	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c8:	ea42 0103 	orr.w	r1, r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004716:	ea42 0103 	orr.w	r1, r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d113      	bne.n	8004756 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004740:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004754:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40013000 	.word	0x40013000
 80047a8:	40003800 	.word	0x40003800
 80047ac:	40003c00 	.word	0x40003c00

080047b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	3301      	adds	r3, #1
 80047c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	3307      	adds	r3, #7
 80047ce:	08db      	lsrs	r3, r3, #3
 80047d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <memset>:
 80047e6:	4402      	add	r2, r0
 80047e8:	4603      	mov	r3, r0
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d100      	bne.n	80047f0 <memset+0xa>
 80047ee:	4770      	bx	lr
 80047f0:	f803 1b01 	strb.w	r1, [r3], #1
 80047f4:	e7f9      	b.n	80047ea <memset+0x4>
	...

080047f8 <__libc_init_array>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004830 <__libc_init_array+0x38>)
 80047fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004834 <__libc_init_array+0x3c>)
 80047fe:	1b64      	subs	r4, r4, r5
 8004800:	10a4      	asrs	r4, r4, #2
 8004802:	2600      	movs	r6, #0
 8004804:	42a6      	cmp	r6, r4
 8004806:	d109      	bne.n	800481c <__libc_init_array+0x24>
 8004808:	4d0b      	ldr	r5, [pc, #44]	@ (8004838 <__libc_init_array+0x40>)
 800480a:	4c0c      	ldr	r4, [pc, #48]	@ (800483c <__libc_init_array+0x44>)
 800480c:	f000 f826 	bl	800485c <_init>
 8004810:	1b64      	subs	r4, r4, r5
 8004812:	10a4      	asrs	r4, r4, #2
 8004814:	2600      	movs	r6, #0
 8004816:	42a6      	cmp	r6, r4
 8004818:	d105      	bne.n	8004826 <__libc_init_array+0x2e>
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004820:	4798      	blx	r3
 8004822:	3601      	adds	r6, #1
 8004824:	e7ee      	b.n	8004804 <__libc_init_array+0xc>
 8004826:	f855 3b04 	ldr.w	r3, [r5], #4
 800482a:	4798      	blx	r3
 800482c:	3601      	adds	r6, #1
 800482e:	e7f2      	b.n	8004816 <__libc_init_array+0x1e>
 8004830:	080048d0 	.word	0x080048d0
 8004834:	080048d0 	.word	0x080048d0
 8004838:	080048d0 	.word	0x080048d0
 800483c:	080048d4 	.word	0x080048d4

08004840 <memcpy>:
 8004840:	440a      	add	r2, r1
 8004842:	4291      	cmp	r1, r2
 8004844:	f100 33ff 	add.w	r3, r0, #4294967295
 8004848:	d100      	bne.n	800484c <memcpy+0xc>
 800484a:	4770      	bx	lr
 800484c:	b510      	push	{r4, lr}
 800484e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004856:	4291      	cmp	r1, r2
 8004858:	d1f9      	bne.n	800484e <memcpy+0xe>
 800485a:	bd10      	pop	{r4, pc}

0800485c <_init>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr

08004868 <_fini>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr
