
LIGHTLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053dc  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080056a8  080056a8  000066a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005704  08005704  00006704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08005708  08005708  00006708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  0800570c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003a8  24000010  0800571c  00007010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240003b8  0800571c  000073b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000131ca  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000021a8  00000000  00000000  0001a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001268  00000000  00000000  0001c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000e45  00000000  00000000  0001d618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000340ab  00000000  00000000  0001e45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00014baa  00000000  00000000  00052508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00156bfb  00000000  00000000  000670b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001bdcad  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004fc0  00000000  00000000  001bdcf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000008c  00000000  00000000  001c2cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005690 	.word	0x08005690

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08005690 	.word	0x08005690

0800030c <CAN_upkeep>:
//variables set by car over CAN

//LED states are saved in the array below and the TODO: neopixel library
int M_STATES[12] = {0,0,0,0,0,0,0,0,0,0,0,0};

void CAN_upkeep() {
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0

}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
	...

0800031c <clearLightStates>:

void clearLightStates() {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(M_STATES); i++) {
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	e007      	b.n	8000338 <clearLightStates+0x1c>
		M_STATES[i] = 0;
 8000328:	4a08      	ldr	r2, [pc, #32]	@ (800034c <clearLightStates+0x30>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2100      	movs	r1, #0
 800032e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < sizeof(M_STATES); i++) {
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3301      	adds	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b2f      	cmp	r3, #47	@ 0x2f
 800033c:	d9f4      	bls.n	8000328 <clearLightStates+0xc>
	}
	NEO_clearLEDs();
 800033e:	f000 fd11 	bl	8000d64 <NEO_clearLEDs>
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	24000384 	.word	0x24000384

08000350 <handleRunningLights>:

void handleRunningLights() {
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0

}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <handleLightCycle>:

void handleLightCycle() {
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <handleReverseLights>:

void handleReverseLights() {
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <handleTurnSignals>:

void handleTurnSignals() {
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <handleHazards>:

void handleHazards() {
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <handleBrakeLights>:

void handleBrakeLights() {
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0

}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <showLights>:

void showLights() {
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b8:	f000 fca2 	bl	8000d00 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f001 f83a 	bl	8001434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f83a 	bl	8000438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f000 fb7e 	bl	8000ac4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80003c8:	f000 f8a8 	bl	800051c <MX_FDCAN1_Init>
  MX_SPI1_Init();
 80003cc:	f000 f90a 	bl	80005e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80003d0:	f000 f95e 	bl	8000690 <MX_SPI2_Init>
  MX_SPI3_Init();
 80003d4:	f000 f9b2 	bl	800073c <MX_SPI3_Init>
  MX_SPI4_Init();
 80003d8:	f000 fa06 	bl	80007e8 <MX_SPI4_Init>
  MX_TIM1_Init();
 80003dc:	f000 fa5a 	bl	8000894 <MX_TIM1_Init>
  MX_TIM3_Init();
 80003e0:	f000 faf4 	bl	80009cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //TURN ON GREEN LED ONCE USER CODE BEGINS
  HAL_GPIO_WritePin (G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	4812      	ldr	r0, [pc, #72]	@ (8000434 <main+0x80>)
 80003ea:	f001 ff41 	bl	8002270 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOC, nBUZZ_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003f4:	480f      	ldr	r0, [pc, #60]	@ (8000434 <main+0x80>)
 80003f6:	f001 ff3b 	bl	8002270 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //checks if updated CAN data exists and issues heartbeats to CAN network for diagnostic systems
	  CAN_upkeep();
 80003fa:	f7ff ff87 	bl	800030c <CAN_upkeep>

	  //clear all light states at start of loop
	  clearLightStates();
 80003fe:	f7ff ff8d 	bl	800031c <clearLightStates>

	  handleRunningLights();
 8000402:	f7ff ffa5 	bl	8000350 <handleRunningLights>

	  //this function implements custom light animations but will be overridden by safety-critical lighting functions later on
	  handleLightCycle();
 8000406:	f7ff ffaa 	bl	800035e <handleLightCycle>

	  handleReverseLights();
 800040a:	f7ff ffaf 	bl	800036c <handleReverseLights>

	  handleTurnSignals();
 800040e:	f7ff ffb4 	bl	800037a <handleTurnSignals>

	  handleHazards();
 8000412:	f7ff ffb9 	bl	8000388 <handleHazards>

	  handleBrakeLights();
 8000416:	f7ff ffbe 	bl	8000396 <handleBrakeLights>

	  showLights();
 800041a:	f7ff ffc3 	bl	80003a4 <showLights>
//	  HAL_GPIO_TogglePin (GPIOB, M8_TRIG_Pin);
//	  HAL_GPIO_TogglePin (GPIOD, M9_TRIG_Pin);
//	  HAL_GPIO_TogglePin (GPIOD, M10_TRIG_Pin);
//	  HAL_GPIO_TogglePin (GPIOD, M11_TRIG_Pin);
//	  HAL_GPIO_TogglePin (GPIOD, M12_TRIG_Pin);
	  HAL_GPIO_TogglePin (R_LED_GPIO_Port, R_LED_Pin);
 800041e:	2102      	movs	r1, #2
 8000420:	4804      	ldr	r0, [pc, #16]	@ (8000434 <main+0x80>)
 8000422:	f001 ff3e 	bl	80022a2 <HAL_GPIO_TogglePin>
	  HAL_Delay (500);   /* Insert delay 100 ms */
 8000426:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800042a:	f001 f895 	bl	8001558 <HAL_Delay>
	  CAN_upkeep();
 800042e:	bf00      	nop
 8000430:	e7e3      	b.n	80003fa <main+0x46>
 8000432:	bf00      	nop
 8000434:	58020800 	.word	0x58020800

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b09c      	sub	sp, #112	@ 0x70
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000442:	224c      	movs	r2, #76	@ 0x4c
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f005 f8e8 	bl	800561c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2220      	movs	r2, #32
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f005 f8e2 	bl	800561c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000458:	2002      	movs	r0, #2
 800045a:	f001 ff3d 	bl	80022d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800045e:	2300      	movs	r3, #0
 8000460:	603b      	str	r3, [r7, #0]
 8000462:	4b2d      	ldr	r3, [pc, #180]	@ (8000518 <SystemClock_Config+0xe0>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800046a:	4a2b      	ldr	r2, [pc, #172]	@ (8000518 <SystemClock_Config+0xe0>)
 800046c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b29      	ldr	r3, [pc, #164]	@ (8000518 <SystemClock_Config+0xe0>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800047e:	bf00      	nop
 8000480:	4b25      	ldr	r3, [pc, #148]	@ (8000518 <SystemClock_Config+0xe0>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000488:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800048c:	d1f8      	bne.n	8000480 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800048e:	2303      	movs	r3, #3
 8000490:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000492:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000496:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000498:	2301      	movs	r3, #1
 800049a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800049c:	2340      	movs	r3, #64	@ 0x40
 800049e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a0:	2302      	movs	r3, #2
 80004a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004a4:	2302      	movs	r3, #2
 80004a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 48;
 80004a8:	2330      	movs	r3, #48	@ 0x30
 80004aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 150;
 80004ac:	2396      	movs	r3, #150	@ 0x96
 80004ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 100;
 80004b4:	2364      	movs	r3, #100	@ 0x64
 80004b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004b8:	2302      	movs	r3, #2
 80004ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80004bc:	2300      	movs	r3, #0
 80004be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80004c0:	2302      	movs	r3, #2
 80004c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 ff3d 	bl	800234c <HAL_RCC_OscConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80004d8:	f000 fc3e 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004dc:	233f      	movs	r3, #63	@ 0x3f
 80004de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2101      	movs	r1, #1
 8000500:	4618      	mov	r0, r3
 8000502:	f002 fafd 	bl	8002b00 <HAL_RCC_ClockConfig>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800050c:	f000 fc24 	bl	8000d58 <Error_Handler>
  }
}
 8000510:	bf00      	nop
 8000512:	3770      	adds	r7, #112	@ 0x70
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	58024800 	.word	0x58024800

0800051c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000520:	4b2e      	ldr	r3, [pc, #184]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000522:	4a2f      	ldr	r2, [pc, #188]	@ (80005e0 <MX_FDCAN1_Init+0xc4>)
 8000524:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000526:	4b2d      	ldr	r3, [pc, #180]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052c:	4b2b      	ldr	r3, [pc, #172]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000532:	4b2a      	ldr	r3, [pc, #168]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000534:	2200      	movs	r2, #0
 8000536:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000538:	4b28      	ldr	r3, [pc, #160]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 800053a:	2200      	movs	r2, #0
 800053c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800053e:	4b27      	ldr	r3, [pc, #156]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000540:	2200      	movs	r2, #0
 8000542:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000544:	4b25      	ldr	r3, [pc, #148]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000546:	2210      	movs	r2, #16
 8000548:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800054a:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 800054c:	2201      	movs	r2, #1
 800054e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000550:	4b22      	ldr	r3, [pc, #136]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000552:	2202      	movs	r2, #2
 8000554:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000556:	4b21      	ldr	r3, [pc, #132]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000558:	2202      	movs	r2, #2
 800055a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800055c:	4b1f      	ldr	r3, [pc, #124]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 800055e:	2201      	movs	r2, #1
 8000560:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000562:	4b1e      	ldr	r3, [pc, #120]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000564:	2201      	movs	r2, #1
 8000566:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000568:	4b1c      	ldr	r3, [pc, #112]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 800056a:	2201      	movs	r2, #1
 800056c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800056e:	4b1b      	ldr	r3, [pc, #108]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000570:	2201      	movs	r2, #1
 8000572:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000574:	4b19      	ldr	r3, [pc, #100]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000576:	2200      	movs	r2, #0
 8000578:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800057a:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 800057c:	2200      	movs	r2, #0
 800057e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000580:	4b16      	ldr	r3, [pc, #88]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000582:	2200      	movs	r2, #0
 8000584:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000588:	2200      	movs	r2, #0
 800058a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800058c:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 800058e:	2204      	movs	r2, #4
 8000590:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 8000594:	2200      	movs	r2, #0
 8000596:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 800059a:	2204      	movs	r2, #4
 800059c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005bc:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80005c2:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005c8:	4804      	ldr	r0, [pc, #16]	@ (80005dc <MX_FDCAN1_Init+0xc0>)
 80005ca:	f001 f945 	bl	8001858 <HAL_FDCAN_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80005d4:	f000 fbc0 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2400002c 	.word	0x2400002c
 80005e0:	4000a000 	.word	0x4000a000

080005e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <MX_SPI1_Init+0xa4>)
 80005ea:	4a28      	ldr	r2, [pc, #160]	@ (800068c <MX_SPI1_Init+0xa8>)
 80005ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ee:	4b26      	ldr	r3, [pc, #152]	@ (8000688 <MX_SPI1_Init+0xa4>)
 80005f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005f6:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <MX_SPI1_Init+0xa4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005fc:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <MX_SPI1_Init+0xa4>)
 80005fe:	2203      	movs	r2, #3
 8000600:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000602:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <MX_SPI1_Init+0xa4>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800060e:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000610:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000614:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000616:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000618:	2200      	movs	r2, #0
 800061a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800061c:	4b1a      	ldr	r3, [pc, #104]	@ (8000688 <MX_SPI1_Init+0xa4>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <MX_SPI1_Init+0xa4>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800062e:	4b16      	ldr	r3, [pc, #88]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000634:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000636:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800063a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <MX_SPI1_Init+0xa4>)
 800063e:	2200      	movs	r2, #0
 8000640:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000644:	2200      	movs	r2, #0
 8000646:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_SPI1_Init+0xa4>)
 800064a:	2200      	movs	r2, #0
 800064c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000650:	2200      	movs	r2, #0
 8000652:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000656:	2200      	movs	r2, #0
 8000658:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <MX_SPI1_Init+0xa4>)
 800065c:	2200      	movs	r2, #0
 800065e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000662:	2200      	movs	r2, #0
 8000664:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000668:	2200      	movs	r2, #0
 800066a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_SPI1_Init+0xa4>)
 800066e:	2200      	movs	r2, #0
 8000670:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <MX_SPI1_Init+0xa4>)
 8000674:	f004 f878 	bl	8004768 <HAL_SPI_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800067e:	f000 fb6b 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	240000cc 	.word	0x240000cc
 800068c:	40013000 	.word	0x40013000

08000690 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000694:	4b27      	ldr	r3, [pc, #156]	@ (8000734 <MX_SPI2_Init+0xa4>)
 8000696:	4a28      	ldr	r2, [pc, #160]	@ (8000738 <MX_SPI2_Init+0xa8>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b26      	ldr	r3, [pc, #152]	@ (8000734 <MX_SPI2_Init+0xa4>)
 800069c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006a8:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006aa:	2203      	movs	r2, #3
 80006ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80006c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_SPI2_Init+0xa4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000700:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_SPI2_Init+0xa4>)
 8000702:	2200      	movs	r2, #0
 8000704:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <MX_SPI2_Init+0xa4>)
 8000708:	2200      	movs	r2, #0
 800070a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_SPI2_Init+0xa4>)
 800070e:	2200      	movs	r2, #0
 8000710:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <MX_SPI2_Init+0xa4>)
 8000714:	2200      	movs	r2, #0
 8000716:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_SPI2_Init+0xa4>)
 800071a:	2200      	movs	r2, #0
 800071c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_SPI2_Init+0xa4>)
 8000720:	f004 f822 	bl	8004768 <HAL_SPI_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800072a:	f000 fb15 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	24000154 	.word	0x24000154
 8000738:	40003800 	.word	0x40003800

0800073c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 8000742:	4a28      	ldr	r2, [pc, #160]	@ (80007e4 <MX_SPI3_Init+0xa8>)
 8000744:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 8000748:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800074c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800074e:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000754:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 8000756:	2203      	movs	r2, #3
 8000758:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075a:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 8000768:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800076c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800076e:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000774:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800077a:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000780:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 800078e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000792:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 8000796:	2200      	movs	r2, #0
 8000798:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 800079c:	2200      	movs	r2, #0
 800079e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_SPI3_Init+0xa4>)
 80007cc:	f003 ffcc 	bl	8004768 <HAL_SPI_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80007d6:	f000 fabf 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	240001dc 	.word	0x240001dc
 80007e4:	40003c00 	.word	0x40003c00

080007e8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80007ec:	4b27      	ldr	r3, [pc, #156]	@ (800088c <MX_SPI4_Init+0xa4>)
 80007ee:	4a28      	ldr	r2, [pc, #160]	@ (8000890 <MX_SPI4_Init+0xa8>)
 80007f0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <MX_SPI4_Init+0xa4>)
 80007f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007f8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80007fa:	4b24      	ldr	r3, [pc, #144]	@ (800088c <MX_SPI4_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000800:	4b22      	ldr	r3, [pc, #136]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000802:	2203      	movs	r2, #3
 8000804:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000806:	4b21      	ldr	r3, [pc, #132]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_SPI4_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000812:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000814:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000818:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_SPI4_Init+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_SPI4_Init+0xa4>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000832:	4b16      	ldr	r3, [pc, #88]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_SPI4_Init+0xa4>)
 800083a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800083e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000842:	2200      	movs	r2, #0
 8000844:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_SPI4_Init+0xa4>)
 800084e:	2200      	movs	r2, #0
 8000850:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000854:	2200      	movs	r2, #0
 8000856:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_SPI4_Init+0xa4>)
 800085a:	2200      	movs	r2, #0
 800085c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000860:	2200      	movs	r2, #0
 8000862:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000866:	2200      	movs	r2, #0
 8000868:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_SPI4_Init+0xa4>)
 800086c:	2200      	movs	r2, #0
 800086e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000872:	2200      	movs	r2, #0
 8000874:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_SPI4_Init+0xa4>)
 8000878:	f003 ff76 	bl	8004768 <HAL_SPI_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000882:	f000 fa69 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	24000264 	.word	0x24000264
 8000890:	40013400 	.word	0x40013400

08000894 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b098      	sub	sp, #96	@ 0x60
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2234      	movs	r2, #52	@ 0x34
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 feab 	bl	800561c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c6:	4b3f      	ldr	r3, [pc, #252]	@ (80009c4 <MX_TIM1_Init+0x130>)
 80008c8:	4a3f      	ldr	r2, [pc, #252]	@ (80009c8 <MX_TIM1_Init+0x134>)
 80008ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008cc:	4b3d      	ldr	r3, [pc, #244]	@ (80009c4 <MX_TIM1_Init+0x130>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b3c      	ldr	r3, [pc, #240]	@ (80009c4 <MX_TIM1_Init+0x130>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008d8:	4b3a      	ldr	r3, [pc, #232]	@ (80009c4 <MX_TIM1_Init+0x130>)
 80008da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b38      	ldr	r3, [pc, #224]	@ (80009c4 <MX_TIM1_Init+0x130>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e6:	4b37      	ldr	r3, [pc, #220]	@ (80009c4 <MX_TIM1_Init+0x130>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b35      	ldr	r3, [pc, #212]	@ (80009c4 <MX_TIM1_Init+0x130>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f2:	4834      	ldr	r0, [pc, #208]	@ (80009c4 <MX_TIM1_Init+0x130>)
 80008f4:	f004 f877 	bl	80049e6 <HAL_TIM_PWM_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 fa2b 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000912:	4619      	mov	r1, r3
 8000914:	482b      	ldr	r0, [pc, #172]	@ (80009c4 <MX_TIM1_Init+0x130>)
 8000916:	f004 fd59 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000920:	f000 fa1a 	bl	8000d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	@ 0x60
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000940:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000944:	2200      	movs	r2, #0
 8000946:	4619      	mov	r1, r3
 8000948:	481e      	ldr	r0, [pc, #120]	@ (80009c4 <MX_TIM1_Init+0x130>)
 800094a:	f004 f8a3 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000954:	f000 fa00 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000958:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800095c:	2204      	movs	r2, #4
 800095e:	4619      	mov	r1, r3
 8000960:	4818      	ldr	r0, [pc, #96]	@ (80009c4 <MX_TIM1_Init+0x130>)
 8000962:	f004 f897 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800096c:	f000 f9f4 	bl	8000d58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000984:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000988:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4807      	ldr	r0, [pc, #28]	@ (80009c4 <MX_TIM1_Init+0x130>)
 80009a6:	f004 fdad 	bl	8005504 <HAL_TIMEx_ConfigBreakDeadTime>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80009b0:	f000 f9d2 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009b4:	4803      	ldr	r0, [pc, #12]	@ (80009c4 <MX_TIM1_Init+0x130>)
 80009b6:	f000 fc05 	bl	80011c4 <HAL_TIM_MspPostInit>

}
 80009ba:	bf00      	nop
 80009bc:	3760      	adds	r7, #96	@ 0x60
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	240002ec 	.word	0x240002ec
 80009c8:	40010000 	.word	0x40010000

080009cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	@ 0x28
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009de:	463b      	mov	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]
 80009ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009f0:	4b32      	ldr	r3, [pc, #200]	@ (8000abc <MX_TIM3_Init+0xf0>)
 80009f2:	4a33      	ldr	r2, [pc, #204]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009f6:	4b31      	ldr	r3, [pc, #196]	@ (8000abc <MX_TIM3_Init+0xf0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b2f      	ldr	r3, [pc, #188]	@ (8000abc <MX_TIM3_Init+0xf0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a02:	4b2e      	ldr	r3, [pc, #184]	@ (8000abc <MX_TIM3_Init+0xf0>)
 8000a04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000abc <MX_TIM3_Init+0xf0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b2a      	ldr	r3, [pc, #168]	@ (8000abc <MX_TIM3_Init+0xf0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a16:	4829      	ldr	r0, [pc, #164]	@ (8000abc <MX_TIM3_Init+0xf0>)
 8000a18:	f003 ffe5 	bl	80049e6 <HAL_TIM_PWM_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000a22:	f000 f999 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4821      	ldr	r0, [pc, #132]	@ (8000abc <MX_TIM3_Init+0xf0>)
 8000a36:	f004 fcc9 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000a40:	f000 f98a 	bl	8000d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a44:	2360      	movs	r3, #96	@ 0x60
 8000a46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4818      	ldr	r0, [pc, #96]	@ (8000abc <MX_TIM3_Init+0xf0>)
 8000a5c:	f004 f81a 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a66:	f000 f977 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4812      	ldr	r0, [pc, #72]	@ (8000abc <MX_TIM3_Init+0xf0>)
 8000a72:	f004 f80f 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000a7c:	f000 f96c 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	2208      	movs	r2, #8
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <MX_TIM3_Init+0xf0>)
 8000a88:	f004 f804 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000a92:	f000 f961 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	220c      	movs	r2, #12
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4807      	ldr	r0, [pc, #28]	@ (8000abc <MX_TIM3_Init+0xf0>)
 8000a9e:	f003 fff9 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000aa8:	f000 f956 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aac:	4803      	ldr	r0, [pc, #12]	@ (8000abc <MX_TIM3_Init+0xf0>)
 8000aae:	f000 fb89 	bl	80011c4 <HAL_TIM_MspPostInit>

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	@ 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	24000338 	.word	0x24000338
 8000ac0:	40000400 	.word	0x40000400

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	@ 0x30
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b83      	ldr	r3, [pc, #524]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	4a81      	ldr	r2, [pc, #516]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aea:	4b7f      	ldr	r3, [pc, #508]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af8:	4b7b      	ldr	r3, [pc, #492]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afe:	4a7a      	ldr	r2, [pc, #488]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b08:	4b77      	ldr	r3, [pc, #476]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b74      	ldr	r3, [pc, #464]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	4a72      	ldr	r2, [pc, #456]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b26:	4b70      	ldr	r3, [pc, #448]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b34:	4b6c      	ldr	r3, [pc, #432]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b44:	4b68      	ldr	r3, [pc, #416]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b52:	4b65      	ldr	r3, [pc, #404]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b58:	4a63      	ldr	r2, [pc, #396]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b62:	4b61      	ldr	r3, [pc, #388]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b70:	4b5d      	ldr	r3, [pc, #372]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	4a5c      	ldr	r2, [pc, #368]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b80:	4b59      	ldr	r3, [pc, #356]	@ (8000ce8 <MX_GPIO_Init+0x224>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_LED_Pin|R_LED_Pin|M1_TRIG_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2113      	movs	r1, #19
 8000b92:	4856      	ldr	r0, [pc, #344]	@ (8000cec <MX_GPIO_Init+0x228>)
 8000b94:	f001 fb6c 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_TRIG_Pin|M3_TRIG_Pin|M8_TRIG_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f640 0103 	movw	r1, #2051	@ 0x803
 8000b9e:	4854      	ldr	r0, [pc, #336]	@ (8000cf0 <MX_GPIO_Init+0x22c>)
 8000ba0:	f001 fb66 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M4_TRIG_Pin|M5_TRIG_Pin|M6_TRIG_Pin|M7_TRIG_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f248 5180 	movw	r1, #34176	@ 0x8580
 8000baa:	4852      	ldr	r0, [pc, #328]	@ (8000cf4 <MX_GPIO_Init+0x230>)
 8000bac:	f001 fb60 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M9_TRIG_Pin|M10_TRIG_Pin|M11_TRIG_Pin|M12_TRIG_Pin
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f64e 5110 	movw	r1, #60688	@ 0xed10
 8000bb6:	4850      	ldr	r0, [pc, #320]	@ (8000cf8 <MX_GPIO_Init+0x234>)
 8000bb8:	f001 fb5a 	bl	8002270 <HAL_GPIO_WritePin>
                          |nBUZZ_Pin|INH_12V_Pin|TCAN1146_nCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIAG_ADC_nCS_GPIO_Port, DIAG_ADC_nCS_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bc2:	484e      	ldr	r0, [pc, #312]	@ (8000cfc <MX_GPIO_Init+0x238>)
 8000bc4:	f001 fb54 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : G_LED_Pin R_LED_Pin */
  GPIO_InitStruct.Pin = G_LED_Pin|R_LED_Pin;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bcc:	2311      	movs	r3, #17
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4843      	ldr	r0, [pc, #268]	@ (8000cec <MX_GPIO_Init+0x228>)
 8000be0:	f001 f99e 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_TRIG_Pin */
  GPIO_InitStruct.Pin = M1_TRIG_Pin;
 8000be4:	2310      	movs	r3, #16
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M1_TRIG_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	483c      	ldr	r0, [pc, #240]	@ (8000cec <MX_GPIO_Init+0x228>)
 8000bfc:	f001 f990 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : M12_STAT_Pin */
  GPIO_InitStruct.Pin = M12_STAT_Pin;
 8000c00:	2320      	movs	r3, #32
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(M12_STAT_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4836      	ldr	r0, [pc, #216]	@ (8000cec <MX_GPIO_Init+0x228>)
 8000c14:	f001 f984 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_TRIG_Pin M3_TRIG_Pin M8_TRIG_Pin */
  GPIO_InitStruct.Pin = M2_TRIG_Pin|M3_TRIG_Pin|M8_TRIG_Pin;
 8000c18:	f640 0303 	movw	r3, #2051	@ 0x803
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482f      	ldr	r0, [pc, #188]	@ (8000cf0 <MX_GPIO_Init+0x22c>)
 8000c32:	f001 f975 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : M34_STAT_Pin M78_STAT_Pin */
  GPIO_InitStruct.Pin = M34_STAT_Pin|M78_STAT_Pin;
 8000c36:	f240 4304 	movw	r3, #1028	@ 0x404
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4829      	ldr	r0, [pc, #164]	@ (8000cf0 <MX_GPIO_Init+0x22c>)
 8000c4c:	f001 f968 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_TRIG_Pin M5_TRIG_Pin M6_TRIG_Pin M7_TRIG_Pin */
  GPIO_InitStruct.Pin = M4_TRIG_Pin|M5_TRIG_Pin|M6_TRIG_Pin|M7_TRIG_Pin;
 8000c50:	f248 5380 	movw	r3, #34176	@ 0x8580
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4822      	ldr	r0, [pc, #136]	@ (8000cf4 <MX_GPIO_Init+0x230>)
 8000c6a:	f001 f959 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : M56_STAT_Pin */
  GPIO_InitStruct.Pin = M56_STAT_Pin;
 8000c6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(M56_STAT_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	481c      	ldr	r0, [pc, #112]	@ (8000cf4 <MX_GPIO_Init+0x230>)
 8000c84:	f001 f94c 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : M9_TRIG_Pin M10_TRIG_Pin M11_TRIG_Pin M12_TRIG_Pin
                           nBUZZ_Pin INH_12V_Pin TCAN1146_nCS_Pin */
  GPIO_InitStruct.Pin = M9_TRIG_Pin|M10_TRIG_Pin|M11_TRIG_Pin|M12_TRIG_Pin
 8000c88:	f64e 5310 	movw	r3, #60688	@ 0xed10
 8000c8c:	61fb      	str	r3, [r7, #28]
                          |nBUZZ_Pin|INH_12V_Pin|TCAN1146_nCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4815      	ldr	r0, [pc, #84]	@ (8000cf8 <MX_GPIO_Init+0x234>)
 8000ca2:	f001 f93d 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : M910_STAT_Pin M1112_STAT_Pin */
  GPIO_InitStruct.Pin = M910_STAT_Pin|M1112_STAT_Pin;
 8000ca6:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480f      	ldr	r0, [pc, #60]	@ (8000cf8 <MX_GPIO_Init+0x234>)
 8000cbc:	f001 f930 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIAG_ADC_nCS_Pin */
  GPIO_InitStruct.Pin = DIAG_ADC_nCS_Pin;
 8000cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DIAG_ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4808      	ldr	r0, [pc, #32]	@ (8000cfc <MX_GPIO_Init+0x238>)
 8000cda:	f001 f921 	bl	8001f20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cde:	bf00      	nop
 8000ce0:	3730      	adds	r7, #48	@ 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58020800 	.word	0x58020800
 8000cf0:	58020400 	.word	0x58020400
 8000cf4:	58021000 	.word	0x58021000
 8000cf8:	58020c00 	.word	0x58020c00
 8000cfc:	58020000 	.word	0x58020000

08000d00 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d12:	f000 fd29 	bl	8001768 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d16:	2301      	movs	r3, #1
 8000d18:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d22:	231f      	movs	r3, #31
 8000d24:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d26:	2387      	movs	r3, #135	@ 0x87
 8000d28:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d32:	2301      	movs	r3, #1
 8000d34:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d36:	2301      	movs	r3, #1
 8000d38:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d42:	463b      	mov	r3, r7
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fd47 	bl	80017d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f000 fd24 	bl	8001798 <HAL_MPU_Enable>

}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <Error_Handler+0x8>

08000d64 <NEO_clearLEDs>:

void NEO_showLEDs() {

}

void NEO_clearLEDs() {
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_MspInit+0x30>)
 8000d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d80:	4a08      	ldr	r2, [pc, #32]	@ (8000da4 <HAL_MspInit+0x30>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_MspInit+0x30>)
 8000d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	58024400 	.word	0x58024400

08000da8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0b8      	sub	sp, #224	@ 0xe0
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	22b8      	movs	r2, #184	@ 0xb8
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f004 fc27 	bl	800561c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a26      	ldr	r2, [pc, #152]	@ (8000e6c <HAL_FDCAN_MspInit+0xc4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d145      	bne.n	8000e64 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000dd8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000de4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000de8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 f9b6 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000dfa:	f7ff ffad 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <HAL_FDCAN_MspInit+0xc8>)
 8000e00:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000e04:	4a1a      	ldr	r2, [pc, #104]	@ (8000e70 <HAL_FDCAN_MspInit+0xc8>)
 8000e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e0a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <HAL_FDCAN_MspInit+0xc8>)
 8000e10:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <HAL_FDCAN_MspInit+0xc8>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e22:	4a13      	ldr	r2, [pc, #76]	@ (8000e70 <HAL_FDCAN_MspInit+0xc8>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e2c:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <HAL_FDCAN_MspInit+0xc8>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e52:	2309      	movs	r3, #9
 8000e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e58:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <HAL_FDCAN_MspInit+0xcc>)
 8000e60:	f001 f85e 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	37e0      	adds	r7, #224	@ 0xe0
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	4000a000 	.word	0x4000a000
 8000e70:	58024400 	.word	0x58024400
 8000e74:	58020c00 	.word	0x58020c00

08000e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0be      	sub	sp, #248	@ 0xf8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e94:	22b8      	movs	r2, #184	@ 0xb8
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 fbbf 	bl	800561c <memset>
  if(hspi->Instance==SPI1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4aa2      	ldr	r2, [pc, #648]	@ (800112c <HAL_SPI_MspInit+0x2b4>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d146      	bne.n	8000f36 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000ea8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 f94e 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000eca:	f7ff ff45 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ece:	4b98      	ldr	r3, [pc, #608]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ed4:	4a96      	ldr	r2, [pc, #600]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000ed6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ede:	4b94      	ldr	r3, [pc, #592]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ee4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b90      	ldr	r3, [pc, #576]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	4a8f      	ldr	r2, [pc, #572]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efc:	4b8c      	ldr	r3, [pc, #560]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	623b      	str	r3, [r7, #32]
 8000f08:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f0a:	23f0      	movs	r3, #240	@ 0xf0
 8000f0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f22:	2305      	movs	r3, #5
 8000f24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4881      	ldr	r0, [pc, #516]	@ (8001134 <HAL_SPI_MspInit+0x2bc>)
 8000f30:	f000 fff6 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000f34:	e0f6      	b.n	8001124 <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI2)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a7f      	ldr	r2, [pc, #508]	@ (8001138 <HAL_SPI_MspInit+0x2c0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d147      	bne.n	8000fd0 <HAL_SPI_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000f40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 f902 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_SPI_MspInit+0xee>
      Error_Handler();
 8000f62:	f7ff fef9 	bl	8000d58 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f66:	4b72      	ldr	r3, [pc, #456]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f6c:	4a70      	ldr	r2, [pc, #448]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000f6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f76:	4b6e      	ldr	r3, [pc, #440]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b6a      	ldr	r3, [pc, #424]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	4a69      	ldr	r2, [pc, #420]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f94:	4b66      	ldr	r3, [pc, #408]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fa2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	485c      	ldr	r0, [pc, #368]	@ (800113c <HAL_SPI_MspInit+0x2c4>)
 8000fca:	f000 ffa9 	bl	8001f20 <HAL_GPIO_Init>
}
 8000fce:	e0a9      	b.n	8001124 <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI3)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8001140 <HAL_SPI_MspInit+0x2c8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d147      	bne.n	800106a <HAL_SPI_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000fda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 f8b5 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 8000ffc:	f7ff feac 	bl	8000d58 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001000:	4b4b      	ldr	r3, [pc, #300]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8001002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001006:	4a4a      	ldr	r2, [pc, #296]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8001008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800100c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001010:	4b47      	ldr	r3, [pc, #284]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8001012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001016:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	4b44      	ldr	r3, [pc, #272]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001024:	4a42      	ldr	r2, [pc, #264]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102e:	4b40      	ldr	r3, [pc, #256]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800103c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001040:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001056:	2306      	movs	r3, #6
 8001058:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001060:	4619      	mov	r1, r3
 8001062:	4838      	ldr	r0, [pc, #224]	@ (8001144 <HAL_SPI_MspInit+0x2cc>)
 8001064:	f000 ff5c 	bl	8001f20 <HAL_GPIO_Init>
}
 8001068:	e05c      	b.n	8001124 <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI4)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a36      	ldr	r2, [pc, #216]	@ (8001148 <HAL_SPI_MspInit+0x2d0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d157      	bne.n	8001124 <HAL_SPI_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001074:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2M = 48;
 8001080:	2330      	movs	r3, #48	@ 0x30
 8001082:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2N = 150;
 8001084:	2396      	movs	r3, #150	@ 0x96
 8001086:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2Q = 100;
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001090:	2302      	movs	r3, #2
 8001092:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8001094:	2300      	movs	r3, #0
 8001096:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001098:	2320      	movs	r3, #32
 800109a:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80010a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 f857 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_SPI_MspInit+0x244>
      Error_Handler();
 80010b8:	f7ff fe4e 	bl	8000d58 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80010bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 80010be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 80010c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 80010ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	4a13      	ldr	r2, [pc, #76]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_SPI_MspInit+0x2b8>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80010f8:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80010fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001112:	2305      	movs	r3, #5
 8001114:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001118:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800111c:	4619      	mov	r1, r3
 800111e:	480b      	ldr	r0, [pc, #44]	@ (800114c <HAL_SPI_MspInit+0x2d4>)
 8001120:	f000 fefe 	bl	8001f20 <HAL_GPIO_Init>
}
 8001124:	bf00      	nop
 8001126:	37f8      	adds	r7, #248	@ 0xf8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40013000 	.word	0x40013000
 8001130:	58024400 	.word	0x58024400
 8001134:	58020000 	.word	0x58020000
 8001138:	40003800 	.word	0x40003800
 800113c:	58020400 	.word	0x58020400
 8001140:	40003c00 	.word	0x40003c00
 8001144:	58020800 	.word	0x58020800
 8001148:	40013400 	.word	0x40013400
 800114c:	58021000 	.word	0x58021000

08001150 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a16      	ldr	r2, [pc, #88]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x68>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10f      	bne.n	8001182 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001162:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <HAL_TIM_PWM_MspInit+0x6c>)
 8001164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <HAL_TIM_PWM_MspInit+0x6c>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_TIM_PWM_MspInit+0x6c>)
 8001174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001180:	e013      	b.n	80011aa <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0e      	ldr	r2, [pc, #56]	@ (80011c0 <HAL_TIM_PWM_MspInit+0x70>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d10e      	bne.n	80011aa <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HAL_TIM_PWM_MspInit+0x6c>)
 800118e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <HAL_TIM_PWM_MspInit+0x6c>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800119c:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <HAL_TIM_PWM_MspInit+0x6c>)
 800119e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40010000 	.word	0x40010000
 80011bc:	58024400 	.word	0x58024400
 80011c0:	40000400 	.word	0x40000400

080011c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	@ 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a26      	ldr	r2, [pc, #152]	@ (800127c <HAL_TIM_MspPostInit+0xb8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d120      	bne.n	8001228 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <HAL_TIM_MspPostInit+0xbc>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ec:	4a24      	ldr	r2, [pc, #144]	@ (8001280 <HAL_TIM_MspPostInit+0xbc>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f6:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <HAL_TIM_MspPostInit+0xbc>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ADDR_2_Pin|ADDR_1_Pin;
 8001204:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001216:	2301      	movs	r3, #1
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4818      	ldr	r0, [pc, #96]	@ (8001284 <HAL_TIM_MspPostInit+0xc0>)
 8001222:	f000 fe7d 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001226:	e024      	b.n	8001272 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a16      	ldr	r2, [pc, #88]	@ (8001288 <HAL_TIM_MspPostInit+0xc4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d11f      	bne.n	8001272 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_TIM_MspPostInit+0xbc>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001238:	4a11      	ldr	r2, [pc, #68]	@ (8001280 <HAL_TIM_MspPostInit+0xbc>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_TIM_MspPostInit+0xbc>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADDR_6_Pin|ADDR_5_Pin|ADDR_4_Pin|ADDR_3_Pin;
 8001250:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001262:	2302      	movs	r3, #2
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <HAL_TIM_MspPostInit+0xc8>)
 800126e:	f000 fe57 	bl	8001f20 <HAL_GPIO_Init>
}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	@ 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40010000 	.word	0x40010000
 8001280:	58024400 	.word	0x58024400
 8001284:	58020000 	.word	0x58020000
 8001288:	40000400 	.word	0x40000400
 800128c:	58020800 	.word	0x58020800

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <NMI_Handler+0x4>

08001298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <MemManage_Handler+0x4>

080012a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e6:	f000 f917 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f4:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <SystemInit+0xd0>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012fa:	4a31      	ldr	r2, [pc, #196]	@ (80013c0 <SystemInit+0xd0>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001304:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <SystemInit+0xd4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	2b06      	cmp	r3, #6
 800130e:	d807      	bhi.n	8001320 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001310:	4b2c      	ldr	r3, [pc, #176]	@ (80013c4 <SystemInit+0xd4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 030f 	bic.w	r3, r3, #15
 8001318:	4a2a      	ldr	r2, [pc, #168]	@ (80013c4 <SystemInit+0xd4>)
 800131a:	f043 0307 	orr.w	r3, r3, #7
 800131e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <SystemInit+0xd8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a28      	ldr	r2, [pc, #160]	@ (80013c8 <SystemInit+0xd8>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800132c:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <SystemInit+0xd8>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001332:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <SystemInit+0xd8>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4924      	ldr	r1, [pc, #144]	@ (80013c8 <SystemInit+0xd8>)
 8001338:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <SystemInit+0xdc>)
 800133a:	4013      	ands	r3, r2
 800133c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <SystemInit+0xd4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800134a:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <SystemInit+0xd4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 030f 	bic.w	r3, r3, #15
 8001352:	4a1c      	ldr	r2, [pc, #112]	@ (80013c4 <SystemInit+0xd4>)
 8001354:	f043 0307 	orr.w	r3, r3, #7
 8001358:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800135a:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <SystemInit+0xd8>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <SystemInit+0xd8>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <SystemInit+0xd8>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800136c:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <SystemInit+0xd8>)
 800136e:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <SystemInit+0xe0>)
 8001370:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <SystemInit+0xd8>)
 8001374:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <SystemInit+0xe4>)
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <SystemInit+0xd8>)
 800137a:	4a17      	ldr	r2, [pc, #92]	@ (80013d8 <SystemInit+0xe8>)
 800137c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <SystemInit+0xd8>)
 8001380:	2200      	movs	r2, #0
 8001382:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <SystemInit+0xd8>)
 8001386:	4a14      	ldr	r2, [pc, #80]	@ (80013d8 <SystemInit+0xe8>)
 8001388:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <SystemInit+0xd8>)
 800138c:	2200      	movs	r2, #0
 800138e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <SystemInit+0xd8>)
 8001392:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <SystemInit+0xe8>)
 8001394:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <SystemInit+0xd8>)
 8001398:	2200      	movs	r2, #0
 800139a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <SystemInit+0xd8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a09      	ldr	r2, [pc, #36]	@ (80013c8 <SystemInit+0xd8>)
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <SystemInit+0xd8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <SystemInit+0xec>)
 80013b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00
 80013c4:	52002000 	.word	0x52002000
 80013c8:	58024400 	.word	0x58024400
 80013cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80013d0:	02020200 	.word	0x02020200
 80013d4:	01ff0000 	.word	0x01ff0000
 80013d8:	01010280 	.word	0x01010280
 80013dc:	52004000 	.word	0x52004000

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001418 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e4:	f7ff ff84 	bl	80012f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	@ (8001420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	@ (800142c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f004 f90d 	bl	800562c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7fe ffcf 	bl	80003b4 <main>
  bx  lr
 8001416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001418:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800141c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001420:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001424:	0800570c 	.word	0x0800570c
  ldr r2, =_sbss
 8001428:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800142c:	240003b8 	.word	0x240003b8

08001430 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC3_IRQHandler>
	...

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143a:	2003      	movs	r0, #3
 800143c:	f000 f962 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001440:	f001 fd14 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8001444:	4602      	mov	r2, r0
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_Init+0x68>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	4913      	ldr	r1, [pc, #76]	@ (80014a0 <HAL_Init+0x6c>)
 8001452:	5ccb      	ldrb	r3, [r1, r3]
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
 800145c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <HAL_Init+0x68>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	4a0e      	ldr	r2, [pc, #56]	@ (80014a0 <HAL_Init+0x6c>)
 8001468:	5cd3      	ldrb	r3, [r2, r3]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
 8001474:	4a0b      	ldr	r2, [pc, #44]	@ (80014a4 <HAL_Init+0x70>)
 8001476:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001478:	4a0b      	ldr	r2, [pc, #44]	@ (80014a8 <HAL_Init+0x74>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147e:	200f      	movs	r0, #15
 8001480:	f000 f814 	bl	80014ac <HAL_InitTick>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e002      	b.n	8001494 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800148e:	f7ff fc71 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	58024400 	.word	0x58024400
 80014a0:	080056f4 	.word	0x080056f4
 80014a4:	24000004 	.word	0x24000004
 80014a8:	24000000 	.word	0x24000000

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014b4:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_InitTick+0x60>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e021      	b.n	8001504 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014c0:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <HAL_InitTick+0x64>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <HAL_InitTick+0x60>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f939 	bl	800174e <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f911 	bl	800171a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_InitTick+0x68>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2400000c 	.word	0x2400000c
 8001510:	24000000 	.word	0x24000000
 8001514:	24000008 	.word	0x24000008

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2400000c 	.word	0x2400000c
 800153c:	240003b4 	.word	0x240003b4

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	240003b4 	.word	0x240003b4

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2400000c 	.word	0x2400000c

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <__NVIC_SetPriorityGrouping+0x40>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <__NVIC_SetPriorityGrouping+0x40>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	05fa0000 	.word	0x05fa0000

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	@ (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	@ (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	@ 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	@ 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f7ff ff8e 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff47 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001728:	f7ff ff5e 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 800172c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff ff90 	bl	8001658 <NVIC_EncodePriority>
 8001738:	4602      	mov	r2, r0
 800173a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff5f 	bl	8001604 <__NVIC_SetPriority>
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffb2 	bl	80016c0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800176c:	f3bf 8f5f 	dmb	sy
}
 8001770:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <HAL_MPU_Disable+0x28>)
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	4a06      	ldr	r2, [pc, #24]	@ (8001790 <HAL_MPU_Disable+0x28>)
 8001778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800177c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800177e:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_MPU_Disable+0x2c>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00
 8001794:	e000ed90 	.word	0xe000ed90

08001798 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017a0:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <HAL_MPU_Enable+0x38>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <HAL_MPU_Enable+0x3c>)
 80017ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ae:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <HAL_MPU_Enable+0x3c>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017b6:	f3bf 8f4f 	dsb	sy
}
 80017ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017bc:	f3bf 8f6f 	isb	sy
}
 80017c0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed90 	.word	0xe000ed90
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	785a      	ldrb	r2, [r3, #1]
 80017e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <HAL_MPU_ConfigRegion+0x7c>)
 80017e6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_MPU_ConfigRegion+0x7c>)
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <HAL_MPU_ConfigRegion+0x7c>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80017f4:	4a17      	ldr	r2, [pc, #92]	@ (8001854 <HAL_MPU_ConfigRegion+0x7c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7b1b      	ldrb	r3, [r3, #12]
 8001800:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7adb      	ldrb	r3, [r3, #11]
 8001806:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001808:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7a9b      	ldrb	r3, [r3, #10]
 800180e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001810:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7b5b      	ldrb	r3, [r3, #13]
 8001816:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001818:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7b9b      	ldrb	r3, [r3, #14]
 800181e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001820:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7bdb      	ldrb	r3, [r3, #15]
 8001826:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001828:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7a5b      	ldrb	r3, [r3, #9]
 800182e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001830:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7a1b      	ldrb	r3, [r3, #8]
 8001836:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001838:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001842:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001844:	6113      	str	r3, [r2, #16]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed90 	.word	0xe000ed90

08001858 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b098      	sub	sp, #96	@ 0x60
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001860:	4a84      	ldr	r2, [pc, #528]	@ (8001a74 <HAL_FDCAN_Init+0x21c>)
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	4611      	mov	r1, r2
 8001868:	224c      	movs	r2, #76	@ 0x4c
 800186a:	4618      	mov	r0, r3
 800186c:	f003 ff02 	bl	8005674 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e1c6      	b.n	8001c08 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a78 <HAL_FDCAN_Init+0x220>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d106      	bne.n	8001892 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fa7e 	bl	8000da8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	699a      	ldr	r2, [r3, #24]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0210 	bic.w	r2, r2, #16
 80018ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018bc:	f7ff fe40 	bl	8001540 <HAL_GetTick>
 80018c0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80018c2:	e014      	b.n	80018ee <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80018c4:	f7ff fe3c 	bl	8001540 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b0a      	cmp	r3, #10
 80018d0:	d90d      	bls.n	80018ee <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2203      	movs	r2, #3
 80018e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e18c      	b.n	8001c08 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d0e3      	beq.n	80018c4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff fe18 	bl	8001540 <HAL_GetTick>
 8001910:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001912:	e014      	b.n	800193e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001914:	f7ff fe14 	bl	8001540 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b0a      	cmp	r3, #10
 8001920:	d90d      	bls.n	800193e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2203      	movs	r2, #3
 8001936:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e164      	b.n	8001c08 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0e3      	beq.n	8001914 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0202 	orr.w	r2, r2, #2
 800195a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7c1b      	ldrb	r3, [r3, #16]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d108      	bne.n	8001976 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001972:	619a      	str	r2, [r3, #24]
 8001974:	e007      	b.n	8001986 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001984:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7c5b      	ldrb	r3, [r3, #17]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d108      	bne.n	80019a0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699a      	ldr	r2, [r3, #24]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800199c:	619a      	str	r2, [r3, #24]
 800199e:	e007      	b.n	80019b0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80019ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7c9b      	ldrb	r3, [r3, #18]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d108      	bne.n	80019ca <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80019c6:	619a      	str	r2, [r3, #24]
 80019c8:	e007      	b.n	80019da <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699a      	ldr	r2, [r3, #24]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80019d8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80019fe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0210 	bic.w	r2, r2, #16
 8001a0e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699a      	ldr	r2, [r3, #24]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0204 	orr.w	r2, r2, #4
 8001a26:	619a      	str	r2, [r3, #24]
 8001a28:	e030      	b.n	8001a8c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d02c      	beq.n	8001a8c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d020      	beq.n	8001a7c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699a      	ldr	r2, [r3, #24]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a48:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0210 	orr.w	r2, r2, #16
 8001a58:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d114      	bne.n	8001a8c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699a      	ldr	r2, [r3, #24]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0220 	orr.w	r2, r2, #32
 8001a70:	619a      	str	r2, [r3, #24]
 8001a72:	e00b      	b.n	8001a8c <HAL_FDCAN_Init+0x234>
 8001a74:	080056a8 	.word	0x080056a8
 8001a78:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0220 	orr.w	r2, r2, #32
 8001a8a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a9c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001aa4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001ab4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ab6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ac0:	d115      	bne.n	8001aee <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001acc:	3b01      	subs	r3, #1
 8001ace:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ad0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001ada:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001aea:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001aec:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00a      	beq.n	8001b0c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b14:	4413      	add	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d011      	beq.n	8001b3e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001b22:	f023 0107 	bic.w	r1, r3, #7
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	3360      	adds	r3, #96	@ 0x60
 8001b2e:	443b      	add	r3, r7
 8001b30:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d011      	beq.n	8001b6a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001b4e:	f023 0107 	bic.w	r1, r3, #7
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	3360      	adds	r3, #96	@ 0x60
 8001b5a:	443b      	add	r3, r7
 8001b5c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d012      	beq.n	8001b98 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001b7a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	3360      	adds	r3, #96	@ 0x60
 8001b86:	443b      	add	r3, r7
 8001b88:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b8c:	011a      	lsls	r2, r3, #4
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d012      	beq.n	8001bc6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001ba8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3360      	adds	r3, #96	@ 0x60
 8001bb4:	443b      	add	r3, r7
 8001bb6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001bba:	021a      	lsls	r2, r3, #8
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a11      	ldr	r2, [pc, #68]	@ (8001c10 <HAL_FDCAN_Init+0x3b8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d107      	bne.n	8001be0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f022 0203 	bic.w	r2, r2, #3
 8001bde:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f80b 	bl	8001c14 <FDCAN_CalcultateRamBlockAddresses>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8001c04:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3760      	adds	r7, #96	@ 0x60
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	4000a000 	.word	0x4000a000

08001c14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c20:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001c2a:	4ba7      	ldr	r3, [pc, #668]	@ (8001ec8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	0091      	lsls	r1, r2, #2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	430b      	orrs	r3, r1
 8001c38:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c44:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4c:	041a      	lsls	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001c6a:	4b97      	ldr	r3, [pc, #604]	@ (8001ec8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	0091      	lsls	r1, r2, #2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	430b      	orrs	r3, r1
 8001c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c84:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001cac:	4b86      	ldr	r3, [pc, #536]	@ (8001ec8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	0091      	lsls	r1, r2, #2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001cc6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	041a      	lsls	r2, r3, #16
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	4413      	add	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001cf4:	4b74      	ldr	r3, [pc, #464]	@ (8001ec8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	0091      	lsls	r1, r2, #2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001d0e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d16:	041a      	lsls	r2, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	4413      	add	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001d3c:	4b62      	ldr	r3, [pc, #392]	@ (8001ec8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	0091      	lsls	r1, r2, #2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001d68:	4b57      	ldr	r3, [pc, #348]	@ (8001ec8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	0091      	lsls	r1, r2, #2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	430b      	orrs	r3, r1
 8001d76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d82:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	041a      	lsls	r2, r3, #16
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001daa:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	0091      	lsls	r1, r2, #2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	430b      	orrs	r3, r1
 8001db8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001dc4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001de0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de8:	061a      	lsls	r2, r3, #24
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001df8:	4b34      	ldr	r3, [pc, #208]	@ (8001ecc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009a      	lsls	r2, r3, #2
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	441a      	add	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	441a      	add	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001e34:	441a      	add	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001e4c:	441a      	add	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001e64:	441a      	add	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	441a      	add	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	441a      	add	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001eb0:	441a      	add	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebe:	4a04      	ldr	r2, [pc, #16]	@ (8001ed0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d915      	bls.n	8001ef0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001ec4:	e006      	b.n	8001ed4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001ec6:	bf00      	nop
 8001ec8:	ffff0003 	.word	0xffff0003
 8001ecc:	10002b00 	.word	0x10002b00
 8001ed0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001eda:	f043 0220 	orr.w	r2, r3, #32
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e010      	b.n	8001f12 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e005      	b.n	8001f04 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3304      	adds	r3, #4
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d3f3      	bcc.n	8001ef8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f2e:	4b86      	ldr	r3, [pc, #536]	@ (8002148 <HAL_GPIO_Init+0x228>)
 8001f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f32:	e18c      	b.n	800224e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 817e 	beq.w	8002248 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d005      	beq.n	8001f64 <HAL_GPIO_Init+0x44>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d130      	bne.n	8001fc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	f003 0201 	and.w	r2, r3, #1
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d017      	beq.n	8002002 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d123      	bne.n	8002056 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3208      	adds	r2, #8
 8002050:	69b9      	ldr	r1, [r7, #24]
 8002052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	2203      	movs	r2, #3
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0203 	and.w	r2, r3, #3
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80d8 	beq.w	8002248 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002098:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <HAL_GPIO_Init+0x22c>)
 800209a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800209e:	4a2b      	ldr	r2, [pc, #172]	@ (800214c <HAL_GPIO_Init+0x22c>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020a8:	4b28      	ldr	r3, [pc, #160]	@ (800214c <HAL_GPIO_Init+0x22c>)
 80020aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b6:	4a26      	ldr	r2, [pc, #152]	@ (8002150 <HAL_GPIO_Init+0x230>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002154 <HAL_GPIO_Init+0x234>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d04a      	beq.n	8002178 <HAL_GPIO_Init+0x258>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002158 <HAL_GPIO_Init+0x238>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02b      	beq.n	8002142 <HAL_GPIO_Init+0x222>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1b      	ldr	r2, [pc, #108]	@ (800215c <HAL_GPIO_Init+0x23c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d025      	beq.n	800213e <HAL_GPIO_Init+0x21e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002160 <HAL_GPIO_Init+0x240>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01f      	beq.n	800213a <HAL_GPIO_Init+0x21a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a19      	ldr	r2, [pc, #100]	@ (8002164 <HAL_GPIO_Init+0x244>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d019      	beq.n	8002136 <HAL_GPIO_Init+0x216>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a18      	ldr	r2, [pc, #96]	@ (8002168 <HAL_GPIO_Init+0x248>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_GPIO_Init+0x212>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a17      	ldr	r2, [pc, #92]	@ (800216c <HAL_GPIO_Init+0x24c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00d      	beq.n	800212e <HAL_GPIO_Init+0x20e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a16      	ldr	r2, [pc, #88]	@ (8002170 <HAL_GPIO_Init+0x250>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d007      	beq.n	800212a <HAL_GPIO_Init+0x20a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a15      	ldr	r2, [pc, #84]	@ (8002174 <HAL_GPIO_Init+0x254>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d101      	bne.n	8002126 <HAL_GPIO_Init+0x206>
 8002122:	2309      	movs	r3, #9
 8002124:	e029      	b.n	800217a <HAL_GPIO_Init+0x25a>
 8002126:	230a      	movs	r3, #10
 8002128:	e027      	b.n	800217a <HAL_GPIO_Init+0x25a>
 800212a:	2307      	movs	r3, #7
 800212c:	e025      	b.n	800217a <HAL_GPIO_Init+0x25a>
 800212e:	2306      	movs	r3, #6
 8002130:	e023      	b.n	800217a <HAL_GPIO_Init+0x25a>
 8002132:	2305      	movs	r3, #5
 8002134:	e021      	b.n	800217a <HAL_GPIO_Init+0x25a>
 8002136:	2304      	movs	r3, #4
 8002138:	e01f      	b.n	800217a <HAL_GPIO_Init+0x25a>
 800213a:	2303      	movs	r3, #3
 800213c:	e01d      	b.n	800217a <HAL_GPIO_Init+0x25a>
 800213e:	2302      	movs	r3, #2
 8002140:	e01b      	b.n	800217a <HAL_GPIO_Init+0x25a>
 8002142:	2301      	movs	r3, #1
 8002144:	e019      	b.n	800217a <HAL_GPIO_Init+0x25a>
 8002146:	bf00      	nop
 8002148:	58000080 	.word	0x58000080
 800214c:	58024400 	.word	0x58024400
 8002150:	58000400 	.word	0x58000400
 8002154:	58020000 	.word	0x58020000
 8002158:	58020400 	.word	0x58020400
 800215c:	58020800 	.word	0x58020800
 8002160:	58020c00 	.word	0x58020c00
 8002164:	58021000 	.word	0x58021000
 8002168:	58021400 	.word	0x58021400
 800216c:	58021800 	.word	0x58021800
 8002170:	58021c00 	.word	0x58021c00
 8002174:	58022400 	.word	0x58022400
 8002178:	2300      	movs	r3, #0
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	f002 0203 	and.w	r2, r2, #3
 8002180:	0092      	lsls	r2, r2, #2
 8002182:	4093      	lsls	r3, r2
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800218a:	4938      	ldr	r1, [pc, #224]	@ (800226c <HAL_GPIO_Init+0x34c>)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	3301      	adds	r3, #1
 800224c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	f47f ae6b 	bne.w	8001f34 <HAL_GPIO_Init+0x14>
  }
}
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	3724      	adds	r7, #36	@ 0x24
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	58000400 	.word	0x58000400

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b4:	887a      	ldrh	r2, [r7, #2]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	041a      	lsls	r2, r3, #16
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43d9      	mvns	r1, r3
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	400b      	ands	r3, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <HAL_PWREx_ConfigSupply+0x70>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d00a      	beq.n	8002302 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022ec:	4b16      	ldr	r3, [pc, #88]	@ (8002348 <HAL_PWREx_ConfigSupply+0x70>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d001      	beq.n	80022fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e01f      	b.n	800233e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e01d      	b.n	800233e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002302:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <HAL_PWREx_ConfigSupply+0x70>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	490f      	ldr	r1, [pc, #60]	@ (8002348 <HAL_PWREx_ConfigSupply+0x70>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4313      	orrs	r3, r2
 8002310:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002312:	f7ff f915 	bl	8001540 <HAL_GetTick>
 8002316:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002318:	e009      	b.n	800232e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800231a:	f7ff f911 	bl	8001540 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002328:	d901      	bls.n	800232e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e007      	b.n	800233e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_PWREx_ConfigSupply+0x70>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002336:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800233a:	d1ee      	bne.n	800231a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	58024800 	.word	0x58024800

0800234c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	@ 0x30
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e3c8      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8087 	beq.w	800247a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236c:	4b88      	ldr	r3, [pc, #544]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002376:	4b86      	ldr	r3, [pc, #536]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 8002378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800237c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237e:	2b10      	cmp	r3, #16
 8002380:	d007      	beq.n	8002392 <HAL_RCC_OscConfig+0x46>
 8002382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002384:	2b18      	cmp	r3, #24
 8002386:	d110      	bne.n	80023aa <HAL_RCC_OscConfig+0x5e>
 8002388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d10b      	bne.n	80023aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002392:	4b7f      	ldr	r3, [pc, #508]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d06c      	beq.n	8002478 <HAL_RCC_OscConfig+0x12c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d168      	bne.n	8002478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e3a2      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x76>
 80023b4:	4b76      	ldr	r3, [pc, #472]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a75      	ldr	r2, [pc, #468]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80023ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	e02e      	b.n	8002420 <HAL_RCC_OscConfig+0xd4>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x98>
 80023ca:	4b71      	ldr	r3, [pc, #452]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a70      	ldr	r2, [pc, #448]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80023d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6d      	ldr	r2, [pc, #436]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80023dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e01d      	b.n	8002420 <HAL_RCC_OscConfig+0xd4>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0xbc>
 80023ee:	4b68      	ldr	r3, [pc, #416]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a67      	ldr	r2, [pc, #412]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b65      	ldr	r3, [pc, #404]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a64      	ldr	r2, [pc, #400]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0xd4>
 8002408:	4b61      	ldr	r3, [pc, #388]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a60      	ldr	r2, [pc, #384]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b5e      	ldr	r3, [pc, #376]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a5d      	ldr	r2, [pc, #372]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800241e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7ff f88a 	bl	8001540 <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7ff f886 	bl	8001540 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e356      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002442:	4b53      	ldr	r3, [pc, #332]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0xe4>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7ff f876 	bl	8001540 <HAL_GetTick>
 8002454:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7ff f872 	bl	8001540 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e342      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800246a:	4b49      	ldr	r3, [pc, #292]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x10c>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 808c 	beq.w	80025a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002488:	4b41      	ldr	r3, [pc, #260]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002490:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002492:	4b3f      	ldr	r3, [pc, #252]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_RCC_OscConfig+0x162>
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	2b18      	cmp	r3, #24
 80024a2:	d137      	bne.n	8002514 <HAL_RCC_OscConfig+0x1c8>
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d132      	bne.n	8002514 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ae:	4b38      	ldr	r3, [pc, #224]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x17a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e314      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024c6:	4b32      	ldr	r3, [pc, #200]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0219 	bic.w	r2, r3, #25
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	492f      	ldr	r1, [pc, #188]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7ff f832 	bl	8001540 <HAL_GetTick>
 80024dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e0:	f7ff f82e 	bl	8001540 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e2fe      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f2:	4b27      	ldr	r3, [pc, #156]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	061b      	lsls	r3, r3, #24
 800250c:	4920      	ldr	r1, [pc, #128]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002512:	e045      	b.n	80025a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d026      	beq.n	800256a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800251c:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 0219 	bic.w	r2, r3, #25
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4919      	ldr	r1, [pc, #100]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7ff f807 	bl	8001540 <HAL_GetTick>
 8002532:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002536:	f7ff f803 	bl	8001540 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e2d3      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002548:	4b11      	ldr	r3, [pc, #68]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	490b      	ldr	r1, [pc, #44]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
 8002568:	e01a      	b.n	80025a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a08      	ldr	r2, [pc, #32]	@ (8002590 <HAL_RCC_OscConfig+0x244>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe ffe3 	bl	8001540 <HAL_GetTick>
 800257a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257e:	f7fe ffdf 	bl	8001540 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d903      	bls.n	8002594 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e2af      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
 8002590:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002594:	4b96      	ldr	r3, [pc, #600]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ee      	bne.n	800257e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d06a      	beq.n	8002682 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ac:	4b90      	ldr	r3, [pc, #576]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025b6:	4b8e      	ldr	r3, [pc, #568]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80025b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d007      	beq.n	80025d2 <HAL_RCC_OscConfig+0x286>
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b18      	cmp	r3, #24
 80025c6:	d11b      	bne.n	8002600 <HAL_RCC_OscConfig+0x2b4>
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d116      	bne.n	8002600 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025d2:	4b87      	ldr	r3, [pc, #540]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x29e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	2b80      	cmp	r3, #128	@ 0x80
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e282      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ea:	4b81      	ldr	r3, [pc, #516]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	061b      	lsls	r3, r3, #24
 80025f8:	497d      	ldr	r1, [pc, #500]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025fe:	e040      	b.n	8002682 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d023      	beq.n	8002650 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002608:	4b79      	ldr	r3, [pc, #484]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a78      	ldr	r2, [pc, #480]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 800260e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe ff94 	bl	8001540 <HAL_GetTick>
 8002618:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800261c:	f7fe ff90 	bl	8001540 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e260      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800262e:	4b70      	ldr	r3, [pc, #448]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800263a:	4b6d      	ldr	r3, [pc, #436]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	061b      	lsls	r3, r3, #24
 8002648:	4969      	ldr	r1, [pc, #420]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]
 800264e:	e018      	b.n	8002682 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002650:	4b67      	ldr	r3, [pc, #412]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a66      	ldr	r2, [pc, #408]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 8002656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800265a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe ff70 	bl	8001540 <HAL_GetTick>
 8002660:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002664:	f7fe ff6c 	bl	8001540 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e23c      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002676:	4b5e      	ldr	r3, [pc, #376]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d036      	beq.n	80026fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d019      	beq.n	80026ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002696:	4b56      	ldr	r3, [pc, #344]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 8002698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269a:	4a55      	ldr	r2, [pc, #340]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a2:	f7fe ff4d 	bl	8001540 <HAL_GetTick>
 80026a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026aa:	f7fe ff49 	bl	8001540 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e219      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026bc:	4b4c      	ldr	r3, [pc, #304]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x35e>
 80026c8:	e018      	b.n	80026fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ca:	4b49      	ldr	r3, [pc, #292]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80026cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ce:	4a48      	ldr	r2, [pc, #288]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe ff33 	bl	8001540 <HAL_GetTick>
 80026da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026de:	f7fe ff2f 	bl	8001540 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e1ff      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026f0:	4b3f      	ldr	r3, [pc, #252]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d036      	beq.n	8002776 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d019      	beq.n	8002744 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002710:	4b37      	ldr	r3, [pc, #220]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a36      	ldr	r2, [pc, #216]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 8002716:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800271a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800271c:	f7fe ff10 	bl	8001540 <HAL_GetTick>
 8002720:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002724:	f7fe ff0c 	bl	8001540 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1dc      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002736:	4b2e      	ldr	r3, [pc, #184]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x3d8>
 8002742:	e018      	b.n	8002776 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002744:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a29      	ldr	r2, [pc, #164]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 800274a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800274e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002750:	f7fe fef6 	bl	8001540 <HAL_GetTick>
 8002754:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002758:	f7fe fef2 	bl	8001540 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1c2      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800276a:	4b21      	ldr	r3, [pc, #132]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8086 	beq.w	8002890 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002784:	4b1b      	ldr	r3, [pc, #108]	@ (80027f4 <HAL_RCC_OscConfig+0x4a8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1a      	ldr	r2, [pc, #104]	@ (80027f4 <HAL_RCC_OscConfig+0x4a8>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002790:	f7fe fed6 	bl	8001540 <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7fe fed2 	bl	8001540 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	@ 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1a2      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027aa:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_RCC_OscConfig+0x4a8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d106      	bne.n	80027cc <HAL_RCC_OscConfig+0x480>
 80027be:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	4a0b      	ldr	r2, [pc, #44]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ca:	e032      	b.n	8002832 <HAL_RCC_OscConfig+0x4e6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4ac>
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d8:	4a05      	ldr	r2, [pc, #20]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e0:	4b03      	ldr	r3, [pc, #12]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	4a02      	ldr	r2, [pc, #8]	@ (80027f0 <HAL_RCC_OscConfig+0x4a4>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ec:	e021      	b.n	8002832 <HAL_RCC_OscConfig+0x4e6>
 80027ee:	bf00      	nop
 80027f0:	58024400 	.word	0x58024400
 80027f4:	58024800 	.word	0x58024800
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d10c      	bne.n	800281a <HAL_RCC_OscConfig+0x4ce>
 8002800:	4b83      	ldr	r3, [pc, #524]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	4a82      	ldr	r2, [pc, #520]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	6713      	str	r3, [r2, #112]	@ 0x70
 800280c:	4b80      	ldr	r3, [pc, #512]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002810:	4a7f      	ldr	r2, [pc, #508]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6713      	str	r3, [r2, #112]	@ 0x70
 8002818:	e00b      	b.n	8002832 <HAL_RCC_OscConfig+0x4e6>
 800281a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70
 8002826:	4b7a      	ldr	r3, [pc, #488]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	4a79      	ldr	r2, [pc, #484]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d015      	beq.n	8002866 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7fe fe81 	bl	8001540 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fe fe7d 	bl	8001540 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e14b      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002858:	4b6d      	ldr	r3, [pc, #436]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ee      	beq.n	8002842 <HAL_RCC_OscConfig+0x4f6>
 8002864:	e014      	b.n	8002890 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fe fe6b 	bl	8001540 <HAL_GetTick>
 800286a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fe67 	bl	8001540 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e135      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002884:	4b62      	ldr	r3, [pc, #392]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ee      	bne.n	800286e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 812a 	beq.w	8002aee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800289a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028a2:	2b18      	cmp	r3, #24
 80028a4:	f000 80ba 	beq.w	8002a1c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	f040 8095 	bne.w	80029dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b2:	4b57      	ldr	r3, [pc, #348]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a56      	ldr	r2, [pc, #344]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 80028b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fe3f 	bl	8001540 <HAL_GetTick>
 80028c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe fe3b 	bl	8001540 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e10b      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 80028e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002a14 <HAL_RCC_OscConfig+0x6c8>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	430a      	orrs	r2, r1
 80028f8:	4945      	ldr	r1, [pc, #276]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	3b01      	subs	r3, #1
 8002904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290c:	3b01      	subs	r3, #1
 800290e:	025b      	lsls	r3, r3, #9
 8002910:	b29b      	uxth	r3, r3
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	3b01      	subs	r3, #1
 800291a:	041b      	lsls	r3, r3, #16
 800291c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002926:	3b01      	subs	r3, #1
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800292e:	4938      	ldr	r1, [pc, #224]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002934:	4b36      	ldr	r3, [pc, #216]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	4a35      	ldr	r2, [pc, #212]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002940:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002944:	4b34      	ldr	r3, [pc, #208]	@ (8002a18 <HAL_RCC_OscConfig+0x6cc>)
 8002946:	4013      	ands	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800294c:	00d2      	lsls	r2, r2, #3
 800294e:	4930      	ldr	r1, [pc, #192]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002954:	4b2e      	ldr	r3, [pc, #184]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	f023 020c 	bic.w	r2, r3, #12
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	492b      	ldr	r1, [pc, #172]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002966:	4b2a      	ldr	r3, [pc, #168]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	f023 0202 	bic.w	r2, r3, #2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	4927      	ldr	r1, [pc, #156]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002974:	4313      	orrs	r3, r2
 8002976:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	4a24      	ldr	r2, [pc, #144]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002984:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002988:	4a21      	ldr	r2, [pc, #132]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 800298a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800298e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002990:	4b1f      	ldr	r3, [pc, #124]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002994:	4a1e      	ldr	r2, [pc, #120]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002996:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800299a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800299c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a8:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a18      	ldr	r2, [pc, #96]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 80029ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fdc4 	bl	8001540 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fdc0 	bl	8001540 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e090      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ce:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x670>
 80029da:	e088      	b.n	8002aee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 80029e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fdaa 	bl	8001540 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fda6 	bl	8001540 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e076      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a02:	4b03      	ldr	r3, [pc, #12]	@ (8002a10 <HAL_RCC_OscConfig+0x6c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x6a4>
 8002a0e:	e06e      	b.n	8002aee <HAL_RCC_OscConfig+0x7a2>
 8002a10:	58024400 	.word	0x58024400
 8002a14:	fffffc0c 	.word	0xfffffc0c
 8002a18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a1c:	4b36      	ldr	r3, [pc, #216]	@ (8002af8 <HAL_RCC_OscConfig+0x7ac>)
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a22:	4b35      	ldr	r3, [pc, #212]	@ (8002af8 <HAL_RCC_OscConfig+0x7ac>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d031      	beq.n	8002a94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0203 	and.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d12a      	bne.n	8002a94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d122      	bne.n	8002a94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d11a      	bne.n	8002a94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	0a5b      	lsrs	r3, r3, #9
 8002a62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d111      	bne.n	8002a94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	0c1b      	lsrs	r3, r3, #16
 8002a74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d108      	bne.n	8002a94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	0e1b      	lsrs	r3, r3, #24
 8002a86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e02b      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a98:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <HAL_RCC_OscConfig+0x7ac>)
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9c:	08db      	lsrs	r3, r3, #3
 8002a9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002aa2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d01f      	beq.n	8002aee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002aae:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_RCC_OscConfig+0x7ac>)
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	4a11      	ldr	r2, [pc, #68]	@ (8002af8 <HAL_RCC_OscConfig+0x7ac>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aba:	f7fe fd41 	bl	8001540 <HAL_GetTick>
 8002abe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ac0:	bf00      	nop
 8002ac2:	f7fe fd3d 	bl	8001540 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d0f9      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_RCC_OscConfig+0x7ac>)
 8002ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <HAL_RCC_OscConfig+0x7b0>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ada:	00d2      	lsls	r2, r2, #3
 8002adc:	4906      	ldr	r1, [pc, #24]	@ (8002af8 <HAL_RCC_OscConfig+0x7ac>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ae2:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <HAL_RCC_OscConfig+0x7ac>)
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <HAL_RCC_OscConfig+0x7ac>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3730      	adds	r7, #48	@ 0x30
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	58024400 	.word	0x58024400
 8002afc:	ffff0007 	.word	0xffff0007

08002b00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e19c      	b.n	8002e4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b8a      	ldr	r3, [pc, #552]	@ (8002d40 <HAL_RCC_ClockConfig+0x240>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d910      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b87      	ldr	r3, [pc, #540]	@ (8002d40 <HAL_RCC_ClockConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 020f 	bic.w	r2, r3, #15
 8002b2a:	4985      	ldr	r1, [pc, #532]	@ (8002d40 <HAL_RCC_ClockConfig+0x240>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b83      	ldr	r3, [pc, #524]	@ (8002d40 <HAL_RCC_ClockConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e184      	b.n	8002e4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	4b7b      	ldr	r3, [pc, #492]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d908      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b60:	4b78      	ldr	r3, [pc, #480]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	4975      	ldr	r1, [pc, #468]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d010      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	4b70      	ldr	r3, [pc, #448]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d908      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	496a      	ldr	r1, [pc, #424]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	4b64      	ldr	r3, [pc, #400]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d908      	bls.n	8002bce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bbc:	4b61      	ldr	r3, [pc, #388]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	495e      	ldr	r1, [pc, #376]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d010      	beq.n	8002bfc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	4b59      	ldr	r3, [pc, #356]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d908      	bls.n	8002bfc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bea:	4b56      	ldr	r3, [pc, #344]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4953      	ldr	r1, [pc, #332]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d908      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c18:	4b4a      	ldr	r3, [pc, #296]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f023 020f 	bic.w	r2, r3, #15
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4947      	ldr	r1, [pc, #284]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d055      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c36:	4b43      	ldr	r3, [pc, #268]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	4940      	ldr	r1, [pc, #256]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c50:	4b3c      	ldr	r3, [pc, #240]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d121      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0f6      	b.n	8002e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d107      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c68:	4b36      	ldr	r3, [pc, #216]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d115      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0ea      	b.n	8002e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c80:	4b30      	ldr	r3, [pc, #192]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0de      	b.n	8002e4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c90:	4b2c      	ldr	r3, [pc, #176]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0d6      	b.n	8002e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ca0:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f023 0207 	bic.w	r2, r3, #7
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4925      	ldr	r1, [pc, #148]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb2:	f7fe fc45 	bl	8001540 <HAL_GetTick>
 8002cb6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cba:	f7fe fc41 	bl	8001540 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0be      	b.n	8002e4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d1eb      	bne.n	8002cba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	4b14      	ldr	r3, [pc, #80]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d208      	bcs.n	8002d10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfe:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f023 020f 	bic.w	r2, r3, #15
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	490e      	ldr	r1, [pc, #56]	@ (8002d44 <HAL_RCC_ClockConfig+0x244>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_RCC_ClockConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d214      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b08      	ldr	r3, [pc, #32]	@ (8002d40 <HAL_RCC_ClockConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 020f 	bic.w	r2, r3, #15
 8002d26:	4906      	ldr	r1, [pc, #24]	@ (8002d40 <HAL_RCC_ClockConfig+0x240>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <HAL_RCC_ClockConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e086      	b.n	8002e4e <HAL_RCC_ClockConfig+0x34e>
 8002d40:	52002000 	.word	0x52002000
 8002d44:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	4b3f      	ldr	r3, [pc, #252]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d208      	bcs.n	8002d76 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d64:	4b3c      	ldr	r3, [pc, #240]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4939      	ldr	r1, [pc, #228]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	4b34      	ldr	r3, [pc, #208]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d208      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d92:	4b31      	ldr	r3, [pc, #196]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	492e      	ldr	r1, [pc, #184]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d010      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	4b28      	ldr	r3, [pc, #160]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d208      	bcs.n	8002dd2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dc0:	4b25      	ldr	r3, [pc, #148]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	4922      	ldr	r1, [pc, #136]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d010      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d208      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dee:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4917      	ldr	r1, [pc, #92]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e00:	f000 f834 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	4912      	ldr	r1, [pc, #72]	@ (8002e5c <HAL_RCC_ClockConfig+0x35c>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <HAL_RCC_ClockConfig+0x358>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	4a0d      	ldr	r2, [pc, #52]	@ (8002e5c <HAL_RCC_ClockConfig+0x35c>)
 8002e28:	5cd3      	ldrb	r3, [r2, r3]
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
 8002e34:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <HAL_RCC_ClockConfig+0x360>)
 8002e36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e38:	4a0a      	ldr	r2, [pc, #40]	@ (8002e64 <HAL_RCC_ClockConfig+0x364>)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <HAL_RCC_ClockConfig+0x368>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe fb32 	bl	80014ac <HAL_InitTick>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	58024400 	.word	0x58024400
 8002e5c:	080056f4 	.word	0x080056f4
 8002e60:	24000004 	.word	0x24000004
 8002e64:	24000000 	.word	0x24000000
 8002e68:	24000008 	.word	0x24000008

08002e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	@ 0x24
 8002e70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e72:	4bb3      	ldr	r3, [pc, #716]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e7a:	2b18      	cmp	r3, #24
 8002e7c:	f200 8155 	bhi.w	800312a <HAL_RCC_GetSysClockFreq+0x2be>
 8002e80:	a201      	add	r2, pc, #4	@ (adr r2, 8002e88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002eed 	.word	0x08002eed
 8002e8c:	0800312b 	.word	0x0800312b
 8002e90:	0800312b 	.word	0x0800312b
 8002e94:	0800312b 	.word	0x0800312b
 8002e98:	0800312b 	.word	0x0800312b
 8002e9c:	0800312b 	.word	0x0800312b
 8002ea0:	0800312b 	.word	0x0800312b
 8002ea4:	0800312b 	.word	0x0800312b
 8002ea8:	08002f13 	.word	0x08002f13
 8002eac:	0800312b 	.word	0x0800312b
 8002eb0:	0800312b 	.word	0x0800312b
 8002eb4:	0800312b 	.word	0x0800312b
 8002eb8:	0800312b 	.word	0x0800312b
 8002ebc:	0800312b 	.word	0x0800312b
 8002ec0:	0800312b 	.word	0x0800312b
 8002ec4:	0800312b 	.word	0x0800312b
 8002ec8:	08002f19 	.word	0x08002f19
 8002ecc:	0800312b 	.word	0x0800312b
 8002ed0:	0800312b 	.word	0x0800312b
 8002ed4:	0800312b 	.word	0x0800312b
 8002ed8:	0800312b 	.word	0x0800312b
 8002edc:	0800312b 	.word	0x0800312b
 8002ee0:	0800312b 	.word	0x0800312b
 8002ee4:	0800312b 	.word	0x0800312b
 8002ee8:	08002f1f 	.word	0x08002f1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002eec:	4b94      	ldr	r3, [pc, #592]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ef8:	4b91      	ldr	r3, [pc, #580]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	08db      	lsrs	r3, r3, #3
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	4a90      	ldr	r2, [pc, #576]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f0a:	e111      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f0c:	4b8d      	ldr	r3, [pc, #564]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f0e:	61bb      	str	r3, [r7, #24]
      break;
 8002f10:	e10e      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f12:	4b8d      	ldr	r3, [pc, #564]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f14:	61bb      	str	r3, [r7, #24]
      break;
 8002f16:	e10b      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f18:	4b8c      	ldr	r3, [pc, #560]	@ (800314c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f1a:	61bb      	str	r3, [r7, #24]
      break;
 8002f1c:	e108      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f1e:	4b88      	ldr	r3, [pc, #544]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f28:	4b85      	ldr	r3, [pc, #532]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f34:	4b82      	ldr	r3, [pc, #520]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f3e:	4b80      	ldr	r3, [pc, #512]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f42:	08db      	lsrs	r3, r3, #3
 8002f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80e1 	beq.w	8003124 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	f000 8083 	beq.w	8003070 <HAL_RCC_GetSysClockFreq+0x204>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	f200 80a1 	bhi.w	80030b4 <HAL_RCC_GetSysClockFreq+0x248>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x114>
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d056      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f7e:	e099      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f80:	4b6f      	ldr	r3, [pc, #444]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d02d      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	4a6b      	ldr	r2, [pc, #428]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb6:	4b62      	ldr	r3, [pc, #392]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003150 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002fe6:	e087      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003154 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ffa:	4b51      	ldr	r3, [pc, #324]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800300a:	ed97 6a02 	vldr	s12, [r7, #8]
 800300e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003150 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800301a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800301e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003026:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800302a:	e065      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003036:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003158 <HAL_RCC_GetSysClockFreq+0x2ec>
 800303a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800303e:	4b40      	ldr	r3, [pc, #256]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800304e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003052:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003150 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800305a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800305e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800306e:	e043      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800315c <HAL_RCC_GetSysClockFreq+0x2f0>
 800307e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003082:	4b2f      	ldr	r3, [pc, #188]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003092:	ed97 6a02 	vldr	s12, [r7, #8]
 8003096:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003150 <HAL_RCC_GetSysClockFreq+0x2e4>
 800309a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800309e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030b2:	e021      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003158 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003150 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030f8:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	0a5b      	lsrs	r3, r3, #9
 80030fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003102:	3301      	adds	r3, #1
 8003104:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	ee07 3a90 	vmov	s15, r3
 800310c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003110:	edd7 6a07 	vldr	s13, [r7, #28]
 8003114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800311c:	ee17 3a90 	vmov	r3, s15
 8003120:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003122:	e005      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	61bb      	str	r3, [r7, #24]
      break;
 8003128:	e002      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800312a:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800312c:	61bb      	str	r3, [r7, #24]
      break;
 800312e:	bf00      	nop
  }

  return sysclockfreq;
 8003130:	69bb      	ldr	r3, [r7, #24]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	@ 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	58024400 	.word	0x58024400
 8003144:	03d09000 	.word	0x03d09000
 8003148:	003d0900 	.word	0x003d0900
 800314c:	02dc6c00 	.word	0x02dc6c00
 8003150:	46000000 	.word	0x46000000
 8003154:	4c742400 	.word	0x4c742400
 8003158:	4a742400 	.word	0x4a742400
 800315c:	4c371b00 	.word	0x4c371b00

08003160 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003164:	b0c6      	sub	sp, #280	@ 0x118
 8003166:	af00      	add	r7, sp, #0
 8003168:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800316c:	2300      	movs	r3, #0
 800316e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003172:	2300      	movs	r3, #0
 8003174:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003184:	2500      	movs	r5, #0
 8003186:	ea54 0305 	orrs.w	r3, r4, r5
 800318a:	d049      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800318c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003190:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003192:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003196:	d02f      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003198:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800319c:	d828      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800319e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031a2:	d01a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031a8:	d822      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80031ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031b2:	d007      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031b4:	e01c      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b6:	4bab      	ldr	r3, [pc, #684]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ba:	4aaa      	ldr	r2, [pc, #680]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031c2:	e01a      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031c8:	3308      	adds	r3, #8
 80031ca:	2102      	movs	r1, #2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 f967 	bl	80044a0 <RCCEx_PLL2_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031d8:	e00f      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031de:	3328      	adds	r3, #40	@ 0x28
 80031e0:	2102      	movs	r1, #2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 fa0e 	bl	8004604 <RCCEx_PLL3_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031ee:	e004      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031f6:	e000      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80031f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003202:	4b98      	ldr	r3, [pc, #608]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003206:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800320a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800320e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003210:	4a94      	ldr	r2, [pc, #592]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003212:	430b      	orrs	r3, r1
 8003214:	6513      	str	r3, [r2, #80]	@ 0x50
 8003216:	e003      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800321c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800322c:	f04f 0900 	mov.w	r9, #0
 8003230:	ea58 0309 	orrs.w	r3, r8, r9
 8003234:	d047      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	2b04      	cmp	r3, #4
 800323e:	d82a      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003240:	a201      	add	r2, pc, #4	@ (adr r2, 8003248 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	0800325d 	.word	0x0800325d
 800324c:	0800326b 	.word	0x0800326b
 8003250:	08003281 	.word	0x08003281
 8003254:	0800329f 	.word	0x0800329f
 8003258:	0800329f 	.word	0x0800329f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800325c:	4b81      	ldr	r3, [pc, #516]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	4a80      	ldr	r2, [pc, #512]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003268:	e01a      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800326a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800326e:	3308      	adds	r3, #8
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f001 f914 	bl	80044a0 <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800327e:	e00f      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003284:	3328      	adds	r3, #40	@ 0x28
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f001 f9bb 	bl	8004604 <RCCEx_PLL3_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003294:	e004      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800329c:	e000      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800329e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032a8:	4b6e      	ldr	r3, [pc, #440]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ac:	f023 0107 	bic.w	r1, r3, #7
 80032b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b6:	4a6b      	ldr	r2, [pc, #428]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80032bc:	e003      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80032d2:	f04f 0b00 	mov.w	fp, #0
 80032d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80032da:	d05b      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80032dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80032e4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80032e8:	d03b      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80032ea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80032ee:	d834      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032f4:	d037      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80032f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032fa:	d82e      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003300:	d033      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003302:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003306:	d828      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003308:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800330c:	d01a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800330e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003312:	d822      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003318:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800331c:	d007      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800331e:	e01c      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003320:	4b50      	ldr	r3, [pc, #320]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	4a4f      	ldr	r2, [pc, #316]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800332a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800332c:	e01e      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800332e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003332:	3308      	adds	r3, #8
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f001 f8b2 	bl	80044a0 <RCCEx_PLL2_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003342:	e013      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003348:	3328      	adds	r3, #40	@ 0x28
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f001 f959 	bl	8004604 <RCCEx_PLL3_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003358:	e008      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003360:	e004      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003362:	bf00      	nop
 8003364:	e002      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003366:	bf00      	nop
 8003368:	e000      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800336a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800336c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10b      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003374:	4b3b      	ldr	r3, [pc, #236]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003378:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800337c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003380:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003384:	4a37      	ldr	r2, [pc, #220]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003386:	430b      	orrs	r3, r1
 8003388:	6593      	str	r3, [r2, #88]	@ 0x58
 800338a:	e003      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80033a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80033a4:	2300      	movs	r3, #0
 80033a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80033aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80033ae:	460b      	mov	r3, r1
 80033b0:	4313      	orrs	r3, r2
 80033b2:	d05d      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80033b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80033c0:	d03b      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80033c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80033c6:	d834      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033cc:	d037      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80033ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033d2:	d82e      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033d8:	d033      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80033da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033de:	d828      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033e4:	d01a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80033e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033ea:	d822      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80033f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033f4:	d007      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80033f6:	e01c      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	4a19      	ldr	r2, [pc, #100]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003402:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003404:	e01e      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800340a:	3308      	adds	r3, #8
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f001 f846 	bl	80044a0 <RCCEx_PLL2_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800341a:	e013      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800341c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003420:	3328      	adds	r3, #40	@ 0x28
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f001 f8ed 	bl	8004604 <RCCEx_PLL3_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003430:	e008      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003438:	e004      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800343a:	bf00      	nop
 800343c:	e002      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800343e:	bf00      	nop
 8003440:	e000      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003458:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800345c:	4a01      	ldr	r2, [pc, #4]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800345e:	430b      	orrs	r3, r1
 8003460:	6593      	str	r3, [r2, #88]	@ 0x58
 8003462:	e005      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800346c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800347c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003486:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800348a:	460b      	mov	r3, r1
 800348c:	4313      	orrs	r3, r2
 800348e:	d03a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003496:	2b30      	cmp	r3, #48	@ 0x30
 8003498:	d01f      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800349a:	2b30      	cmp	r3, #48	@ 0x30
 800349c:	d819      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d00c      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d815      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d019      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d111      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ae:	4baa      	ldr	r3, [pc, #680]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b2:	4aa9      	ldr	r2, [pc, #676]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80034ba:	e011      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c0:	3308      	adds	r3, #8
 80034c2:	2102      	movs	r1, #2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 ffeb 	bl	80044a0 <RCCEx_PLL2_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80034d0:	e006      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034d8:	e002      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80034da:	bf00      	nop
 80034dc:	e000      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80034de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80034e8:	4b9b      	ldr	r3, [pc, #620]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80034f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f6:	4a98      	ldr	r2, [pc, #608]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034f8:	430b      	orrs	r3, r1
 80034fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003502:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003512:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800351c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d051      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003530:	d035      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003532:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003536:	d82e      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003538:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800353c:	d031      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800353e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003542:	d828      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003548:	d01a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800354a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800354e:	d822      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003558:	d007      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800355a:	e01c      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355c:	4b7e      	ldr	r3, [pc, #504]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	4a7d      	ldr	r2, [pc, #500]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003568:	e01c      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800356a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800356e:	3308      	adds	r3, #8
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f000 ff94 	bl	80044a0 <RCCEx_PLL2_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800357e:	e011      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003584:	3328      	adds	r3, #40	@ 0x28
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f001 f83b 	bl	8004604 <RCCEx_PLL3_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003594:	e006      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800359c:	e002      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80035a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80035b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ba:	4a67      	ldr	r2, [pc, #412]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035bc:	430b      	orrs	r3, r1
 80035be:	6513      	str	r3, [r2, #80]	@ 0x50
 80035c0:	e003      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80035d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035e0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4313      	orrs	r3, r2
 80035e8:	d053      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80035ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035f4:	d033      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80035f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035fa:	d82c      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003600:	d02f      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003602:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003606:	d826      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003608:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800360c:	d02b      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800360e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003612:	d820      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003618:	d012      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800361a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800361e:	d81a      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d022      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003628:	d115      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800362a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362e:	3308      	adds	r3, #8
 8003630:	2101      	movs	r1, #1
 8003632:	4618      	mov	r0, r3
 8003634:	f000 ff34 	bl	80044a0 <RCCEx_PLL2_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800363e:	e015      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003644:	3328      	adds	r3, #40	@ 0x28
 8003646:	2101      	movs	r1, #1
 8003648:	4618      	mov	r0, r3
 800364a:	f000 ffdb 	bl	8004604 <RCCEx_PLL3_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003654:	e00a      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800365c:	e006      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800365e:	bf00      	nop
 8003660:	e004      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003662:	bf00      	nop
 8003664:	e002      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003666:	bf00      	nop
 8003668:	e000      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800366a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003674:	4b38      	ldr	r3, [pc, #224]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003678:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800367c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003682:	4a35      	ldr	r2, [pc, #212]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003684:	430b      	orrs	r3, r1
 8003686:	6513      	str	r3, [r2, #80]	@ 0x50
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800368e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800369e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036a2:	2300      	movs	r3, #0
 80036a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80036a8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036ac:	460b      	mov	r3, r1
 80036ae:	4313      	orrs	r3, r2
 80036b0:	d058      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80036b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036be:	d033      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80036c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036c4:	d82c      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ca:	d02f      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d0:	d826      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80036d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036d6:	d02b      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80036d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036dc:	d820      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80036de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036e2:	d012      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80036e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036e8:	d81a      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d022      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80036ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036f2:	d115      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f8:	3308      	adds	r3, #8
 80036fa:	2101      	movs	r1, #1
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fecf 	bl	80044a0 <RCCEx_PLL2_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003708:	e015      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800370a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800370e:	3328      	adds	r3, #40	@ 0x28
 8003710:	2101      	movs	r1, #1
 8003712:	4618      	mov	r0, r3
 8003714:	f000 ff76 	bl	8004604 <RCCEx_PLL3_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800371e:	e00a      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003726:	e006      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003728:	bf00      	nop
 800372a:	e004      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800372c:	bf00      	nop
 800372e:	e002      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003730:	bf00      	nop
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10e      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800373e:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003742:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800374a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800374e:	4a02      	ldr	r2, [pc, #8]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003750:	430b      	orrs	r3, r1
 8003752:	6593      	str	r3, [r2, #88]	@ 0x58
 8003754:	e006      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003760:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800377a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800377e:	460b      	mov	r3, r1
 8003780:	4313      	orrs	r3, r2
 8003782:	d037      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800378a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800378e:	d00e      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003790:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003794:	d816      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d018      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800379a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800379e:	d111      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a0:	4bc4      	ldr	r3, [pc, #784]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	4ac3      	ldr	r2, [pc, #780]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037ac:	e00f      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b2:	3308      	adds	r3, #8
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fe72 	bl	80044a0 <RCCEx_PLL2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037c2:	e004      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80037cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037d6:	4bb7      	ldr	r3, [pc, #732]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80037de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037e4:	4ab3      	ldr	r2, [pc, #716]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80037ea:	e003      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003800:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800380a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	d039      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800381a:	2b03      	cmp	r3, #3
 800381c:	d81c      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800381e:	a201      	add	r2, pc, #4	@ (adr r2, 8003824 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	08003861 	.word	0x08003861
 8003828:	08003835 	.word	0x08003835
 800382c:	08003843 	.word	0x08003843
 8003830:	08003861 	.word	0x08003861
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003834:	4b9f      	ldr	r3, [pc, #636]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	4a9e      	ldr	r2, [pc, #632]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800383a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800383e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003840:	e00f      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003846:	3308      	adds	r3, #8
 8003848:	2102      	movs	r1, #2
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fe28 	bl	80044a0 <RCCEx_PLL2_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003856:	e004      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800385e:	e000      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003862:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800386a:	4b92      	ldr	r3, [pc, #584]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386e:	f023 0103 	bic.w	r1, r3, #3
 8003872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003878:	4a8e      	ldr	r2, [pc, #568]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800387a:	430b      	orrs	r3, r1
 800387c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800387e:	e003      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003884:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003894:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800389e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f000 8099 	beq.w	80039dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038aa:	4b83      	ldr	r3, [pc, #524]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a82      	ldr	r2, [pc, #520]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038b6:	f7fd fe43 	bl	8001540 <HAL_GetTick>
 80038ba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038be:	e00b      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c0:	f7fd fe3e 	bl	8001540 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b64      	cmp	r3, #100	@ 0x64
 80038ce:	d903      	bls.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038d6:	e005      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d8:	4b77      	ldr	r3, [pc, #476]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ed      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80038e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d173      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038ec:	4b71      	ldr	r3, [pc, #452]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038f8:	4053      	eors	r3, r2
 80038fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d015      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003902:	4b6c      	ldr	r3, [pc, #432]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800390a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800390e:	4b69      	ldr	r3, [pc, #420]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	4a68      	ldr	r2, [pc, #416]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003918:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800391a:	4b66      	ldr	r3, [pc, #408]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391e:	4a65      	ldr	r2, [pc, #404]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003924:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003926:	4a63      	ldr	r2, [pc, #396]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800392c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800392e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003932:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800393a:	d118      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd fe00 	bl	8001540 <HAL_GetTick>
 8003940:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003944:	e00d      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fd fdfb 	bl	8001540 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003950:	1ad2      	subs	r2, r2, r3
 8003952:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003956:	429a      	cmp	r2, r3
 8003958:	d903      	bls.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003960:	e005      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003962:	4b54      	ldr	r3, [pc, #336]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0eb      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800396e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003972:	2b00      	cmp	r3, #0
 8003974:	d129      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800397e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003986:	d10e      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003988:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003994:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003998:	091a      	lsrs	r2, r3, #4
 800399a:	4b48      	ldr	r3, [pc, #288]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800399c:	4013      	ands	r3, r2
 800399e:	4a45      	ldr	r2, [pc, #276]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6113      	str	r3, [r2, #16]
 80039a4:	e005      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80039a6:	4b43      	ldr	r3, [pc, #268]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	4a42      	ldr	r2, [pc, #264]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80039b0:	6113      	str	r3, [r2, #16]
 80039b2:	4b40      	ldr	r3, [pc, #256]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80039b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c2:	4a3c      	ldr	r2, [pc, #240]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c8:	e008      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80039d2:	e003      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f002 0301 	and.w	r3, r2, #1
 80039e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80039f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80039f6:	460b      	mov	r3, r1
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f000 808f 	beq.w	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80039fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a04:	2b28      	cmp	r3, #40	@ 0x28
 8003a06:	d871      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003a08:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003af5 	.word	0x08003af5
 8003a14:	08003aed 	.word	0x08003aed
 8003a18:	08003aed 	.word	0x08003aed
 8003a1c:	08003aed 	.word	0x08003aed
 8003a20:	08003aed 	.word	0x08003aed
 8003a24:	08003aed 	.word	0x08003aed
 8003a28:	08003aed 	.word	0x08003aed
 8003a2c:	08003aed 	.word	0x08003aed
 8003a30:	08003ac1 	.word	0x08003ac1
 8003a34:	08003aed 	.word	0x08003aed
 8003a38:	08003aed 	.word	0x08003aed
 8003a3c:	08003aed 	.word	0x08003aed
 8003a40:	08003aed 	.word	0x08003aed
 8003a44:	08003aed 	.word	0x08003aed
 8003a48:	08003aed 	.word	0x08003aed
 8003a4c:	08003aed 	.word	0x08003aed
 8003a50:	08003ad7 	.word	0x08003ad7
 8003a54:	08003aed 	.word	0x08003aed
 8003a58:	08003aed 	.word	0x08003aed
 8003a5c:	08003aed 	.word	0x08003aed
 8003a60:	08003aed 	.word	0x08003aed
 8003a64:	08003aed 	.word	0x08003aed
 8003a68:	08003aed 	.word	0x08003aed
 8003a6c:	08003aed 	.word	0x08003aed
 8003a70:	08003af5 	.word	0x08003af5
 8003a74:	08003aed 	.word	0x08003aed
 8003a78:	08003aed 	.word	0x08003aed
 8003a7c:	08003aed 	.word	0x08003aed
 8003a80:	08003aed 	.word	0x08003aed
 8003a84:	08003aed 	.word	0x08003aed
 8003a88:	08003aed 	.word	0x08003aed
 8003a8c:	08003aed 	.word	0x08003aed
 8003a90:	08003af5 	.word	0x08003af5
 8003a94:	08003aed 	.word	0x08003aed
 8003a98:	08003aed 	.word	0x08003aed
 8003a9c:	08003aed 	.word	0x08003aed
 8003aa0:	08003aed 	.word	0x08003aed
 8003aa4:	08003aed 	.word	0x08003aed
 8003aa8:	08003aed 	.word	0x08003aed
 8003aac:	08003aed 	.word	0x08003aed
 8003ab0:	08003af5 	.word	0x08003af5
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	58024800 	.word	0x58024800
 8003abc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fce9 	bl	80044a0 <RCCEx_PLL2_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ad4:	e00f      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ada:	3328      	adds	r3, #40	@ 0x28
 8003adc:	2101      	movs	r1, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fd90 	bl	8004604 <RCCEx_PLL3_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003aea:	e004      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003af2:	e000      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003afe:	4bbf      	ldr	r3, [pc, #764]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b0c:	4abb      	ldr	r2, [pc, #748]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b12:	e003      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f002 0302 	and.w	r3, r2, #2
 8003b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	d041      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d824      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003b46:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b99 	.word	0x08003b99
 8003b50:	08003b65 	.word	0x08003b65
 8003b54:	08003b7b 	.word	0x08003b7b
 8003b58:	08003b99 	.word	0x08003b99
 8003b5c:	08003b99 	.word	0x08003b99
 8003b60:	08003b99 	.word	0x08003b99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b68:	3308      	adds	r3, #8
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fc97 	bl	80044a0 <RCCEx_PLL2_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b78:	e00f      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7e:	3328      	adds	r3, #40	@ 0x28
 8003b80:	2101      	movs	r1, #1
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fd3e 	bl	8004604 <RCCEx_PLL3_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b8e:	e004      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b96:	e000      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ba2:	4b96      	ldr	r3, [pc, #600]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba6:	f023 0107 	bic.w	r1, r3, #7
 8003baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb0:	4a92      	ldr	r2, [pc, #584]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bb6:	e003      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f002 0304 	and.w	r3, r2, #4
 8003bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bd6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	d044      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d825      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003bec:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c41 	.word	0x08003c41
 8003bf8:	08003c0d 	.word	0x08003c0d
 8003bfc:	08003c23 	.word	0x08003c23
 8003c00:	08003c41 	.word	0x08003c41
 8003c04:	08003c41 	.word	0x08003c41
 8003c08:	08003c41 	.word	0x08003c41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c10:	3308      	adds	r3, #8
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fc43 	bl	80044a0 <RCCEx_PLL2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c20:	e00f      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c26:	3328      	adds	r3, #40	@ 0x28
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fcea 	bl	8004604 <RCCEx_PLL3_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c36:	e004      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10b      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c4a:	4b6c      	ldr	r3, [pc, #432]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f023 0107 	bic.w	r1, r3, #7
 8003c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	4a68      	ldr	r2, [pc, #416]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c60:	e003      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f002 0320 	and.w	r3, r2, #32
 8003c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003c80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4313      	orrs	r3, r2
 8003c88:	d055      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c96:	d033      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c9c:	d82c      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca2:	d02f      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca8:	d826      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003caa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cae:	d02b      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003cb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cb4:	d820      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cba:	d012      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003cbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cc0:	d81a      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d022      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003cc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cca:	d115      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fbe3 	bl	80044a0 <RCCEx_PLL2_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ce0:	e015      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce6:	3328      	adds	r3, #40	@ 0x28
 8003ce8:	2102      	movs	r1, #2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fc8a 	bl	8004604 <RCCEx_PLL3_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cfe:	e006      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d00:	bf00      	nop
 8003d02:	e004      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d04:	bf00      	nop
 8003d06:	e002      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d08:	bf00      	nop
 8003d0a:	e000      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d16:	4b39      	ldr	r3, [pc, #228]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d26:	4a35      	ldr	r2, [pc, #212]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d2c:	e003      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003d42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d4c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003d50:	460b      	mov	r3, r1
 8003d52:	4313      	orrs	r3, r2
 8003d54:	d058      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d62:	d033      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003d64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d68:	d82c      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6e:	d02f      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d74:	d826      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d7a:	d02b      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003d7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d80:	d820      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d86:	d012      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8c:	d81a      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d022      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d96:	d115      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fb7d 	bl	80044a0 <RCCEx_PLL2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003dac:	e015      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db2:	3328      	adds	r3, #40	@ 0x28
 8003db4:	2102      	movs	r1, #2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fc24 	bl	8004604 <RCCEx_PLL3_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003dc2:	e00a      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dca:	e006      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003dcc:	bf00      	nop
 8003dce:	e004      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003dd0:	bf00      	nop
 8003dd2:	e002      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003dd4:	bf00      	nop
 8003dd6:	e000      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10e      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003df2:	4a02      	ldr	r2, [pc, #8]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003df8:	e006      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003dfa:	bf00      	nop
 8003dfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003e14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d055      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e34:	d033      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003e36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e3a:	d82c      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e40:	d02f      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e46:	d826      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003e48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e4c:	d02b      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003e4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e52:	d820      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003e54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e58:	d012      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003e5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e5e:	d81a      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d022      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e68:	d115      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6e:	3308      	adds	r3, #8
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fb14 	bl	80044a0 <RCCEx_PLL2_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e7e:	e015      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e84:	3328      	adds	r3, #40	@ 0x28
 8003e86:	2102      	movs	r1, #2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fbbb 	bl	8004604 <RCCEx_PLL3_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e94:	e00a      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e9c:	e006      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e9e:	bf00      	nop
 8003ea0:	e004      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003eb4:	4ba0      	ldr	r3, [pc, #640]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ec4:	4a9c      	ldr	r2, [pc, #624]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eca:	e003      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ed0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f002 0308 	and.w	r3, r2, #8
 8003ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003eea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	d01e      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f06:	3328      	adds	r3, #40	@ 0x28
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fb7a 	bl	8004604 <RCCEx_PLL3_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003f1c:	4b86      	ldr	r3, [pc, #536]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f2c:	4a82      	ldr	r2, [pc, #520]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	f002 0310 	and.w	r3, r2, #16
 8003f3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f42:	2300      	movs	r3, #0
 8003f44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f48:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	d01e      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f5e:	d10c      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f64:	3328      	adds	r3, #40	@ 0x28
 8003f66:	2102      	movs	r1, #2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fb4b 	bl	8004604 <RCCEx_PLL3_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f8a:	4a6b      	ldr	r2, [pc, #428]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fa2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	d03e      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fb8:	d022      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003fba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fbe:	d81b      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003fca:	e015      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fa63 	bl	80044a0 <RCCEx_PLL2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fe0:	e00f      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe6:	3328      	adds	r3, #40	@ 0x28
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fb0a 	bl	8004604 <RCCEx_PLL3_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ff6:	e004      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004002:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800400a:	4b4b      	ldr	r3, [pc, #300]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004016:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800401a:	4a47      	ldr	r2, [pc, #284]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800401c:	430b      	orrs	r3, r1
 800401e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004020:	e003      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004026:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800402a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004036:	673b      	str	r3, [r7, #112]	@ 0x70
 8004038:	2300      	movs	r3, #0
 800403a:	677b      	str	r3, [r7, #116]	@ 0x74
 800403c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d03b      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800404e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004052:	d01f      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004054:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004058:	d818      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800405a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800405e:	d003      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004060:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004064:	d007      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004066:	e011      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004068:	4b33      	ldr	r3, [pc, #204]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	4a32      	ldr	r2, [pc, #200]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800406e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004074:	e00f      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407a:	3328      	adds	r3, #40	@ 0x28
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fac0 	bl	8004604 <RCCEx_PLL3_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800408a:	e004      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004092:	e000      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10b      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800409e:	4b26      	ldr	r3, [pc, #152]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80040a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ae:	4a22      	ldr	r2, [pc, #136]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80040b4:	e003      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80040ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040cc:	2300      	movs	r3, #0
 80040ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80040d4:	460b      	mov	r3, r1
 80040d6:	4313      	orrs	r3, r2
 80040d8:	d034      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80040da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e8:	d007      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80040ea:	e011      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ec:	4b12      	ldr	r3, [pc, #72]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	4a11      	ldr	r2, [pc, #68]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040f8:	e00e      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fe:	3308      	adds	r3, #8
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f9cc 	bl	80044a0 <RCCEx_PLL2_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800410e:	e003      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004118:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10d      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004124:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412e:	4a02      	ldr	r2, [pc, #8]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004130:	430b      	orrs	r3, r1
 8004132:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004134:	e006      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004136:	bf00      	nop
 8004138:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004140:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004150:	663b      	str	r3, [r7, #96]	@ 0x60
 8004152:	2300      	movs	r3, #0
 8004154:	667b      	str	r3, [r7, #100]	@ 0x64
 8004156:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800415a:	460b      	mov	r3, r1
 800415c:	4313      	orrs	r3, r2
 800415e:	d00c      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004164:	3328      	adds	r3, #40	@ 0x28
 8004166:	2102      	movs	r1, #2
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fa4b 	bl	8004604 <RCCEx_PLL3_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800417a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004186:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004188:	2300      	movs	r3, #0
 800418a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800418c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004190:	460b      	mov	r3, r1
 8004192:	4313      	orrs	r3, r2
 8004194:	d036      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800419c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a0:	d018      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80041a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a6:	d811      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80041a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ac:	d014      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80041ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b2:	d80b      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d011      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80041b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041bc:	d106      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041be:	4bb7      	ldr	r3, [pc, #732]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c2:	4ab6      	ldr	r2, [pc, #728]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041ca:	e008      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80041d4:	bf00      	nop
 80041d6:	e002      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80041d8:	bf00      	nop
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80041dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041e6:	4bad      	ldr	r3, [pc, #692]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041f4:	4aa9      	ldr	r2, [pc, #676]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041f6:	430b      	orrs	r3, r1
 80041f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80041fa:	e003      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004200:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004210:	653b      	str	r3, [r7, #80]	@ 0x50
 8004212:	2300      	movs	r3, #0
 8004214:	657b      	str	r3, [r7, #84]	@ 0x54
 8004216:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800421a:	460b      	mov	r3, r1
 800421c:	4313      	orrs	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004220:	4b9e      	ldr	r3, [pc, #632]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004224:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422e:	4a9b      	ldr	r2, [pc, #620]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004242:	2300      	movs	r3, #0
 8004244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004246:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800424a:	460b      	mov	r3, r1
 800424c:	4313      	orrs	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004250:	4b92      	ldr	r3, [pc, #584]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004254:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800425e:	4a8f      	ldr	r2, [pc, #572]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004270:	643b      	str	r3, [r7, #64]	@ 0x40
 8004272:	2300      	movs	r3, #0
 8004274:	647b      	str	r3, [r7, #68]	@ 0x44
 8004276:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800427a:	460b      	mov	r3, r1
 800427c:	4313      	orrs	r3, r2
 800427e:	d00e      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004280:	4b86      	ldr	r3, [pc, #536]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	4a85      	ldr	r2, [pc, #532]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004286:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800428a:	6113      	str	r3, [r2, #16]
 800428c:	4b83      	ldr	r3, [pc, #524]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800428e:	6919      	ldr	r1, [r3, #16]
 8004290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004294:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004298:	4a80      	ldr	r2, [pc, #512]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800429a:	430b      	orrs	r3, r1
 800429c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800429e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80042aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042ac:	2300      	movs	r3, #0
 80042ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80042b4:	460b      	mov	r3, r1
 80042b6:	4313      	orrs	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042ba:	4b78      	ldr	r3, [pc, #480]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80042c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c8:	4a74      	ldr	r2, [pc, #464]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042ca:	430b      	orrs	r3, r1
 80042cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80042da:	633b      	str	r3, [r7, #48]	@ 0x30
 80042dc:	2300      	movs	r3, #0
 80042de:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80042e4:	460b      	mov	r3, r1
 80042e6:	4313      	orrs	r3, r2
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042ea:	4b6c      	ldr	r3, [pc, #432]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80042f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fa:	4a68      	ldr	r2, [pc, #416]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	2100      	movs	r1, #0
 800430a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004312:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004316:	460b      	mov	r3, r1
 8004318:	4313      	orrs	r3, r2
 800431a:	d011      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800431c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004320:	3308      	adds	r3, #8
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f8bb 	bl	80044a0 <RCCEx_PLL2_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800433c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	2100      	movs	r1, #0
 800434a:	6239      	str	r1, [r7, #32]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	627b      	str	r3, [r7, #36]	@ 0x24
 8004352:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004356:	460b      	mov	r3, r1
 8004358:	4313      	orrs	r3, r2
 800435a:	d011      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800435c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004360:	3308      	adds	r3, #8
 8004362:	2101      	movs	r1, #1
 8004364:	4618      	mov	r0, r3
 8004366:	f000 f89b 	bl	80044a0 <RCCEx_PLL2_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800437c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	2100      	movs	r1, #0
 800438a:	61b9      	str	r1, [r7, #24]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004396:	460b      	mov	r3, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	d011      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800439c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a0:	3308      	adds	r3, #8
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f87b 	bl	80044a0 <RCCEx_PLL2_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80043b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80043c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	2100      	movs	r1, #0
 80043ca:	6139      	str	r1, [r7, #16]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d011      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e0:	3328      	adds	r3, #40	@ 0x28
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f90d 	bl	8004604 <RCCEx_PLL3_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80043f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	2100      	movs	r1, #0
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
 800441a:	d011      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800441c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004420:	3328      	adds	r3, #40	@ 0x28
 8004422:	2101      	movs	r1, #1
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f8ed 	bl	8004604 <RCCEx_PLL3_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800443c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	2100      	movs	r1, #0
 800444a:	6039      	str	r1, [r7, #0]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d011      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800445c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004460:	3328      	adds	r3, #40	@ 0x28
 8004462:	2102      	movs	r1, #2
 8004464:	4618      	mov	r0, r3
 8004466:	f000 f8cd 	bl	8004604 <RCCEx_PLL3_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004470:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800447c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004480:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
}
 800448e:	4618      	mov	r0, r3
 8004490:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004494:	46bd      	mov	sp, r7
 8004496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800449a:	bf00      	nop
 800449c:	58024400 	.word	0x58024400

080044a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044ae:	4b53      	ldr	r3, [pc, #332]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80044b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d101      	bne.n	80044be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e099      	b.n	80045f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044be:	4b4f      	ldr	r3, [pc, #316]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a4e      	ldr	r2, [pc, #312]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80044c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ca:	f7fd f839 	bl	8001540 <HAL_GetTick>
 80044ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044d2:	f7fd f835 	bl	8001540 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e086      	b.n	80045f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044e4:	4b45      	ldr	r3, [pc, #276]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f0      	bne.n	80044d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044f0:	4b42      	ldr	r3, [pc, #264]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	031b      	lsls	r3, r3, #12
 80044fe:	493f      	ldr	r1, [pc, #252]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	628b      	str	r3, [r1, #40]	@ 0x28
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	3b01      	subs	r3, #1
 800450a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	3b01      	subs	r3, #1
 8004514:	025b      	lsls	r3, r3, #9
 8004516:	b29b      	uxth	r3, r3
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	3b01      	subs	r3, #1
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	3b01      	subs	r3, #1
 800452e:	061b      	lsls	r3, r3, #24
 8004530:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004534:	4931      	ldr	r1, [pc, #196]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800453a:	4b30      	ldr	r3, [pc, #192]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	492d      	ldr	r1, [pc, #180]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004548:	4313      	orrs	r3, r2
 800454a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800454c:	4b2b      	ldr	r3, [pc, #172]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 800454e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004550:	f023 0220 	bic.w	r2, r3, #32
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	4928      	ldr	r1, [pc, #160]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800455e:	4b27      	ldr	r3, [pc, #156]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	4a26      	ldr	r2, [pc, #152]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004564:	f023 0310 	bic.w	r3, r3, #16
 8004568:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800456a:	4b24      	ldr	r3, [pc, #144]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 800456c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800456e:	4b24      	ldr	r3, [pc, #144]	@ (8004600 <RCCEx_PLL2_Config+0x160>)
 8004570:	4013      	ands	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	69d2      	ldr	r2, [r2, #28]
 8004576:	00d2      	lsls	r2, r2, #3
 8004578:	4920      	ldr	r1, [pc, #128]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800457e:	4b1f      	ldr	r3, [pc, #124]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004582:	4a1e      	ldr	r2, [pc, #120]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004584:	f043 0310 	orr.w	r3, r3, #16
 8004588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004590:	4b1a      	ldr	r3, [pc, #104]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004594:	4a19      	ldr	r2, [pc, #100]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004596:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800459a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800459c:	e00f      	b.n	80045be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d106      	bne.n	80045b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80045a4:	4b15      	ldr	r3, [pc, #84]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	4a14      	ldr	r2, [pc, #80]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045b0:	e005      	b.n	80045be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80045b2:	4b12      	ldr	r3, [pc, #72]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b6:	4a11      	ldr	r2, [pc, #68]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80045bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80045be:	4b0f      	ldr	r3, [pc, #60]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a0e      	ldr	r2, [pc, #56]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ca:	f7fc ffb9 	bl	8001540 <HAL_GetTick>
 80045ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045d0:	e008      	b.n	80045e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045d2:	f7fc ffb5 	bl	8001540 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e006      	b.n	80045f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	58024400 	.word	0x58024400
 8004600:	ffff0007 	.word	0xffff0007

08004604 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004612:	4b53      	ldr	r3, [pc, #332]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b03      	cmp	r3, #3
 800461c:	d101      	bne.n	8004622 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e099      	b.n	8004756 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004622:	4b4f      	ldr	r3, [pc, #316]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a4e      	ldr	r2, [pc, #312]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800462c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800462e:	f7fc ff87 	bl	8001540 <HAL_GetTick>
 8004632:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004634:	e008      	b.n	8004648 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004636:	f7fc ff83 	bl	8001540 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e086      	b.n	8004756 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004648:	4b45      	ldr	r3, [pc, #276]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004654:	4b42      	ldr	r3, [pc, #264]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	051b      	lsls	r3, r3, #20
 8004662:	493f      	ldr	r1, [pc, #252]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004664:	4313      	orrs	r3, r2
 8004666:	628b      	str	r3, [r1, #40]	@ 0x28
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	3b01      	subs	r3, #1
 800466e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	3b01      	subs	r3, #1
 8004678:	025b      	lsls	r3, r3, #9
 800467a:	b29b      	uxth	r3, r3
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	3b01      	subs	r3, #1
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	3b01      	subs	r3, #1
 8004692:	061b      	lsls	r3, r3, #24
 8004694:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004698:	4931      	ldr	r1, [pc, #196]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 800469a:	4313      	orrs	r3, r2
 800469c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800469e:	4b30      	ldr	r3, [pc, #192]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	492d      	ldr	r1, [pc, #180]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	4928      	ldr	r1, [pc, #160]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046c2:	4b27      	ldr	r3, [pc, #156]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c6:	4a26      	ldr	r2, [pc, #152]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046ce:	4b24      	ldr	r3, [pc, #144]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046d2:	4b24      	ldr	r3, [pc, #144]	@ (8004764 <RCCEx_PLL3_Config+0x160>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	69d2      	ldr	r2, [r2, #28]
 80046da:	00d2      	lsls	r2, r2, #3
 80046dc:	4920      	ldr	r1, [pc, #128]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f8:	4a19      	ldr	r2, [pc, #100]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004700:	e00f      	b.n	8004722 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004708:	4b15      	ldr	r3, [pc, #84]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	4a14      	ldr	r2, [pc, #80]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 800470e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004712:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004714:	e005      	b.n	8004722 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004716:	4b12      	ldr	r3, [pc, #72]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471a:	4a11      	ldr	r2, [pc, #68]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 800471c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004720:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004722:	4b0f      	ldr	r3, [pc, #60]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a0e      	ldr	r2, [pc, #56]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800472c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472e:	f7fc ff07 	bl	8001540 <HAL_GetTick>
 8004732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004734:	e008      	b.n	8004748 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004736:	f7fc ff03 	bl	8001540 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e006      	b.n	8004756 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <RCCEx_PLL3_Config+0x15c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
 8004764:	ffff0007 	.word	0xffff0007

08004768 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e10f      	b.n	800499a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a87      	ldr	r2, [pc, #540]	@ (80049a4 <HAL_SPI_Init+0x23c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00f      	beq.n	80047aa <HAL_SPI_Init+0x42>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a86      	ldr	r2, [pc, #536]	@ (80049a8 <HAL_SPI_Init+0x240>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00a      	beq.n	80047aa <HAL_SPI_Init+0x42>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a84      	ldr	r2, [pc, #528]	@ (80049ac <HAL_SPI_Init+0x244>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d005      	beq.n	80047aa <HAL_SPI_Init+0x42>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b0f      	cmp	r3, #15
 80047a4:	d901      	bls.n	80047aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0f7      	b.n	800499a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f900 	bl	80049b0 <SPI_GetPacketSize>
 80047b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7b      	ldr	r2, [pc, #492]	@ (80049a4 <HAL_SPI_Init+0x23c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00c      	beq.n	80047d6 <HAL_SPI_Init+0x6e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a79      	ldr	r2, [pc, #484]	@ (80049a8 <HAL_SPI_Init+0x240>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <HAL_SPI_Init+0x6e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a78      	ldr	r2, [pc, #480]	@ (80049ac <HAL_SPI_Init+0x244>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d002      	beq.n	80047d6 <HAL_SPI_Init+0x6e>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d811      	bhi.n	80047fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80047da:	4a72      	ldr	r2, [pc, #456]	@ (80049a4 <HAL_SPI_Init+0x23c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d009      	beq.n	80047f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a70      	ldr	r2, [pc, #448]	@ (80049a8 <HAL_SPI_Init+0x240>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <HAL_SPI_Init+0x8c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a6f      	ldr	r2, [pc, #444]	@ (80049ac <HAL_SPI_Init+0x244>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d104      	bne.n	80047fe <HAL_SPI_Init+0x96>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d901      	bls.n	80047fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e0cd      	b.n	800499a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc fb30 	bl	8000e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800483a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004844:	d119      	bne.n	800487a <HAL_SPI_Init+0x112>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800484e:	d103      	bne.n	8004858 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10c      	bne.n	800487a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004868:	d107      	bne.n	800487a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004878:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00f      	beq.n	80048a6 <HAL_SPI_Init+0x13e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b06      	cmp	r3, #6
 800488c:	d90b      	bls.n	80048a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e007      	b.n	80048b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048be:	431a      	orrs	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c8:	ea42 0103 	orr.w	r1, r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004916:	ea42 0103 	orr.w	r1, r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d113      	bne.n	8004956 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004940:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004954:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40013000 	.word	0x40013000
 80049a8:	40003800 	.word	0x40003800
 80049ac:	40003c00 	.word	0x40003c00

080049b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	3301      	adds	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	3301      	adds	r3, #1
 80049c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3307      	adds	r3, #7
 80049ce:	08db      	lsrs	r3, r3, #3
 80049d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e049      	b.n	8004a8c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fc fb9f 	bl	8001150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	4610      	mov	r0, r2
 8004a26:	f000 f949 	bl	8004cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e0ff      	b.n	8004cb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b14      	cmp	r3, #20
 8004abe:	f200 80f0 	bhi.w	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004b1d 	.word	0x08004b1d
 8004acc:	08004ca3 	.word	0x08004ca3
 8004ad0:	08004ca3 	.word	0x08004ca3
 8004ad4:	08004ca3 	.word	0x08004ca3
 8004ad8:	08004b5d 	.word	0x08004b5d
 8004adc:	08004ca3 	.word	0x08004ca3
 8004ae0:	08004ca3 	.word	0x08004ca3
 8004ae4:	08004ca3 	.word	0x08004ca3
 8004ae8:	08004b9f 	.word	0x08004b9f
 8004aec:	08004ca3 	.word	0x08004ca3
 8004af0:	08004ca3 	.word	0x08004ca3
 8004af4:	08004ca3 	.word	0x08004ca3
 8004af8:	08004bdf 	.word	0x08004bdf
 8004afc:	08004ca3 	.word	0x08004ca3
 8004b00:	08004ca3 	.word	0x08004ca3
 8004b04:	08004ca3 	.word	0x08004ca3
 8004b08:	08004c21 	.word	0x08004c21
 8004b0c:	08004ca3 	.word	0x08004ca3
 8004b10:	08004ca3 	.word	0x08004ca3
 8004b14:	08004ca3 	.word	0x08004ca3
 8004b18:	08004c61 	.word	0x08004c61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f97c 	bl	8004e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0204 	bic.w	r2, r2, #4
 8004b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	619a      	str	r2, [r3, #24]
      break;
 8004b5a:	e0a5      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f9ec 	bl	8004f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6999      	ldr	r1, [r3, #24]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	021a      	lsls	r2, r3, #8
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	619a      	str	r2, [r3, #24]
      break;
 8004b9c:	e084      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fa55 	bl	8005054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0208 	orr.w	r2, r2, #8
 8004bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0204 	bic.w	r2, r2, #4
 8004bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	61da      	str	r2, [r3, #28]
      break;
 8004bdc:	e064      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fabd 	bl	8005164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	021a      	lsls	r2, r3, #8
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	61da      	str	r2, [r3, #28]
      break;
 8004c1e:	e043      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fb06 	bl	8005238 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0208 	orr.w	r2, r2, #8
 8004c3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0204 	bic.w	r2, r2, #4
 8004c4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c5e:	e023      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fb4a 	bl	8005300 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	021a      	lsls	r2, r3, #8
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ca0:	e002      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop

08004cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a4a      	ldr	r2, [pc, #296]	@ (8004df8 <TIM_Base_SetConfig+0x13c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cda:	d00f      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a47      	ldr	r2, [pc, #284]	@ (8004dfc <TIM_Base_SetConfig+0x140>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00b      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a46      	ldr	r2, [pc, #280]	@ (8004e00 <TIM_Base_SetConfig+0x144>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d007      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a45      	ldr	r2, [pc, #276]	@ (8004e04 <TIM_Base_SetConfig+0x148>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a44      	ldr	r2, [pc, #272]	@ (8004e08 <TIM_Base_SetConfig+0x14c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d108      	bne.n	8004d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a39      	ldr	r2, [pc, #228]	@ (8004df8 <TIM_Base_SetConfig+0x13c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d027      	beq.n	8004d66 <TIM_Base_SetConfig+0xaa>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1c:	d023      	beq.n	8004d66 <TIM_Base_SetConfig+0xaa>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a36      	ldr	r2, [pc, #216]	@ (8004dfc <TIM_Base_SetConfig+0x140>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01f      	beq.n	8004d66 <TIM_Base_SetConfig+0xaa>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a35      	ldr	r2, [pc, #212]	@ (8004e00 <TIM_Base_SetConfig+0x144>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d01b      	beq.n	8004d66 <TIM_Base_SetConfig+0xaa>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a34      	ldr	r2, [pc, #208]	@ (8004e04 <TIM_Base_SetConfig+0x148>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d017      	beq.n	8004d66 <TIM_Base_SetConfig+0xaa>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a33      	ldr	r2, [pc, #204]	@ (8004e08 <TIM_Base_SetConfig+0x14c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <TIM_Base_SetConfig+0xaa>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a32      	ldr	r2, [pc, #200]	@ (8004e0c <TIM_Base_SetConfig+0x150>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00f      	beq.n	8004d66 <TIM_Base_SetConfig+0xaa>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a31      	ldr	r2, [pc, #196]	@ (8004e10 <TIM_Base_SetConfig+0x154>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <TIM_Base_SetConfig+0xaa>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a30      	ldr	r2, [pc, #192]	@ (8004e14 <TIM_Base_SetConfig+0x158>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d007      	beq.n	8004d66 <TIM_Base_SetConfig+0xaa>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2f      	ldr	r2, [pc, #188]	@ (8004e18 <TIM_Base_SetConfig+0x15c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_Base_SetConfig+0xaa>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2e      	ldr	r2, [pc, #184]	@ (8004e1c <TIM_Base_SetConfig+0x160>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d108      	bne.n	8004d78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a16      	ldr	r2, [pc, #88]	@ (8004df8 <TIM_Base_SetConfig+0x13c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00f      	beq.n	8004dc4 <TIM_Base_SetConfig+0x108>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a18      	ldr	r2, [pc, #96]	@ (8004e08 <TIM_Base_SetConfig+0x14c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <TIM_Base_SetConfig+0x108>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a17      	ldr	r2, [pc, #92]	@ (8004e0c <TIM_Base_SetConfig+0x150>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <TIM_Base_SetConfig+0x108>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a16      	ldr	r2, [pc, #88]	@ (8004e10 <TIM_Base_SetConfig+0x154>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_Base_SetConfig+0x108>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a15      	ldr	r2, [pc, #84]	@ (8004e14 <TIM_Base_SetConfig+0x158>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d103      	bne.n	8004dcc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d105      	bne.n	8004dea <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f023 0201 	bic.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	611a      	str	r2, [r3, #16]
  }
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	40010400 	.word	0x40010400
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40014400 	.word	0x40014400
 8004e14:	40014800 	.word	0x40014800
 8004e18:	4000e000 	.word	0x4000e000
 8004e1c:	4000e400 	.word	0x4000e400

08004e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f023 0201 	bic.w	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4b37      	ldr	r3, [pc, #220]	@ (8004f28 <TIM_OC1_SetConfig+0x108>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 0302 	bic.w	r3, r3, #2
 8004e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a2d      	ldr	r2, [pc, #180]	@ (8004f2c <TIM_OC1_SetConfig+0x10c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00f      	beq.n	8004e9c <TIM_OC1_SetConfig+0x7c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004f30 <TIM_OC1_SetConfig+0x110>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <TIM_OC1_SetConfig+0x7c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a2b      	ldr	r2, [pc, #172]	@ (8004f34 <TIM_OC1_SetConfig+0x114>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d007      	beq.n	8004e9c <TIM_OC1_SetConfig+0x7c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004f38 <TIM_OC1_SetConfig+0x118>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_OC1_SetConfig+0x7c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a29      	ldr	r2, [pc, #164]	@ (8004f3c <TIM_OC1_SetConfig+0x11c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d10c      	bne.n	8004eb6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 0308 	bic.w	r3, r3, #8
 8004ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f023 0304 	bic.w	r3, r3, #4
 8004eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8004f2c <TIM_OC1_SetConfig+0x10c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00f      	beq.n	8004ede <TIM_OC1_SetConfig+0xbe>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f30 <TIM_OC1_SetConfig+0x110>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <TIM_OC1_SetConfig+0xbe>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f34 <TIM_OC1_SetConfig+0x114>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <TIM_OC1_SetConfig+0xbe>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a19      	ldr	r2, [pc, #100]	@ (8004f38 <TIM_OC1_SetConfig+0x118>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_OC1_SetConfig+0xbe>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a18      	ldr	r2, [pc, #96]	@ (8004f3c <TIM_OC1_SetConfig+0x11c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d111      	bne.n	8004f02 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	621a      	str	r2, [r3, #32]
}
 8004f1c:	bf00      	nop
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	fffeff8f 	.word	0xfffeff8f
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40010400 	.word	0x40010400
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800

08004f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f023 0210 	bic.w	r2, r3, #16
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4b34      	ldr	r3, [pc, #208]	@ (800503c <TIM_OC2_SetConfig+0xfc>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f023 0320 	bic.w	r3, r3, #32
 8004f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a29      	ldr	r2, [pc, #164]	@ (8005040 <TIM_OC2_SetConfig+0x100>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_OC2_SetConfig+0x68>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a28      	ldr	r2, [pc, #160]	@ (8005044 <TIM_OC2_SetConfig+0x104>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d10d      	bne.n	8004fc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8005040 <TIM_OC2_SetConfig+0x100>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00f      	beq.n	8004fec <TIM_OC2_SetConfig+0xac>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a1d      	ldr	r2, [pc, #116]	@ (8005044 <TIM_OC2_SetConfig+0x104>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00b      	beq.n	8004fec <TIM_OC2_SetConfig+0xac>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8005048 <TIM_OC2_SetConfig+0x108>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d007      	beq.n	8004fec <TIM_OC2_SetConfig+0xac>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a1b      	ldr	r2, [pc, #108]	@ (800504c <TIM_OC2_SetConfig+0x10c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_OC2_SetConfig+0xac>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8005050 <TIM_OC2_SetConfig+0x110>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d113      	bne.n	8005014 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	feff8fff 	.word	0xfeff8fff
 8005040:	40010000 	.word	0x40010000
 8005044:	40010400 	.word	0x40010400
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800

08005054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4b33      	ldr	r3, [pc, #204]	@ (800514c <TIM_OC3_SetConfig+0xf8>)
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800509c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a28      	ldr	r2, [pc, #160]	@ (8005150 <TIM_OC3_SetConfig+0xfc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_OC3_SetConfig+0x66>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a27      	ldr	r2, [pc, #156]	@ (8005154 <TIM_OC3_SetConfig+0x100>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d10d      	bne.n	80050d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005150 <TIM_OC3_SetConfig+0xfc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00f      	beq.n	80050fe <TIM_OC3_SetConfig+0xaa>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005154 <TIM_OC3_SetConfig+0x100>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00b      	beq.n	80050fe <TIM_OC3_SetConfig+0xaa>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005158 <TIM_OC3_SetConfig+0x104>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d007      	beq.n	80050fe <TIM_OC3_SetConfig+0xaa>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1a      	ldr	r2, [pc, #104]	@ (800515c <TIM_OC3_SetConfig+0x108>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d003      	beq.n	80050fe <TIM_OC3_SetConfig+0xaa>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a19      	ldr	r2, [pc, #100]	@ (8005160 <TIM_OC3_SetConfig+0x10c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d113      	bne.n	8005126 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800510c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	621a      	str	r2, [r3, #32]
}
 8005140:	bf00      	nop
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	fffeff8f 	.word	0xfffeff8f
 8005150:	40010000 	.word	0x40010000
 8005154:	40010400 	.word	0x40010400
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400
 8005160:	40014800 	.word	0x40014800

08005164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4b24      	ldr	r3, [pc, #144]	@ (8005220 <TIM_OC4_SetConfig+0xbc>)
 8005190:	4013      	ands	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800519a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	031b      	lsls	r3, r3, #12
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a19      	ldr	r2, [pc, #100]	@ (8005224 <TIM_OC4_SetConfig+0xc0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00f      	beq.n	80051e4 <TIM_OC4_SetConfig+0x80>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a18      	ldr	r2, [pc, #96]	@ (8005228 <TIM_OC4_SetConfig+0xc4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <TIM_OC4_SetConfig+0x80>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a17      	ldr	r2, [pc, #92]	@ (800522c <TIM_OC4_SetConfig+0xc8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_OC4_SetConfig+0x80>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a16      	ldr	r2, [pc, #88]	@ (8005230 <TIM_OC4_SetConfig+0xcc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_OC4_SetConfig+0x80>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a15      	ldr	r2, [pc, #84]	@ (8005234 <TIM_OC4_SetConfig+0xd0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d109      	bne.n	80051f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	019b      	lsls	r3, r3, #6
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	feff8fff 	.word	0xfeff8fff
 8005224:	40010000 	.word	0x40010000
 8005228:	40010400 	.word	0x40010400
 800522c:	40014000 	.word	0x40014000
 8005230:	40014400 	.word	0x40014400
 8005234:	40014800 	.word	0x40014800

08005238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4b21      	ldr	r3, [pc, #132]	@ (80052e8 <TIM_OC5_SetConfig+0xb0>)
 8005264:	4013      	ands	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005278:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a18      	ldr	r2, [pc, #96]	@ (80052ec <TIM_OC5_SetConfig+0xb4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00f      	beq.n	80052ae <TIM_OC5_SetConfig+0x76>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a17      	ldr	r2, [pc, #92]	@ (80052f0 <TIM_OC5_SetConfig+0xb8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00b      	beq.n	80052ae <TIM_OC5_SetConfig+0x76>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a16      	ldr	r2, [pc, #88]	@ (80052f4 <TIM_OC5_SetConfig+0xbc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <TIM_OC5_SetConfig+0x76>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a15      	ldr	r2, [pc, #84]	@ (80052f8 <TIM_OC5_SetConfig+0xc0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_OC5_SetConfig+0x76>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a14      	ldr	r2, [pc, #80]	@ (80052fc <TIM_OC5_SetConfig+0xc4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d109      	bne.n	80052c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	621a      	str	r2, [r3, #32]
}
 80052dc:	bf00      	nop
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	fffeff8f 	.word	0xfffeff8f
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40010400 	.word	0x40010400
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800

08005300 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4b22      	ldr	r3, [pc, #136]	@ (80053b4 <TIM_OC6_SetConfig+0xb4>)
 800532c:	4013      	ands	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	051b      	lsls	r3, r3, #20
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a19      	ldr	r2, [pc, #100]	@ (80053b8 <TIM_OC6_SetConfig+0xb8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00f      	beq.n	8005378 <TIM_OC6_SetConfig+0x78>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a18      	ldr	r2, [pc, #96]	@ (80053bc <TIM_OC6_SetConfig+0xbc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00b      	beq.n	8005378 <TIM_OC6_SetConfig+0x78>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a17      	ldr	r2, [pc, #92]	@ (80053c0 <TIM_OC6_SetConfig+0xc0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <TIM_OC6_SetConfig+0x78>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a16      	ldr	r2, [pc, #88]	@ (80053c4 <TIM_OC6_SetConfig+0xc4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_OC6_SetConfig+0x78>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a15      	ldr	r2, [pc, #84]	@ (80053c8 <TIM_OC6_SetConfig+0xc8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d109      	bne.n	800538c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800537e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	029b      	lsls	r3, r3, #10
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	feff8fff 	.word	0xfeff8fff
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40010400 	.word	0x40010400
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800

080053cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e077      	b.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a35      	ldr	r2, [pc, #212]	@ (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a34      	ldr	r2, [pc, #208]	@ (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d108      	bne.n	800542a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800541e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005430:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a25      	ldr	r2, [pc, #148]	@ (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d02c      	beq.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005456:	d027      	beq.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a22      	ldr	r2, [pc, #136]	@ (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d022      	beq.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a21      	ldr	r2, [pc, #132]	@ (80054ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d01d      	beq.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1f      	ldr	r2, [pc, #124]	@ (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d018      	beq.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1a      	ldr	r2, [pc, #104]	@ (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d013      	beq.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1b      	ldr	r2, [pc, #108]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00e      	beq.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1a      	ldr	r2, [pc, #104]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d009      	beq.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a18      	ldr	r2, [pc, #96]	@ (80054fc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d004      	beq.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a17      	ldr	r2, [pc, #92]	@ (8005500 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d10c      	bne.n	80054c2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40010400 	.word	0x40010400
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	40001800 	.word	0x40001800
 80054f8:	40014000 	.word	0x40014000
 80054fc:	4000e000 	.word	0x4000e000
 8005500:	4000e400 	.word	0x4000e400

08005504 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800551c:	2302      	movs	r3, #2
 800551e:	e073      	b.n	8005608 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a19      	ldr	r2, [pc, #100]	@ (8005614 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a18      	ldr	r2, [pc, #96]	@ (8005618 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d11c      	bne.n	80055f6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c6:	051b      	lsls	r3, r3, #20
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40010000 	.word	0x40010000
 8005618:	40010400 	.word	0x40010400

0800561c <memset>:
 800561c:	4402      	add	r2, r0
 800561e:	4603      	mov	r3, r0
 8005620:	4293      	cmp	r3, r2
 8005622:	d100      	bne.n	8005626 <memset+0xa>
 8005624:	4770      	bx	lr
 8005626:	f803 1b01 	strb.w	r1, [r3], #1
 800562a:	e7f9      	b.n	8005620 <memset+0x4>

0800562c <__libc_init_array>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	4d0d      	ldr	r5, [pc, #52]	@ (8005664 <__libc_init_array+0x38>)
 8005630:	4c0d      	ldr	r4, [pc, #52]	@ (8005668 <__libc_init_array+0x3c>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	2600      	movs	r6, #0
 8005638:	42a6      	cmp	r6, r4
 800563a:	d109      	bne.n	8005650 <__libc_init_array+0x24>
 800563c:	4d0b      	ldr	r5, [pc, #44]	@ (800566c <__libc_init_array+0x40>)
 800563e:	4c0c      	ldr	r4, [pc, #48]	@ (8005670 <__libc_init_array+0x44>)
 8005640:	f000 f826 	bl	8005690 <_init>
 8005644:	1b64      	subs	r4, r4, r5
 8005646:	10a4      	asrs	r4, r4, #2
 8005648:	2600      	movs	r6, #0
 800564a:	42a6      	cmp	r6, r4
 800564c:	d105      	bne.n	800565a <__libc_init_array+0x2e>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f855 3b04 	ldr.w	r3, [r5], #4
 8005654:	4798      	blx	r3
 8005656:	3601      	adds	r6, #1
 8005658:	e7ee      	b.n	8005638 <__libc_init_array+0xc>
 800565a:	f855 3b04 	ldr.w	r3, [r5], #4
 800565e:	4798      	blx	r3
 8005660:	3601      	adds	r6, #1
 8005662:	e7f2      	b.n	800564a <__libc_init_array+0x1e>
 8005664:	08005704 	.word	0x08005704
 8005668:	08005704 	.word	0x08005704
 800566c:	08005704 	.word	0x08005704
 8005670:	08005708 	.word	0x08005708

08005674 <memcpy>:
 8005674:	440a      	add	r2, r1
 8005676:	4291      	cmp	r1, r2
 8005678:	f100 33ff 	add.w	r3, r0, #4294967295
 800567c:	d100      	bne.n	8005680 <memcpy+0xc>
 800567e:	4770      	bx	lr
 8005680:	b510      	push	{r4, lr}
 8005682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800568a:	4291      	cmp	r1, r2
 800568c:	d1f9      	bne.n	8005682 <memcpy+0xe>
 800568e:	bd10      	pop	{r4, pc}

08005690 <_init>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	bf00      	nop
 8005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005696:	bc08      	pop	{r3}
 8005698:	469e      	mov	lr, r3
 800569a:	4770      	bx	lr

0800569c <_fini>:
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569e:	bf00      	nop
 80056a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a2:	bc08      	pop	{r3}
 80056a4:	469e      	mov	lr, r3
 80056a6:	4770      	bx	lr
