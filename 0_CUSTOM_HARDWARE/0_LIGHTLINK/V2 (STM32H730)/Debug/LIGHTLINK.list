
LIGHTLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005374  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005640  08005640  00006640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800569c  0800569c  0000669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080056a0  080056a0  000066a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  080056a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000378  24000010  080056b4  00007010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000388  080056b4  00007388  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012ffe  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000020e5  00000000  00000000  0001a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011f0  00000000  00000000  0001c128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000df0  00000000  00000000  0001d318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033fa8  00000000  00000000  0001e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001468f  00000000  00000000  000520b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00156861  00000000  00000000  0006673f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001bcfa0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e24  00000000  00000000  001bcfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006d  00000000  00000000  001c1e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005628 	.word	0x08005628

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08005628 	.word	0x08005628

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000310:	f000 fcca 	bl	8000ca8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f001 f85a 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f862 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 fba6 	bl	8000a6c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000320:	f000 f8d0 	bl	80004c4 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000324:	f000 f932 	bl	800058c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000328:	f000 f986 	bl	8000638 <MX_SPI2_Init>
  MX_SPI3_Init();
 800032c:	f000 f9da 	bl	80006e4 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000330:	f000 fa2e 	bl	8000790 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000334:	f000 fa82 	bl	800083c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000338:	f000 fb1c 	bl	8000974 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //TURN ON GREEN LED ONCE USER CODE BEGINS
  HAL_GPIO_WritePin (GPIOC, G_LED_Pin, GPIO_PIN_SET);
 800033c:	2201      	movs	r2, #1
 800033e:	2102      	movs	r1, #2
 8000340:	4823      	ldr	r0, [pc, #140]	@ (80003d0 <main+0xc4>)
 8000342:	f001 ff61 	bl	8002208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOC, nBUZZ_Pin, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800034c:	4820      	ldr	r0, [pc, #128]	@ (80003d0 <main+0xc4>)
 800034e:	f001 ff5b 	bl	8002208 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (GPIOC, M1_TRIG_Pin);
 8000352:	2110      	movs	r1, #16
 8000354:	481e      	ldr	r0, [pc, #120]	@ (80003d0 <main+0xc4>)
 8000356:	f001 ff70 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOB, M2_TRIG_Pin);
 800035a:	2101      	movs	r1, #1
 800035c:	481d      	ldr	r0, [pc, #116]	@ (80003d4 <main+0xc8>)
 800035e:	f001 ff6c 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOB, M3_TRIG_Pin);
 8000362:	2102      	movs	r1, #2
 8000364:	481b      	ldr	r0, [pc, #108]	@ (80003d4 <main+0xc8>)
 8000366:	f001 ff68 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, M4_TRIG_Pin);
 800036a:	2180      	movs	r1, #128	@ 0x80
 800036c:	481a      	ldr	r0, [pc, #104]	@ (80003d8 <main+0xcc>)
 800036e:	f001 ff64 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, M5_TRIG_Pin);
 8000372:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000376:	4818      	ldr	r0, [pc, #96]	@ (80003d8 <main+0xcc>)
 8000378:	f001 ff5f 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, M6_TRIG_Pin);
 800037c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000380:	4815      	ldr	r0, [pc, #84]	@ (80003d8 <main+0xcc>)
 8000382:	f001 ff5a 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, M7_TRIG_Pin);
 8000386:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800038a:	4813      	ldr	r0, [pc, #76]	@ (80003d8 <main+0xcc>)
 800038c:	f001 ff55 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOB, M8_TRIG_Pin);
 8000390:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000394:	480f      	ldr	r0, [pc, #60]	@ (80003d4 <main+0xc8>)
 8000396:	f001 ff50 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOD, M9_TRIG_Pin);
 800039a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800039e:	480f      	ldr	r0, [pc, #60]	@ (80003dc <main+0xd0>)
 80003a0:	f001 ff4b 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOD, M10_TRIG_Pin);
 80003a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003a8:	480c      	ldr	r0, [pc, #48]	@ (80003dc <main+0xd0>)
 80003aa:	f001 ff46 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOD, M11_TRIG_Pin);
 80003ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003b2:	480a      	ldr	r0, [pc, #40]	@ (80003dc <main+0xd0>)
 80003b4:	f001 ff41 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOD, M12_TRIG_Pin);
 80003b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003bc:	4807      	ldr	r0, [pc, #28]	@ (80003dc <main+0xd0>)
 80003be:	f001 ff3c 	bl	800223a <HAL_GPIO_TogglePin>
	  HAL_Delay (500);   /* Insert delay 100 ms */
 80003c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003c6:	f001 f893 	bl	80014f0 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOC, M1_TRIG_Pin);
 80003ca:	bf00      	nop
 80003cc:	e7c1      	b.n	8000352 <main+0x46>
 80003ce:	bf00      	nop
 80003d0:	58020800 	.word	0x58020800
 80003d4:	58020400 	.word	0x58020400
 80003d8:	58021000 	.word	0x58021000
 80003dc:	58020c00 	.word	0x58020c00

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b09c      	sub	sp, #112	@ 0x70
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003ea:	224c      	movs	r2, #76	@ 0x4c
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f005 f8e0 	bl	80055b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2220      	movs	r2, #32
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f005 f8da 	bl	80055b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000400:	2002      	movs	r0, #2
 8000402:	f001 ff35 	bl	8002270 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000406:	2300      	movs	r3, #0
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <SystemClock_Config+0xe0>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000412:	4a2b      	ldr	r2, [pc, #172]	@ (80004c0 <SystemClock_Config+0xe0>)
 8000414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4b29      	ldr	r3, [pc, #164]	@ (80004c0 <SystemClock_Config+0xe0>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000426:	bf00      	nop
 8000428:	4b25      	ldr	r3, [pc, #148]	@ (80004c0 <SystemClock_Config+0xe0>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000434:	d1f8      	bne.n	8000428 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000436:	2303      	movs	r3, #3
 8000438:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800043a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800043e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000440:	2301      	movs	r3, #1
 8000442:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000444:	2340      	movs	r3, #64	@ 0x40
 8000446:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000448:	2302      	movs	r3, #2
 800044a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800044c:	2302      	movs	r3, #2
 800044e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 48;
 8000450:	2330      	movs	r3, #48	@ 0x30
 8000452:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 150;
 8000454:	2396      	movs	r3, #150	@ 0x96
 8000456:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000458:	2302      	movs	r3, #2
 800045a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 100;
 800045c:	2364      	movs	r3, #100	@ 0x64
 800045e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000460:	2302      	movs	r3, #2
 8000462:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000464:	2300      	movs	r3, #0
 8000466:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000468:	2302      	movs	r3, #2
 800046a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000474:	4618      	mov	r0, r3
 8000476:	f001 ff35 	bl	80022e4 <HAL_RCC_OscConfig>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000480:	f000 fc3e 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000484:	233f      	movs	r3, #63	@ 0x3f
 8000486:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2101      	movs	r1, #1
 80004a8:	4618      	mov	r0, r3
 80004aa:	f002 faf5 	bl	8002a98 <HAL_RCC_ClockConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80004b4:	f000 fc24 	bl	8000d00 <Error_Handler>
  }
}
 80004b8:	bf00      	nop
 80004ba:	3770      	adds	r7, #112	@ 0x70
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	58024800 	.word	0x58024800

080004c4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 80004ca:	4a2f      	ldr	r2, [pc, #188]	@ (8000588 <MX_FDCAN1_Init+0xc4>)
 80004cc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80004da:	4b2a      	ldr	r3, [pc, #168]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 80004dc:	2200      	movs	r2, #0
 80004de:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80004e0:	4b28      	ldr	r3, [pc, #160]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80004e6:	4b27      	ldr	r3, [pc, #156]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80004ec:	4b25      	ldr	r3, [pc, #148]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 80004ee:	2210      	movs	r2, #16
 80004f0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80004f2:	4b24      	ldr	r3, [pc, #144]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80004f8:	4b22      	ldr	r3, [pc, #136]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 80004fa:	2202      	movs	r2, #2
 80004fc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80004fe:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000500:	2202      	movs	r2, #2
 8000502:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000504:	4b1f      	ldr	r3, [pc, #124]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000506:	2201      	movs	r2, #1
 8000508:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800050a:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 800050c:	2201      	movs	r2, #1
 800050e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000510:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000512:	2201      	movs	r2, #1
 8000514:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000516:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000518:	2201      	movs	r2, #1
 800051a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800051c:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 800051e:	2200      	movs	r2, #0
 8000520:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000522:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000524:	2200      	movs	r2, #0
 8000526:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000528:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 800052a:	2200      	movs	r2, #0
 800052c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000530:	2200      	movs	r2, #0
 8000532:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000534:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000536:	2204      	movs	r2, #4
 8000538:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800053a:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 800053c:	2200      	movs	r2, #0
 800053e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000540:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000542:	2204      	movs	r2, #4
 8000544:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000548:	2200      	movs	r2, #0
 800054a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800054c:	4b0d      	ldr	r3, [pc, #52]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 800054e:	2204      	movs	r2, #4
 8000550:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000554:	2200      	movs	r2, #0
 8000556:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000558:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 800055a:	2200      	movs	r2, #0
 800055c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800055e:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000560:	2200      	movs	r2, #0
 8000562:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000564:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000566:	2200      	movs	r2, #0
 8000568:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800056a:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 800056c:	2204      	movs	r2, #4
 800056e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000570:	4804      	ldr	r0, [pc, #16]	@ (8000584 <MX_FDCAN1_Init+0xc0>)
 8000572:	f001 f93d 	bl	80017f0 <HAL_FDCAN_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800057c:	f000 fbc0 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2400002c 	.word	0x2400002c
 8000588:	4000a000 	.word	0x4000a000

0800058c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000590:	4b27      	ldr	r3, [pc, #156]	@ (8000630 <MX_SPI1_Init+0xa4>)
 8000592:	4a28      	ldr	r2, [pc, #160]	@ (8000634 <MX_SPI1_Init+0xa8>)
 8000594:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000596:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <MX_SPI1_Init+0xa4>)
 8000598:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800059c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800059e:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005a4:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005a6:	2203      	movs	r2, #3
 80005a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005aa:	4b21      	ldr	r3, [pc, #132]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005b8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80005bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005be:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ca:	4b19      	ldr	r3, [pc, #100]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005d0:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80005d6:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80005e4:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MX_SPI1_Init+0xa4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <MX_SPI1_Init+0xa4>)
 8000604:	2200      	movs	r2, #0
 8000606:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_SPI1_Init+0xa4>)
 800060a:	2200      	movs	r2, #0
 800060c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <MX_SPI1_Init+0xa4>)
 8000610:	2200      	movs	r2, #0
 8000612:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_SPI1_Init+0xa4>)
 8000616:	2200      	movs	r2, #0
 8000618:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_SPI1_Init+0xa4>)
 800061c:	f004 f870 	bl	8004700 <HAL_SPI_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000626:	f000 fb6b 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	240000cc 	.word	0x240000cc
 8000634:	40013000 	.word	0x40013000

08000638 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800063c:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <MX_SPI2_Init+0xa4>)
 800063e:	4a28      	ldr	r2, [pc, #160]	@ (80006e0 <MX_SPI2_Init+0xa8>)
 8000640:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000642:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <MX_SPI2_Init+0xa4>)
 8000644:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000648:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800064a:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <MX_SPI2_Init+0xa4>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <MX_SPI2_Init+0xa4>)
 8000652:	2203      	movs	r2, #3
 8000654:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_SPI2_Init+0xa4>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_SPI2_Init+0xa4>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000662:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <MX_SPI2_Init+0xa4>)
 8000664:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000668:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_SPI2_Init+0xa4>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_SPI2_Init+0xa4>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_SPI2_Init+0xa4>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_SPI2_Init+0xa4>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_SPI2_Init+0xa4>)
 8000684:	2200      	movs	r2, #0
 8000686:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_SPI2_Init+0xa4>)
 800068a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800068e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_SPI2_Init+0xa4>)
 8000692:	2200      	movs	r2, #0
 8000694:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_SPI2_Init+0xa4>)
 8000698:	2200      	movs	r2, #0
 800069a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_SPI2_Init+0xa4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_SPI2_Init+0xa4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_SPI2_Init+0xa4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <MX_SPI2_Init+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_SPI2_Init+0xa4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <MX_SPI2_Init+0xa4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_SPI2_Init+0xa4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_SPI2_Init+0xa4>)
 80006c8:	f004 f81a 	bl	8004700 <HAL_SPI_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80006d2:	f000 fb15 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	24000154 	.word	0x24000154
 80006e0:	40003800 	.word	0x40003800

080006e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006e8:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_SPI3_Init+0xa4>)
 80006ea:	4a28      	ldr	r2, [pc, #160]	@ (800078c <MX_SPI3_Init+0xa8>)
 80006ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006ee:	4b26      	ldr	r3, [pc, #152]	@ (8000788 <MX_SPI3_Init+0xa4>)
 80006f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006f6:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <MX_SPI3_Init+0xa4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <MX_SPI3_Init+0xa4>)
 80006fe:	2203      	movs	r2, #3
 8000700:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000702:	4b21      	ldr	r3, [pc, #132]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000708:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_SPI3_Init+0xa4>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000710:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000714:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000716:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071c:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_SPI3_Init+0xa4>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000722:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000728:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <MX_SPI3_Init+0xa4>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800072e:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000736:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800073a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <MX_SPI3_Init+0xa4>)
 800073e:	2200      	movs	r2, #0
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000744:	2200      	movs	r2, #0
 8000746:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_SPI3_Init+0xa4>)
 800074a:	2200      	movs	r2, #0
 800074c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000750:	2200      	movs	r2, #0
 8000752:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000756:	2200      	movs	r2, #0
 8000758:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_SPI3_Init+0xa4>)
 800075c:	2200      	movs	r2, #0
 800075e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000762:	2200      	movs	r2, #0
 8000764:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000768:	2200      	movs	r2, #0
 800076a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_SPI3_Init+0xa4>)
 800076e:	2200      	movs	r2, #0
 8000770:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_SPI3_Init+0xa4>)
 8000774:	f003 ffc4 	bl	8004700 <HAL_SPI_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800077e:	f000 fabf 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	240001dc 	.word	0x240001dc
 800078c:	40003c00 	.word	0x40003c00

08000790 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000794:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <MX_SPI4_Init+0xa4>)
 8000796:	4a28      	ldr	r2, [pc, #160]	@ (8000838 <MX_SPI4_Init+0xa8>)
 8000798:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800079a:	4b26      	ldr	r3, [pc, #152]	@ (8000834 <MX_SPI4_Init+0xa4>)
 800079c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007a0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80007a2:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80007c0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80007da:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_SPI4_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_SPI4_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_SPI4_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_SPI4_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_SPI4_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_SPI4_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_SPI4_Init+0xa4>)
 8000820:	f003 ff6e 	bl	8004700 <HAL_SPI_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800082a:	f000 fa69 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	24000264 	.word	0x24000264
 8000838:	40013400 	.word	0x40013400

0800083c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b098      	sub	sp, #96	@ 0x60
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000842:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
 800085e:	615a      	str	r2, [r3, #20]
 8000860:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2234      	movs	r2, #52	@ 0x34
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f004 fea3 	bl	80055b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800086e:	4b3f      	ldr	r3, [pc, #252]	@ (800096c <MX_TIM1_Init+0x130>)
 8000870:	4a3f      	ldr	r2, [pc, #252]	@ (8000970 <MX_TIM1_Init+0x134>)
 8000872:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000874:	4b3d      	ldr	r3, [pc, #244]	@ (800096c <MX_TIM1_Init+0x130>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	4b3c      	ldr	r3, [pc, #240]	@ (800096c <MX_TIM1_Init+0x130>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000880:	4b3a      	ldr	r3, [pc, #232]	@ (800096c <MX_TIM1_Init+0x130>)
 8000882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000886:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b38      	ldr	r3, [pc, #224]	@ (800096c <MX_TIM1_Init+0x130>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800088e:	4b37      	ldr	r3, [pc, #220]	@ (800096c <MX_TIM1_Init+0x130>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	4b35      	ldr	r3, [pc, #212]	@ (800096c <MX_TIM1_Init+0x130>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800089a:	4834      	ldr	r0, [pc, #208]	@ (800096c <MX_TIM1_Init+0x130>)
 800089c:	f004 f86f 	bl	800497e <HAL_TIM_PWM_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 fa2b 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008ba:	4619      	mov	r1, r3
 80008bc:	482b      	ldr	r0, [pc, #172]	@ (800096c <MX_TIM1_Init+0x130>)
 80008be:	f004 fd51 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008c8:	f000 fa1a 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008cc:	2360      	movs	r3, #96	@ 0x60
 80008ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d4:	2300      	movs	r3, #0
 80008d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d8:	2300      	movs	r3, #0
 80008da:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	481e      	ldr	r0, [pc, #120]	@ (800096c <MX_TIM1_Init+0x130>)
 80008f2:	f004 f89b 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008fc:	f000 fa00 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000900:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000904:	2204      	movs	r2, #4
 8000906:	4619      	mov	r1, r3
 8000908:	4818      	ldr	r0, [pc, #96]	@ (800096c <MX_TIM1_Init+0x130>)
 800090a:	f004 f88f 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000914:	f000 f9f4 	bl	8000d00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800092c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000930:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800093a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	4619      	mov	r1, r3
 800094c:	4807      	ldr	r0, [pc, #28]	@ (800096c <MX_TIM1_Init+0x130>)
 800094e:	f004 fda5 	bl	800549c <HAL_TIMEx_ConfigBreakDeadTime>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000958:	f000 f9d2 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800095c:	4803      	ldr	r0, [pc, #12]	@ (800096c <MX_TIM1_Init+0x130>)
 800095e:	f000 fbfd 	bl	800115c <HAL_TIM_MspPostInit>

}
 8000962:	bf00      	nop
 8000964:	3760      	adds	r7, #96	@ 0x60
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	240002ec 	.word	0x240002ec
 8000970:	40010000 	.word	0x40010000

08000974 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
 8000994:	615a      	str	r2, [r3, #20]
 8000996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000998:	4b32      	ldr	r3, [pc, #200]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 800099a:	4a33      	ldr	r2, [pc, #204]	@ (8000a68 <MX_TIM3_Init+0xf4>)
 800099c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800099e:	4b31      	ldr	r3, [pc, #196]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 80009ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009be:	4829      	ldr	r0, [pc, #164]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 80009c0:	f003 ffdd 	bl	800497e <HAL_TIM_PWM_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80009ca:	f000 f999 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4821      	ldr	r0, [pc, #132]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 80009de:	f004 fcc1 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80009e8:	f000 f98a 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ec:	2360      	movs	r3, #96	@ 0x60
 80009ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	4818      	ldr	r0, [pc, #96]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 8000a04:	f004 f812 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a0e:	f000 f977 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	2204      	movs	r2, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 8000a1a:	f004 f807 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000a24:	f000 f96c 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480d      	ldr	r0, [pc, #52]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 8000a30:	f003 fffc 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000a3a:	f000 f961 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	220c      	movs	r2, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 8000a46:	f003 fff1 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000a50:	f000 f956 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a54:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <MX_TIM3_Init+0xf0>)
 8000a56:	f000 fb81 	bl	800115c <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	@ 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	24000338 	.word	0x24000338
 8000a68:	40000400 	.word	0x40000400

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	@ 0x30
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b83      	ldr	r3, [pc, #524]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a88:	4a81      	ldr	r2, [pc, #516]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a92:	4b7f      	ldr	r3, [pc, #508]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa0:	4b7b      	ldr	r3, [pc, #492]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	4a7a      	ldr	r2, [pc, #488]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab0:	4b77      	ldr	r3, [pc, #476]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b74      	ldr	r3, [pc, #464]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	4a72      	ldr	r2, [pc, #456]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ace:	4b70      	ldr	r3, [pc, #448]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b6c      	ldr	r3, [pc, #432]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae2:	4a6b      	ldr	r2, [pc, #428]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aec:	4b68      	ldr	r3, [pc, #416]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afa:	4b65      	ldr	r3, [pc, #404]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	4a63      	ldr	r2, [pc, #396]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0a:	4b61      	ldr	r3, [pc, #388]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	f003 0310 	and.w	r3, r3, #16
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b18:	4b5d      	ldr	r3, [pc, #372]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1e:	4a5c      	ldr	r2, [pc, #368]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b28:	4b59      	ldr	r3, [pc, #356]	@ (8000c90 <MX_GPIO_Init+0x224>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_LED_Pin|G_LED_Pin|M1_TRIG_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2113      	movs	r1, #19
 8000b3a:	4856      	ldr	r0, [pc, #344]	@ (8000c94 <MX_GPIO_Init+0x228>)
 8000b3c:	f001 fb64 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_TRIG_Pin|M3_TRIG_Pin|M8_TRIG_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f640 0103 	movw	r1, #2051	@ 0x803
 8000b46:	4854      	ldr	r0, [pc, #336]	@ (8000c98 <MX_GPIO_Init+0x22c>)
 8000b48:	f001 fb5e 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M4_TRIG_Pin|M5_TRIG_Pin|M6_TRIG_Pin|M7_TRIG_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f248 5180 	movw	r1, #34176	@ 0x8580
 8000b52:	4852      	ldr	r0, [pc, #328]	@ (8000c9c <MX_GPIO_Init+0x230>)
 8000b54:	f001 fb58 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M9_TRIG_Pin|M10_TRIG_Pin|M11_TRIG_Pin|M12_TRIG_Pin
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f64e 5110 	movw	r1, #60688	@ 0xed10
 8000b5e:	4850      	ldr	r0, [pc, #320]	@ (8000ca0 <MX_GPIO_Init+0x234>)
 8000b60:	f001 fb52 	bl	8002208 <HAL_GPIO_WritePin>
                          |nBUZZ_Pin|INH_12V_Pin|TCAN1146_nCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIAG_ADC_nCS_GPIO_Port, DIAG_ADC_nCS_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b6a:	484e      	ldr	r0, [pc, #312]	@ (8000ca4 <MX_GPIO_Init+0x238>)
 8000b6c:	f001 fb4c 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|G_LED_Pin;
 8000b70:	2303      	movs	r3, #3
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b74:	2311      	movs	r3, #17
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4843      	ldr	r0, [pc, #268]	@ (8000c94 <MX_GPIO_Init+0x228>)
 8000b88:	f001 f996 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_TRIG_Pin */
  GPIO_InitStruct.Pin = M1_TRIG_Pin;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M1_TRIG_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	483c      	ldr	r0, [pc, #240]	@ (8000c94 <MX_GPIO_Init+0x228>)
 8000ba4:	f001 f988 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M12_STAT_Pin */
  GPIO_InitStruct.Pin = M12_STAT_Pin;
 8000ba8:	2320      	movs	r3, #32
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(M12_STAT_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4836      	ldr	r0, [pc, #216]	@ (8000c94 <MX_GPIO_Init+0x228>)
 8000bbc:	f001 f97c 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_TRIG_Pin M3_TRIG_Pin M8_TRIG_Pin */
  GPIO_InitStruct.Pin = M2_TRIG_Pin|M3_TRIG_Pin|M8_TRIG_Pin;
 8000bc0:	f640 0303 	movw	r3, #2051	@ 0x803
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	482f      	ldr	r0, [pc, #188]	@ (8000c98 <MX_GPIO_Init+0x22c>)
 8000bda:	f001 f96d 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M34_STAT_Pin M78_STAT_Pin */
  GPIO_InitStruct.Pin = M34_STAT_Pin|M78_STAT_Pin;
 8000bde:	f240 4304 	movw	r3, #1028	@ 0x404
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4829      	ldr	r0, [pc, #164]	@ (8000c98 <MX_GPIO_Init+0x22c>)
 8000bf4:	f001 f960 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_TRIG_Pin M5_TRIG_Pin M6_TRIG_Pin M7_TRIG_Pin */
  GPIO_InitStruct.Pin = M4_TRIG_Pin|M5_TRIG_Pin|M6_TRIG_Pin|M7_TRIG_Pin;
 8000bf8:	f248 5380 	movw	r3, #34176	@ 0x8580
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4822      	ldr	r0, [pc, #136]	@ (8000c9c <MX_GPIO_Init+0x230>)
 8000c12:	f001 f951 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M56_STAT_Pin */
  GPIO_InitStruct.Pin = M56_STAT_Pin;
 8000c16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(M56_STAT_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481c      	ldr	r0, [pc, #112]	@ (8000c9c <MX_GPIO_Init+0x230>)
 8000c2c:	f001 f944 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M9_TRIG_Pin M10_TRIG_Pin M11_TRIG_Pin M12_TRIG_Pin
                           nBUZZ_Pin INH_12V_Pin TCAN1146_nCS_Pin */
  GPIO_InitStruct.Pin = M9_TRIG_Pin|M10_TRIG_Pin|M11_TRIG_Pin|M12_TRIG_Pin
 8000c30:	f64e 5310 	movw	r3, #60688	@ 0xed10
 8000c34:	61fb      	str	r3, [r7, #28]
                          |nBUZZ_Pin|INH_12V_Pin|TCAN1146_nCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4815      	ldr	r0, [pc, #84]	@ (8000ca0 <MX_GPIO_Init+0x234>)
 8000c4a:	f001 f935 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M910_STAT_Pin M1112_STAT_Pin */
  GPIO_InitStruct.Pin = M910_STAT_Pin|M1112_STAT_Pin;
 8000c4e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	480f      	ldr	r0, [pc, #60]	@ (8000ca0 <MX_GPIO_Init+0x234>)
 8000c64:	f001 f928 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIAG_ADC_nCS_Pin */
  GPIO_InitStruct.Pin = DIAG_ADC_nCS_Pin;
 8000c68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DIAG_ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <MX_GPIO_Init+0x238>)
 8000c82:	f001 f919 	bl	8001eb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c86:	bf00      	nop
 8000c88:	3730      	adds	r7, #48	@ 0x30
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020800 	.word	0x58020800
 8000c98:	58020400 	.word	0x58020400
 8000c9c:	58021000 	.word	0x58021000
 8000ca0:	58020c00 	.word	0x58020c00
 8000ca4:	58020000 	.word	0x58020000

08000ca8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cba:	f000 fd21 	bl	8001700 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cca:	231f      	movs	r3, #31
 8000ccc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000cce:	2387      	movs	r3, #135	@ 0x87
 8000cd0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cea:	463b      	mov	r3, r7
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fd3f 	bl	8001770 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cf2:	2004      	movs	r0, #4
 8000cf4:	f000 fd1c 	bl	8001730 <HAL_MPU_Enable>

}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <Error_Handler+0x8>

08000d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <HAL_MspInit+0x30>)
 8000d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d18:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_MspInit+0x30>)
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_MspInit+0x30>)
 8000d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	58024400 	.word	0x58024400

08000d40 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0b8      	sub	sp, #224	@ 0xe0
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	22b8      	movs	r2, #184	@ 0xb8
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 fc27 	bl	80055b4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a26      	ldr	r2, [pc, #152]	@ (8000e04 <HAL_FDCAN_MspInit+0xc4>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d145      	bne.n	8000dfc <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000d7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d80:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 f9b6 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000d92:	f7ff ffb5 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_FDCAN_MspInit+0xc8>)
 8000d98:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e08 <HAL_FDCAN_MspInit+0xc8>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <HAL_FDCAN_MspInit+0xc8>)
 8000da8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <HAL_FDCAN_MspInit+0xc8>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <HAL_FDCAN_MspInit+0xc8>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc4:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <HAL_FDCAN_MspInit+0xc8>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000dea:	2309      	movs	r3, #9
 8000dec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <HAL_FDCAN_MspInit+0xcc>)
 8000df8:	f001 f85e 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	37e0      	adds	r7, #224	@ 0xe0
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	4000a000 	.word	0x4000a000
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58020c00 	.word	0x58020c00

08000e10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0be      	sub	sp, #248	@ 0xf8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e2c:	22b8      	movs	r2, #184	@ 0xb8
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 fbbf 	bl	80055b4 <memset>
  if(hspi->Instance==SPI1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4aa2      	ldr	r2, [pc, #648]	@ (80010c4 <HAL_SPI_MspInit+0x2b4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d146      	bne.n	8000ece <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 f94e 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000e62:	f7ff ff4d 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e66:	4b98      	ldr	r3, [pc, #608]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e6c:	4a96      	ldr	r2, [pc, #600]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000e6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e76:	4b94      	ldr	r3, [pc, #592]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b90      	ldr	r3, [pc, #576]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8a:	4a8f      	ldr	r2, [pc, #572]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e94:	4b8c      	ldr	r3, [pc, #560]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ea2:	23f0      	movs	r3, #240	@ 0xf0
 8000ea4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4881      	ldr	r0, [pc, #516]	@ (80010cc <HAL_SPI_MspInit+0x2bc>)
 8000ec8:	f000 fff6 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000ecc:	e0f6      	b.n	80010bc <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI2)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a7f      	ldr	r2, [pc, #508]	@ (80010d0 <HAL_SPI_MspInit+0x2c0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d147      	bne.n	8000f68 <HAL_SPI_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000ed8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000edc:	f04f 0300 	mov.w	r3, #0
 8000ee0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 f902 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_SPI_MspInit+0xee>
      Error_Handler();
 8000efa:	f7ff ff01 	bl	8000d00 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000efe:	4b72      	ldr	r3, [pc, #456]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f04:	4a70      	ldr	r2, [pc, #448]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f0e:	4b6e      	ldr	r3, [pc, #440]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b6a      	ldr	r3, [pc, #424]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	4a69      	ldr	r2, [pc, #420]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2c:	4b66      	ldr	r3, [pc, #408]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f3a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f54:	2305      	movs	r3, #5
 8000f56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f5e:	4619      	mov	r1, r3
 8000f60:	485c      	ldr	r0, [pc, #368]	@ (80010d4 <HAL_SPI_MspInit+0x2c4>)
 8000f62:	f000 ffa9 	bl	8001eb8 <HAL_GPIO_Init>
}
 8000f66:	e0a9      	b.n	80010bc <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a5a      	ldr	r2, [pc, #360]	@ (80010d8 <HAL_SPI_MspInit+0x2c8>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d147      	bne.n	8001002 <HAL_SPI_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000f72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 f8b5 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 8000f94:	f7ff feb4 	bl	8000d00 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f98:	4b4b      	ldr	r3, [pc, #300]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000f9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000fa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fa4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fa8:	4b47      	ldr	r3, [pc, #284]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b44      	ldr	r3, [pc, #272]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	4a42      	ldr	r2, [pc, #264]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc6:	4b40      	ldr	r3, [pc, #256]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fd4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4838      	ldr	r0, [pc, #224]	@ (80010dc <HAL_SPI_MspInit+0x2cc>)
 8000ffc:	f000 ff5c 	bl	8001eb8 <HAL_GPIO_Init>
}
 8001000:	e05c      	b.n	80010bc <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI4)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a36      	ldr	r2, [pc, #216]	@ (80010e0 <HAL_SPI_MspInit+0x2d0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d157      	bne.n	80010bc <HAL_SPI_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800100c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2M = 48;
 8001018:	2330      	movs	r3, #48	@ 0x30
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2N = 150;
 800101c:	2396      	movs	r3, #150	@ 0x96
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001020:	2302      	movs	r3, #2
 8001022:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2Q = 100;
 8001024:	2364      	movs	r3, #100	@ 0x64
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001028:	2302      	movs	r3, #2
 800102a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800102c:	2300      	movs	r3, #0
 800102e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001030:	2320      	movs	r3, #32
 8001032:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8001038:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800103c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001040:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001044:	4618      	mov	r0, r3
 8001046:	f002 f857 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 8001050:	f7ff fe56 	bl	8000d00 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8001056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800105a:	4a1b      	ldr	r2, [pc, #108]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 800105c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001060:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001064:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8001066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800106a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_SPI_MspInit+0x2b8>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001090:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001094:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80010aa:	2305      	movs	r3, #5
 80010ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010b4:	4619      	mov	r1, r3
 80010b6:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <HAL_SPI_MspInit+0x2d4>)
 80010b8:	f000 fefe 	bl	8001eb8 <HAL_GPIO_Init>
}
 80010bc:	bf00      	nop
 80010be:	37f8      	adds	r7, #248	@ 0xf8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40013000 	.word	0x40013000
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020000 	.word	0x58020000
 80010d0:	40003800 	.word	0x40003800
 80010d4:	58020400 	.word	0x58020400
 80010d8:	40003c00 	.word	0x40003c00
 80010dc:	58020800 	.word	0x58020800
 80010e0:	40013400 	.word	0x40013400
 80010e4:	58021000 	.word	0x58021000

080010e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a16      	ldr	r2, [pc, #88]	@ (8001150 <HAL_TIM_PWM_MspInit+0x68>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d10f      	bne.n	800111a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_TIM_PWM_MspInit+0x6c>)
 80010fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <HAL_TIM_PWM_MspInit+0x6c>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_TIM_PWM_MspInit+0x6c>)
 800110c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001118:	e013      	b.n	8001142 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a0e      	ldr	r2, [pc, #56]	@ (8001158 <HAL_TIM_PWM_MspInit+0x70>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d10e      	bne.n	8001142 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <HAL_TIM_PWM_MspInit+0x6c>)
 8001126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <HAL_TIM_PWM_MspInit+0x6c>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <HAL_TIM_PWM_MspInit+0x6c>)
 8001136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40010000 	.word	0x40010000
 8001154:	58024400 	.word	0x58024400
 8001158:	40000400 	.word	0x40000400

0800115c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a26      	ldr	r2, [pc, #152]	@ (8001214 <HAL_TIM_MspPostInit+0xb8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d120      	bne.n	80011c0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <HAL_TIM_MspPostInit+0xbc>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001184:	4a24      	ldr	r2, [pc, #144]	@ (8001218 <HAL_TIM_MspPostInit+0xbc>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800118e:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <HAL_TIM_MspPostInit+0xbc>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ADDR_2_Pin|ADDR_1_Pin;
 800119c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4818      	ldr	r0, [pc, #96]	@ (800121c <HAL_TIM_MspPostInit+0xc0>)
 80011ba:	f000 fe7d 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011be:	e024      	b.n	800120a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a16      	ldr	r2, [pc, #88]	@ (8001220 <HAL_TIM_MspPostInit+0xc4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d11f      	bne.n	800120a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <HAL_TIM_MspPostInit+0xbc>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d0:	4a11      	ldr	r2, [pc, #68]	@ (8001218 <HAL_TIM_MspPostInit+0xbc>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <HAL_TIM_MspPostInit+0xbc>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADDR_6_Pin|ADDR_5_Pin|ADDR_4_Pin|ADDR_3_Pin;
 80011e8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011fa:	2302      	movs	r3, #2
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4807      	ldr	r0, [pc, #28]	@ (8001224 <HAL_TIM_MspPostInit+0xc8>)
 8001206:	f000 fe57 	bl	8001eb8 <HAL_GPIO_Init>
}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	@ 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40010000 	.word	0x40010000
 8001218:	58024400 	.word	0x58024400
 800121c:	58020000 	.word	0x58020000
 8001220:	40000400 	.word	0x40000400
 8001224:	58020800 	.word	0x58020800

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <NMI_Handler+0x4>

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127e:	f000 f917 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800128c:	4b32      	ldr	r3, [pc, #200]	@ (8001358 <SystemInit+0xd0>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001292:	4a31      	ldr	r2, [pc, #196]	@ (8001358 <SystemInit+0xd0>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800129c:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <SystemInit+0xd4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	2b06      	cmp	r3, #6
 80012a6:	d807      	bhi.n	80012b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012a8:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <SystemInit+0xd4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f023 030f 	bic.w	r3, r3, #15
 80012b0:	4a2a      	ldr	r2, [pc, #168]	@ (800135c <SystemInit+0xd4>)
 80012b2:	f043 0307 	orr.w	r3, r3, #7
 80012b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012b8:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <SystemInit+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a28      	ldr	r2, [pc, #160]	@ (8001360 <SystemInit+0xd8>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012c4:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <SystemInit+0xd8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ca:	4b25      	ldr	r3, [pc, #148]	@ (8001360 <SystemInit+0xd8>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4924      	ldr	r1, [pc, #144]	@ (8001360 <SystemInit+0xd8>)
 80012d0:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <SystemInit+0xdc>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012d6:	4b21      	ldr	r3, [pc, #132]	@ (800135c <SystemInit+0xd4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012e2:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <SystemInit+0xd4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 030f 	bic.w	r3, r3, #15
 80012ea:	4a1c      	ldr	r2, [pc, #112]	@ (800135c <SystemInit+0xd4>)
 80012ec:	f043 0307 	orr.w	r3, r3, #7
 80012f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <SystemInit+0xd8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012f8:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <SystemInit+0xd8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012fe:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <SystemInit+0xd8>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001304:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <SystemInit+0xd8>)
 8001306:	4a18      	ldr	r2, [pc, #96]	@ (8001368 <SystemInit+0xe0>)
 8001308:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <SystemInit+0xd8>)
 800130c:	4a17      	ldr	r2, [pc, #92]	@ (800136c <SystemInit+0xe4>)
 800130e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <SystemInit+0xd8>)
 8001312:	4a17      	ldr	r2, [pc, #92]	@ (8001370 <SystemInit+0xe8>)
 8001314:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <SystemInit+0xd8>)
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800131c:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <SystemInit+0xd8>)
 800131e:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <SystemInit+0xe8>)
 8001320:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <SystemInit+0xd8>)
 8001324:	2200      	movs	r2, #0
 8001326:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <SystemInit+0xd8>)
 800132a:	4a11      	ldr	r2, [pc, #68]	@ (8001370 <SystemInit+0xe8>)
 800132c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <SystemInit+0xd8>)
 8001330:	2200      	movs	r2, #0
 8001332:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <SystemInit+0xd8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <SystemInit+0xd8>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800133e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001340:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <SystemInit+0xd8>)
 8001342:	2200      	movs	r2, #0
 8001344:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <SystemInit+0xec>)
 8001348:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800134c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	52002000 	.word	0x52002000
 8001360:	58024400 	.word	0x58024400
 8001364:	eaf6ed7f 	.word	0xeaf6ed7f
 8001368:	02020200 	.word	0x02020200
 800136c:	01ff0000 	.word	0x01ff0000
 8001370:	01010280 	.word	0x01010280
 8001374:	52004000 	.word	0x52004000

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800137c:	f7ff ff84 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	@ (80013b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	@ (80013bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	@ (80013c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a6:	f004 f90d 	bl	80055c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7fe ffaf 	bl	800030c <main>
  bx  lr
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80013b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013b8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80013bc:	080056a4 	.word	0x080056a4
  ldr r2, =_sbss
 80013c0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80013c4:	24000388 	.word	0x24000388

080013c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC3_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f000 f962 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013d8:	f001 fd14 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <HAL_Init+0x68>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	4913      	ldr	r1, [pc, #76]	@ (8001438 <HAL_Init+0x6c>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <HAL_Init+0x68>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <HAL_Init+0x6c>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
 800140c:	4a0b      	ldr	r2, [pc, #44]	@ (800143c <HAL_Init+0x70>)
 800140e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001410:	4a0b      	ldr	r2, [pc, #44]	@ (8001440 <HAL_Init+0x74>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001416:	200f      	movs	r0, #15
 8001418:	f000 f814 	bl	8001444 <HAL_InitTick>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e002      	b.n	800142c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001426:	f7ff fc71 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	58024400 	.word	0x58024400
 8001438:	0800568c 	.word	0x0800568c
 800143c:	24000004 	.word	0x24000004
 8001440:	24000000 	.word	0x24000000

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <HAL_InitTick+0x60>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e021      	b.n	800149c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <HAL_InitTick+0x64>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_InitTick+0x60>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f939 	bl	80016e6 <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f000 f911 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	@ (80014ac <HAL_InitTick+0x68>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2400000c 	.word	0x2400000c
 80014a8:	24000000 	.word	0x24000000
 80014ac:	24000008 	.word	0x24000008

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2400000c 	.word	0x2400000c
 80014d4:	24000384 	.word	0x24000384

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	24000384 	.word	0x24000384

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_Delay+0x44>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2400000c 	.word	0x2400000c

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <__NVIC_SetPriorityGrouping+0x40>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	4313      	orrs	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <__NVIC_SetPriorityGrouping+0x40>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	05fa0000 	.word	0x05fa0000

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	@ (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	@ 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff8e 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff47 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff5e 	bl	8001580 <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff90 	bl	80015f0 <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5f 	bl	800159c <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffb2 	bl	8001658 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001704:	f3bf 8f5f 	dmb	sy
}
 8001708:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800170a:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <HAL_MPU_Disable+0x28>)
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	4a06      	ldr	r2, [pc, #24]	@ (8001728 <HAL_MPU_Disable+0x28>)
 8001710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001714:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001716:	4b05      	ldr	r3, [pc, #20]	@ (800172c <HAL_MPU_Disable+0x2c>)
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00
 800172c:	e000ed90 	.word	0xe000ed90

08001730 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001738:	4a0b      	ldr	r2, [pc, #44]	@ (8001768 <HAL_MPU_Enable+0x38>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001742:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <HAL_MPU_Enable+0x3c>)
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	4a09      	ldr	r2, [pc, #36]	@ (800176c <HAL_MPU_Enable+0x3c>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800174c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800174e:	f3bf 8f4f 	dsb	sy
}
 8001752:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001754:	f3bf 8f6f 	isb	sy
}
 8001758:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed90 	.word	0xe000ed90
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	785a      	ldrb	r2, [r3, #1]
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <HAL_MPU_ConfigRegion+0x7c>)
 800177e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001780:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <HAL_MPU_ConfigRegion+0x7c>)
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	4a19      	ldr	r2, [pc, #100]	@ (80017ec <HAL_MPU_ConfigRegion+0x7c>)
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800178c:	4a17      	ldr	r2, [pc, #92]	@ (80017ec <HAL_MPU_ConfigRegion+0x7c>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7b1b      	ldrb	r3, [r3, #12]
 8001798:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7adb      	ldrb	r3, [r3, #11]
 800179e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7a9b      	ldrb	r3, [r3, #10]
 80017a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7b5b      	ldrb	r3, [r3, #13]
 80017ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7b9b      	ldrb	r3, [r3, #14]
 80017b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7bdb      	ldrb	r3, [r3, #15]
 80017be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7a5b      	ldrb	r3, [r3, #9]
 80017c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7a1b      	ldrb	r3, [r3, #8]
 80017ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017d8:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017dc:	6113      	str	r3, [r2, #16]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed90 	.word	0xe000ed90

080017f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b098      	sub	sp, #96	@ 0x60
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80017f8:	4a84      	ldr	r2, [pc, #528]	@ (8001a0c <HAL_FDCAN_Init+0x21c>)
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	4611      	mov	r1, r2
 8001800:	224c      	movs	r2, #76	@ 0x4c
 8001802:	4618      	mov	r0, r3
 8001804:	f003 ff02 	bl	800560c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e1c6      	b.n	8001ba0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7e      	ldr	r2, [pc, #504]	@ (8001a10 <HAL_FDCAN_Init+0x220>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d106      	bne.n	800182a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001824:	461a      	mov	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fa7e 	bl	8000d40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0210 	bic.w	r2, r2, #16
 8001852:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001854:	f7ff fe40 	bl	80014d8 <HAL_GetTick>
 8001858:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800185a:	e014      	b.n	8001886 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800185c:	f7ff fe3c 	bl	80014d8 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b0a      	cmp	r3, #10
 8001868:	d90d      	bls.n	8001886 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001870:	f043 0201 	orr.w	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2203      	movs	r2, #3
 800187e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e18c      	b.n	8001ba0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b08      	cmp	r3, #8
 8001892:	d0e3      	beq.n	800185c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699a      	ldr	r2, [r3, #24]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a4:	f7ff fe18 	bl	80014d8 <HAL_GetTick>
 80018a8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018aa:	e014      	b.n	80018d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80018ac:	f7ff fe14 	bl	80014d8 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b0a      	cmp	r3, #10
 80018b8:	d90d      	bls.n	80018d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2203      	movs	r2, #3
 80018ce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e164      	b.n	8001ba0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0e3      	beq.n	80018ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0202 	orr.w	r2, r2, #2
 80018f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7c1b      	ldrb	r3, [r3, #16]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d108      	bne.n	800190e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800190a:	619a      	str	r2, [r3, #24]
 800190c:	e007      	b.n	800191e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800191c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7c5b      	ldrb	r3, [r3, #17]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699a      	ldr	r2, [r3, #24]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001934:	619a      	str	r2, [r3, #24]
 8001936:	e007      	b.n	8001948 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001946:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7c9b      	ldrb	r3, [r3, #18]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d108      	bne.n	8001962 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800195e:	619a      	str	r2, [r3, #24]
 8001960:	e007      	b.n	8001972 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001970:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001996:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0210 	bic.w	r2, r2, #16
 80019a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d108      	bne.n	80019c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0204 	orr.w	r2, r2, #4
 80019be:	619a      	str	r2, [r3, #24]
 80019c0:	e030      	b.n	8001a24 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d02c      	beq.n	8001a24 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d020      	beq.n	8001a14 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699a      	ldr	r2, [r3, #24]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0210 	orr.w	r2, r2, #16
 80019f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d114      	bne.n	8001a24 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0220 	orr.w	r2, r2, #32
 8001a08:	619a      	str	r2, [r3, #24]
 8001a0a:	e00b      	b.n	8001a24 <HAL_FDCAN_Init+0x234>
 8001a0c:	08005640 	.word	0x08005640
 8001a10:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699a      	ldr	r2, [r3, #24]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0220 	orr.w	r2, r2, #32
 8001a22:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a34:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a3c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a4c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a4e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001a58:	d115      	bne.n	8001a86 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	3b01      	subs	r3, #1
 8001a66:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a68:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a72:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a82:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a84:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00a      	beq.n	8001aa4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aac:	4413      	add	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d011      	beq.n	8001ad6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001aba:	f023 0107 	bic.w	r1, r3, #7
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	3360      	adds	r3, #96	@ 0x60
 8001ac6:	443b      	add	r3, r7
 8001ac8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d011      	beq.n	8001b02 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001ae6:	f023 0107 	bic.w	r1, r3, #7
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	3360      	adds	r3, #96	@ 0x60
 8001af2:	443b      	add	r3, r7
 8001af4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d012      	beq.n	8001b30 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001b12:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	3360      	adds	r3, #96	@ 0x60
 8001b1e:	443b      	add	r3, r7
 8001b20:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b24:	011a      	lsls	r2, r3, #4
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d012      	beq.n	8001b5e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001b40:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	3360      	adds	r3, #96	@ 0x60
 8001b4c:	443b      	add	r3, r7
 8001b4e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b52:	021a      	lsls	r2, r3, #8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a11      	ldr	r2, [pc, #68]	@ (8001ba8 <HAL_FDCAN_Init+0x3b8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d107      	bne.n	8001b78 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f022 0203 	bic.w	r2, r2, #3
 8001b76:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f80b 	bl	8001bac <FDCAN_CalcultateRamBlockAddresses>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8001b9c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3760      	adds	r7, #96	@ 0x60
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	4000a000 	.word	0x4000a000

08001bac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001bc2:	4ba7      	ldr	r3, [pc, #668]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	0091      	lsls	r1, r2, #2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bdc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be4:	041a      	lsls	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001c02:	4b97      	ldr	r3, [pc, #604]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	0091      	lsls	r1, r2, #2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4413      	add	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001c44:	4b86      	ldr	r3, [pc, #536]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	0091      	lsls	r1, r2, #2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	430b      	orrs	r3, r1
 8001c52:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001c5e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	041a      	lsls	r2, r3, #16
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	4413      	add	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c8c:	4b74      	ldr	r3, [pc, #464]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	0091      	lsls	r1, r2, #2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001ca6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cae:	041a      	lsls	r2, r3, #16
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	4413      	add	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001cd4:	4b62      	ldr	r3, [pc, #392]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	0091      	lsls	r1, r2, #2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001d00:	4b57      	ldr	r3, [pc, #348]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	0091      	lsls	r1, r2, #2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d1a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	4413      	add	r3, r2
 8001d38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d42:	4b47      	ldr	r3, [pc, #284]	@ (8001e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	0091      	lsls	r1, r2, #2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d5c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d78:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d80:	061a      	lsls	r2, r3, #24
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d90:	4b34      	ldr	r3, [pc, #208]	@ (8001e64 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001d92:	4413      	add	r3, r2
 8001d94:	009a      	lsls	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	441a      	add	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	441a      	add	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001dcc:	441a      	add	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001de4:	441a      	add	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001dfc:	441a      	add	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	441a      	add	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	441a      	add	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001e48:	441a      	add	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e56:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d915      	bls.n	8001e88 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001e5c:	e006      	b.n	8001e6c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001e5e:	bf00      	nop
 8001e60:	ffff0003 	.word	0xffff0003
 8001e64:	10002b00 	.word	0x10002b00
 8001e68:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e72:	f043 0220 	orr.w	r2, r3, #32
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2203      	movs	r2, #3
 8001e80:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e010      	b.n	8001eaa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e005      	b.n	8001e9c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3f3      	bcc.n	8001e90 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	@ 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ec6:	4b86      	ldr	r3, [pc, #536]	@ (80020e0 <HAL_GPIO_Init+0x228>)
 8001ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eca:	e18c      	b.n	80021e6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 817e 	beq.w	80021e0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d005      	beq.n	8001efc <HAL_GPIO_Init+0x44>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d130      	bne.n	8001f5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f32:	2201      	movs	r2, #1
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 0201 	and.w	r2, r3, #1
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d017      	beq.n	8001f9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d123      	bne.n	8001fee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	69b9      	ldr	r1, [r7, #24]
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0203 	and.w	r2, r3, #3
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80d8 	beq.w	80021e0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002030:	4b2c      	ldr	r3, [pc, #176]	@ (80020e4 <HAL_GPIO_Init+0x22c>)
 8002032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002036:	4a2b      	ldr	r2, [pc, #172]	@ (80020e4 <HAL_GPIO_Init+0x22c>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002040:	4b28      	ldr	r3, [pc, #160]	@ (80020e4 <HAL_GPIO_Init+0x22c>)
 8002042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204e:	4a26      	ldr	r2, [pc, #152]	@ (80020e8 <HAL_GPIO_Init+0x230>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1d      	ldr	r2, [pc, #116]	@ (80020ec <HAL_GPIO_Init+0x234>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d04a      	beq.n	8002110 <HAL_GPIO_Init+0x258>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1c      	ldr	r2, [pc, #112]	@ (80020f0 <HAL_GPIO_Init+0x238>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <HAL_GPIO_Init+0x222>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1b      	ldr	r2, [pc, #108]	@ (80020f4 <HAL_GPIO_Init+0x23c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d025      	beq.n	80020d6 <HAL_GPIO_Init+0x21e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1a      	ldr	r2, [pc, #104]	@ (80020f8 <HAL_GPIO_Init+0x240>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_GPIO_Init+0x21a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <HAL_GPIO_Init+0x244>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <HAL_GPIO_Init+0x216>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a18      	ldr	r2, [pc, #96]	@ (8002100 <HAL_GPIO_Init+0x248>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x212>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a17      	ldr	r2, [pc, #92]	@ (8002104 <HAL_GPIO_Init+0x24c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x20e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a16      	ldr	r2, [pc, #88]	@ (8002108 <HAL_GPIO_Init+0x250>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x20a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a15      	ldr	r2, [pc, #84]	@ (800210c <HAL_GPIO_Init+0x254>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x206>
 80020ba:	2309      	movs	r3, #9
 80020bc:	e029      	b.n	8002112 <HAL_GPIO_Init+0x25a>
 80020be:	230a      	movs	r3, #10
 80020c0:	e027      	b.n	8002112 <HAL_GPIO_Init+0x25a>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e025      	b.n	8002112 <HAL_GPIO_Init+0x25a>
 80020c6:	2306      	movs	r3, #6
 80020c8:	e023      	b.n	8002112 <HAL_GPIO_Init+0x25a>
 80020ca:	2305      	movs	r3, #5
 80020cc:	e021      	b.n	8002112 <HAL_GPIO_Init+0x25a>
 80020ce:	2304      	movs	r3, #4
 80020d0:	e01f      	b.n	8002112 <HAL_GPIO_Init+0x25a>
 80020d2:	2303      	movs	r3, #3
 80020d4:	e01d      	b.n	8002112 <HAL_GPIO_Init+0x25a>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e01b      	b.n	8002112 <HAL_GPIO_Init+0x25a>
 80020da:	2301      	movs	r3, #1
 80020dc:	e019      	b.n	8002112 <HAL_GPIO_Init+0x25a>
 80020de:	bf00      	nop
 80020e0:	58000080 	.word	0x58000080
 80020e4:	58024400 	.word	0x58024400
 80020e8:	58000400 	.word	0x58000400
 80020ec:	58020000 	.word	0x58020000
 80020f0:	58020400 	.word	0x58020400
 80020f4:	58020800 	.word	0x58020800
 80020f8:	58020c00 	.word	0x58020c00
 80020fc:	58021000 	.word	0x58021000
 8002100:	58021400 	.word	0x58021400
 8002104:	58021800 	.word	0x58021800
 8002108:	58021c00 	.word	0x58021c00
 800210c:	58022400 	.word	0x58022400
 8002110:	2300      	movs	r3, #0
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	f002 0203 	and.w	r2, r2, #3
 8002118:	0092      	lsls	r2, r2, #2
 800211a:	4093      	lsls	r3, r2
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002122:	4938      	ldr	r1, [pc, #224]	@ (8002204 <HAL_GPIO_Init+0x34c>)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002156:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800215e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002184:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	3301      	adds	r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f47f ae6b 	bne.w	8001ecc <HAL_GPIO_Init+0x14>
  }
}
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	3724      	adds	r7, #36	@ 0x24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	58000400 	.word	0x58000400

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002224:	e003      	b.n	800222e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	041a      	lsls	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	619a      	str	r2, [r3, #24]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800224c:	887a      	ldrh	r2, [r7, #2]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	041a      	lsls	r2, r3, #16
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43d9      	mvns	r1, r3
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	400b      	ands	r3, r1
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	619a      	str	r2, [r3, #24]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002278:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <HAL_PWREx_ConfigSupply+0x70>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b04      	cmp	r3, #4
 8002282:	d00a      	beq.n	800229a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002284:	4b16      	ldr	r3, [pc, #88]	@ (80022e0 <HAL_PWREx_ConfigSupply+0x70>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e01f      	b.n	80022d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e01d      	b.n	80022d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800229a:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <HAL_PWREx_ConfigSupply+0x70>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	490f      	ldr	r1, [pc, #60]	@ (80022e0 <HAL_PWREx_ConfigSupply+0x70>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022aa:	f7ff f915 	bl	80014d8 <HAL_GetTick>
 80022ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022b0:	e009      	b.n	80022c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022b2:	f7ff f911 	bl	80014d8 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022c0:	d901      	bls.n	80022c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e007      	b.n	80022d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_PWREx_ConfigSupply+0x70>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022d2:	d1ee      	bne.n	80022b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	58024800 	.word	0x58024800

080022e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	@ 0x30
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e3c8      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8087 	beq.w	8002412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002304:	4b88      	ldr	r3, [pc, #544]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800230c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800230e:	4b86      	ldr	r3, [pc, #536]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002312:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002316:	2b10      	cmp	r3, #16
 8002318:	d007      	beq.n	800232a <HAL_RCC_OscConfig+0x46>
 800231a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231c:	2b18      	cmp	r3, #24
 800231e:	d110      	bne.n	8002342 <HAL_RCC_OscConfig+0x5e>
 8002320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d10b      	bne.n	8002342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232a:	4b7f      	ldr	r3, [pc, #508]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d06c      	beq.n	8002410 <HAL_RCC_OscConfig+0x12c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d168      	bne.n	8002410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e3a2      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x76>
 800234c:	4b76      	ldr	r3, [pc, #472]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a75      	ldr	r2, [pc, #468]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e02e      	b.n	80023b8 <HAL_RCC_OscConfig+0xd4>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x98>
 8002362:	4b71      	ldr	r3, [pc, #452]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a70      	ldr	r2, [pc, #448]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b6e      	ldr	r3, [pc, #440]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6d      	ldr	r2, [pc, #436]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002374:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e01d      	b.n	80023b8 <HAL_RCC_OscConfig+0xd4>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0xbc>
 8002386:	4b68      	ldr	r3, [pc, #416]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a67      	ldr	r2, [pc, #412]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b65      	ldr	r3, [pc, #404]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a64      	ldr	r2, [pc, #400]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0xd4>
 80023a0:	4b61      	ldr	r3, [pc, #388]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a60      	ldr	r2, [pc, #384]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 80023a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff f88a 	bl	80014d8 <HAL_GetTick>
 80023c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff f886 	bl	80014d8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	@ 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e356      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023da:	4b53      	ldr	r3, [pc, #332]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe4>
 80023e6:	e014      	b.n	8002412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7ff f876 	bl	80014d8 <HAL_GetTick>
 80023ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7ff f872 	bl	80014d8 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	@ 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e342      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002402:	4b49      	ldr	r3, [pc, #292]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x10c>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 808c 	beq.w	8002538 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002420:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002428:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800242a:	4b3f      	ldr	r3, [pc, #252]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 800242c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_RCC_OscConfig+0x162>
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	2b18      	cmp	r3, #24
 800243a:	d137      	bne.n	80024ac <HAL_RCC_OscConfig+0x1c8>
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d132      	bne.n	80024ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002446:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x17a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e314      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800245e:	4b32      	ldr	r3, [pc, #200]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 0219 	bic.w	r2, r3, #25
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	492f      	ldr	r1, [pc, #188]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7ff f832 	bl	80014d8 <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002478:	f7ff f82e 	bl	80014d8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e2fe      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800248a:	4b27      	ldr	r3, [pc, #156]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	4b24      	ldr	r3, [pc, #144]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	061b      	lsls	r3, r3, #24
 80024a4:	4920      	ldr	r1, [pc, #128]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024aa:	e045      	b.n	8002538 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d026      	beq.n	8002502 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 0219 	bic.w	r2, r3, #25
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4919      	ldr	r1, [pc, #100]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7ff f807 	bl	80014d8 <HAL_GetTick>
 80024ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ce:	f7ff f803 	bl	80014d8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e2d3      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	490b      	ldr	r1, [pc, #44]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
 8002500:	e01a      	b.n	8002538 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002502:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a08      	ldr	r2, [pc, #32]	@ (8002528 <HAL_RCC_OscConfig+0x244>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7fe ffe3 	bl	80014d8 <HAL_GetTick>
 8002512:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002514:	e00a      	b.n	800252c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002516:	f7fe ffdf 	bl	80014d8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d903      	bls.n	800252c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e2af      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
 8002528:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800252c:	4b96      	ldr	r3, [pc, #600]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ee      	bne.n	8002516 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	d06a      	beq.n	800261a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002544:	4b90      	ldr	r3, [pc, #576]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800254c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800254e:	4b8e      	ldr	r3, [pc, #568]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002552:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b08      	cmp	r3, #8
 8002558:	d007      	beq.n	800256a <HAL_RCC_OscConfig+0x286>
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b18      	cmp	r3, #24
 800255e:	d11b      	bne.n	8002598 <HAL_RCC_OscConfig+0x2b4>
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d116      	bne.n	8002598 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800256a:	4b87      	ldr	r3, [pc, #540]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x29e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	2b80      	cmp	r3, #128	@ 0x80
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e282      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002582:	4b81      	ldr	r3, [pc, #516]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	497d      	ldr	r1, [pc, #500]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002596:	e040      	b.n	800261a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d023      	beq.n	80025e8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025a0:	4b79      	ldr	r3, [pc, #484]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a78      	ldr	r2, [pc, #480]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80025a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe ff94 	bl	80014d8 <HAL_GetTick>
 80025b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025b4:	f7fe ff90 	bl	80014d8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e260      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025c6:	4b70      	ldr	r3, [pc, #448]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	061b      	lsls	r3, r3, #24
 80025e0:	4969      	ldr	r1, [pc, #420]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60cb      	str	r3, [r1, #12]
 80025e6:	e018      	b.n	800261a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025e8:	4b67      	ldr	r3, [pc, #412]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a66      	ldr	r2, [pc, #408]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80025ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe ff70 	bl	80014d8 <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025fc:	f7fe ff6c 	bl	80014d8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e23c      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800260e:	4b5e      	ldr	r3, [pc, #376]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d036      	beq.n	8002694 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d019      	beq.n	8002662 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262e:	4b56      	ldr	r3, [pc, #344]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002632:	4a55      	ldr	r2, [pc, #340]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fe ff4d 	bl	80014d8 <HAL_GetTick>
 800263e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002642:	f7fe ff49 	bl	80014d8 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e219      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002654:	4b4c      	ldr	r3, [pc, #304]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x35e>
 8002660:	e018      	b.n	8002694 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002662:	4b49      	ldr	r3, [pc, #292]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002666:	4a48      	ldr	r2, [pc, #288]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7fe ff33 	bl	80014d8 <HAL_GetTick>
 8002672:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002676:	f7fe ff2f 	bl	80014d8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e1ff      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002688:	4b3f      	ldr	r3, [pc, #252]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 800268a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d036      	beq.n	800270e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d019      	beq.n	80026dc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026a8:	4b37      	ldr	r3, [pc, #220]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a36      	ldr	r2, [pc, #216]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80026ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026b4:	f7fe ff10 	bl	80014d8 <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026bc:	f7fe ff0c 	bl	80014d8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1dc      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x3d8>
 80026da:	e018      	b.n	800270e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a29      	ldr	r2, [pc, #164]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 80026e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026e8:	f7fe fef6 	bl	80014d8 <HAL_GetTick>
 80026ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026f0:	f7fe fef2 	bl	80014d8 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1c2      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002702:	4b21      	ldr	r3, [pc, #132]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8086 	beq.w	8002828 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800271c:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_RCC_OscConfig+0x4a8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1a      	ldr	r2, [pc, #104]	@ (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002726:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002728:	f7fe fed6 	bl	80014d8 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002730:	f7fe fed2 	bl	80014d8 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	@ 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e1a2      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002742:	4b12      	ldr	r3, [pc, #72]	@ (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d106      	bne.n	8002764 <HAL_RCC_OscConfig+0x480>
 8002756:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275a:	4a0b      	ldr	r2, [pc, #44]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6713      	str	r3, [r2, #112]	@ 0x70
 8002762:	e032      	b.n	80027ca <HAL_RCC_OscConfig+0x4e6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d111      	bne.n	8002790 <HAL_RCC_OscConfig+0x4ac>
 800276c:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002770:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	@ 0x70
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277c:	4a02      	ldr	r2, [pc, #8]	@ (8002788 <HAL_RCC_OscConfig+0x4a4>)
 800277e:	f023 0304 	bic.w	r3, r3, #4
 8002782:	6713      	str	r3, [r2, #112]	@ 0x70
 8002784:	e021      	b.n	80027ca <HAL_RCC_OscConfig+0x4e6>
 8002786:	bf00      	nop
 8002788:	58024400 	.word	0x58024400
 800278c:	58024800 	.word	0x58024800
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b05      	cmp	r3, #5
 8002796:	d10c      	bne.n	80027b2 <HAL_RCC_OscConfig+0x4ce>
 8002798:	4b83      	ldr	r3, [pc, #524]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279c:	4a82      	ldr	r2, [pc, #520]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a4:	4b80      	ldr	r3, [pc, #512]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a8:	4a7f      	ldr	r2, [pc, #508]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b0:	e00b      	b.n	80027ca <HAL_RCC_OscConfig+0x4e6>
 80027b2:	4b7d      	ldr	r3, [pc, #500]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b6:	4a7c      	ldr	r2, [pc, #496]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027be:	4b7a      	ldr	r3, [pc, #488]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	4a79      	ldr	r2, [pc, #484]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d015      	beq.n	80027fe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fe fe81 	bl	80014d8 <HAL_GetTick>
 80027d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fe7d 	bl	80014d8 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e14b      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027f0:	4b6d      	ldr	r3, [pc, #436]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ee      	beq.n	80027da <HAL_RCC_OscConfig+0x4f6>
 80027fc:	e014      	b.n	8002828 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7fe fe6b 	bl	80014d8 <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fe67 	bl	80014d8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e135      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800281c:	4b62      	ldr	r3, [pc, #392]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ee      	bne.n	8002806 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 812a 	beq.w	8002a86 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002832:	4b5d      	ldr	r3, [pc, #372]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800283a:	2b18      	cmp	r3, #24
 800283c:	f000 80ba 	beq.w	80029b4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	2b02      	cmp	r3, #2
 8002846:	f040 8095 	bne.w	8002974 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b57      	ldr	r3, [pc, #348]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a56      	ldr	r2, [pc, #344]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002850:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fe3f 	bl	80014d8 <HAL_GetTick>
 800285a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fe3b 	bl	80014d8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e10b      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002870:	4b4d      	ldr	r3, [pc, #308]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800287c:	4b4a      	ldr	r3, [pc, #296]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800287e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002880:	4b4a      	ldr	r3, [pc, #296]	@ (80029ac <HAL_RCC_OscConfig+0x6c8>)
 8002882:	4013      	ands	r3, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800288c:	0112      	lsls	r2, r2, #4
 800288e:	430a      	orrs	r2, r1
 8002890:	4945      	ldr	r1, [pc, #276]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	628b      	str	r3, [r1, #40]	@ 0x28
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	3b01      	subs	r3, #1
 800289c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a4:	3b01      	subs	r3, #1
 80028a6:	025b      	lsls	r3, r3, #9
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b0:	3b01      	subs	r3, #1
 80028b2:	041b      	lsls	r3, r3, #16
 80028b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028be:	3b01      	subs	r3, #1
 80028c0:	061b      	lsls	r3, r3, #24
 80028c2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80028c6:	4938      	ldr	r1, [pc, #224]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80028cc:	4b36      	ldr	r3, [pc, #216]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	4a35      	ldr	r2, [pc, #212]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028d8:	4b33      	ldr	r3, [pc, #204]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80028da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028dc:	4b34      	ldr	r3, [pc, #208]	@ (80029b0 <HAL_RCC_OscConfig+0x6cc>)
 80028de:	4013      	ands	r3, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028e4:	00d2      	lsls	r2, r2, #3
 80028e6:	4930      	ldr	r1, [pc, #192]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028ec:	4b2e      	ldr	r3, [pc, #184]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80028ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f0:	f023 020c 	bic.w	r2, r3, #12
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	492b      	ldr	r1, [pc, #172]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028fe:	4b2a      	ldr	r3, [pc, #168]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002902:	f023 0202 	bic.w	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	4927      	ldr	r1, [pc, #156]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002910:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002914:	4a24      	ldr	r2, [pc, #144]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291c:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	4a21      	ldr	r2, [pc, #132]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002928:	4b1f      	ldr	r3, [pc, #124]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800292a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292c:	4a1e      	ldr	r2, [pc, #120]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800292e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002934:	4b1c      	ldr	r3, [pc, #112]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	4a1b      	ldr	r2, [pc, #108]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b19      	ldr	r3, [pc, #100]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fdc4 	bl	80014d8 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe fdc0 	bl	80014d8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e090      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x670>
 8002972:	e088      	b.n	8002a86 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0b      	ldr	r2, [pc, #44]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800297a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fdaa 	bl	80014d8 <HAL_GetTick>
 8002984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe fda6 	bl	80014d8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e076      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800299a:	4b03      	ldr	r3, [pc, #12]	@ (80029a8 <HAL_RCC_OscConfig+0x6c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x6a4>
 80029a6:	e06e      	b.n	8002a86 <HAL_RCC_OscConfig+0x7a2>
 80029a8:	58024400 	.word	0x58024400
 80029ac:	fffffc0c 	.word	0xfffffc0c
 80029b0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029b4:	4b36      	ldr	r3, [pc, #216]	@ (8002a90 <HAL_RCC_OscConfig+0x7ac>)
 80029b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029ba:	4b35      	ldr	r3, [pc, #212]	@ (8002a90 <HAL_RCC_OscConfig+0x7ac>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d031      	beq.n	8002a2c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f003 0203 	and.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d12a      	bne.n	8002a2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d122      	bne.n	8002a2c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d11a      	bne.n	8002a2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	0a5b      	lsrs	r3, r3, #9
 80029fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d111      	bne.n	8002a2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	0c1b      	lsrs	r3, r3, #16
 8002a0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d108      	bne.n	8002a2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	0e1b      	lsrs	r3, r3, #24
 8002a1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e02b      	b.n	8002a88 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a30:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <HAL_RCC_OscConfig+0x7ac>)
 8002a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a34:	08db      	lsrs	r3, r3, #3
 8002a36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d01f      	beq.n	8002a86 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a46:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <HAL_RCC_OscConfig+0x7ac>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_RCC_OscConfig+0x7ac>)
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a52:	f7fe fd41 	bl	80014d8 <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a58:	bf00      	nop
 8002a5a:	f7fe fd3d 	bl	80014d8 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d0f9      	beq.n	8002a5a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a66:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <HAL_RCC_OscConfig+0x7ac>)
 8002a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <HAL_RCC_OscConfig+0x7b0>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a72:	00d2      	lsls	r2, r2, #3
 8002a74:	4906      	ldr	r1, [pc, #24]	@ (8002a90 <HAL_RCC_OscConfig+0x7ac>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a7a:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <HAL_RCC_OscConfig+0x7ac>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <HAL_RCC_OscConfig+0x7ac>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3730      	adds	r7, #48	@ 0x30
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	58024400 	.word	0x58024400
 8002a94:	ffff0007 	.word	0xffff0007

08002a98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e19c      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aac:	4b8a      	ldr	r3, [pc, #552]	@ (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d910      	bls.n	8002adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b87      	ldr	r3, [pc, #540]	@ (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 020f 	bic.w	r2, r3, #15
 8002ac2:	4985      	ldr	r1, [pc, #532]	@ (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b83      	ldr	r3, [pc, #524]	@ (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e184      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d010      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	4b7b      	ldr	r3, [pc, #492]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d908      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002af8:	4b78      	ldr	r3, [pc, #480]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	4975      	ldr	r1, [pc, #468]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	4b70      	ldr	r3, [pc, #448]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d908      	bls.n	8002b38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b26:	4b6d      	ldr	r3, [pc, #436]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	496a      	ldr	r1, [pc, #424]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	4b64      	ldr	r3, [pc, #400]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d908      	bls.n	8002b66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b54:	4b61      	ldr	r3, [pc, #388]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	495e      	ldr	r1, [pc, #376]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	4b59      	ldr	r3, [pc, #356]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d908      	bls.n	8002b94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b82:	4b56      	ldr	r3, [pc, #344]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4953      	ldr	r1, [pc, #332]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d010      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d908      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f023 020f 	bic.w	r2, r3, #15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4947      	ldr	r1, [pc, #284]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d055      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bce:	4b43      	ldr	r3, [pc, #268]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	4940      	ldr	r1, [pc, #256]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002be8:	4b3c      	ldr	r3, [pc, #240]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d121      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0f6      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c00:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d115      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0ea      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c18:	4b30      	ldr	r3, [pc, #192]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0de      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c28:	4b2c      	ldr	r3, [pc, #176]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0d6      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c38:	4b28      	ldr	r3, [pc, #160]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f023 0207 	bic.w	r2, r3, #7
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4925      	ldr	r1, [pc, #148]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c4a:	f7fe fc45 	bl	80014d8 <HAL_GetTick>
 8002c4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c52:	f7fe fc41 	bl	80014d8 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0be      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c68:	4b1c      	ldr	r3, [pc, #112]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d1eb      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d010      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	4b14      	ldr	r3, [pc, #80]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d208      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c96:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f023 020f 	bic.w	r2, r3, #15
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	490e      	ldr	r1, [pc, #56]	@ (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d214      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 020f 	bic.w	r2, r3, #15
 8002cbe:	4906      	ldr	r1, [pc, #24]	@ (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e086      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
 8002cd8:	52002000 	.word	0x52002000
 8002cdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d208      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	4939      	ldr	r1, [pc, #228]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	4b34      	ldr	r3, [pc, #208]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d208      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d2a:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	492e      	ldr	r1, [pc, #184]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d208      	bcs.n	8002d6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d58:	4b25      	ldr	r3, [pc, #148]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	4922      	ldr	r1, [pc, #136]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d010      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d208      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d86:	4b1a      	ldr	r3, [pc, #104]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4917      	ldr	r1, [pc, #92]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d98:	f000 f834 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b14      	ldr	r3, [pc, #80]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	4912      	ldr	r1, [pc, #72]	@ (8002df4 <HAL_RCC_ClockConfig+0x35c>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002db6:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8002df4 <HAL_RCC_ClockConfig+0x35c>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002df8 <HAL_RCC_ClockConfig+0x360>)
 8002dce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <HAL_RCC_ClockConfig+0x364>)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e00 <HAL_RCC_ClockConfig+0x368>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fb32 	bl	8001444 <HAL_InitTick>
 8002de0:	4603      	mov	r3, r0
 8002de2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	58024400 	.word	0x58024400
 8002df4:	0800568c 	.word	0x0800568c
 8002df8:	24000004 	.word	0x24000004
 8002dfc:	24000000 	.word	0x24000000
 8002e00:	24000008 	.word	0x24000008

08002e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	@ 0x24
 8002e08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e0a:	4bb3      	ldr	r3, [pc, #716]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e12:	2b18      	cmp	r3, #24
 8002e14:	f200 8155 	bhi.w	80030c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e18:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e85 	.word	0x08002e85
 8002e24:	080030c3 	.word	0x080030c3
 8002e28:	080030c3 	.word	0x080030c3
 8002e2c:	080030c3 	.word	0x080030c3
 8002e30:	080030c3 	.word	0x080030c3
 8002e34:	080030c3 	.word	0x080030c3
 8002e38:	080030c3 	.word	0x080030c3
 8002e3c:	080030c3 	.word	0x080030c3
 8002e40:	08002eab 	.word	0x08002eab
 8002e44:	080030c3 	.word	0x080030c3
 8002e48:	080030c3 	.word	0x080030c3
 8002e4c:	080030c3 	.word	0x080030c3
 8002e50:	080030c3 	.word	0x080030c3
 8002e54:	080030c3 	.word	0x080030c3
 8002e58:	080030c3 	.word	0x080030c3
 8002e5c:	080030c3 	.word	0x080030c3
 8002e60:	08002eb1 	.word	0x08002eb1
 8002e64:	080030c3 	.word	0x080030c3
 8002e68:	080030c3 	.word	0x080030c3
 8002e6c:	080030c3 	.word	0x080030c3
 8002e70:	080030c3 	.word	0x080030c3
 8002e74:	080030c3 	.word	0x080030c3
 8002e78:	080030c3 	.word	0x080030c3
 8002e7c:	080030c3 	.word	0x080030c3
 8002e80:	08002eb7 	.word	0x08002eb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e84:	4b94      	ldr	r3, [pc, #592]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e90:	4b91      	ldr	r3, [pc, #580]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	4a90      	ldr	r2, [pc, #576]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ea2:	e111      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ea4:	4b8d      	ldr	r3, [pc, #564]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ea6:	61bb      	str	r3, [r7, #24]
      break;
 8002ea8:	e10e      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002eaa:	4b8d      	ldr	r3, [pc, #564]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002eac:	61bb      	str	r3, [r7, #24]
      break;
 8002eae:	e10b      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002eb2:	61bb      	str	r3, [r7, #24]
      break;
 8002eb4:	e108      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eb6:	4b88      	ldr	r3, [pc, #544]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ec0:	4b85      	ldr	r3, [pc, #532]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ecc:	4b82      	ldr	r3, [pc, #520]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002ed6:	4b80      	ldr	r3, [pc, #512]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eda:	08db      	lsrs	r3, r3, #3
 8002edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80e1 	beq.w	80030bc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	f000 8083 	beq.w	8003008 <HAL_RCC_GetSysClockFreq+0x204>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f200 80a1 	bhi.w	800304c <HAL_RCC_GetSysClockFreq+0x248>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x114>
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d056      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f16:	e099      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f18:	4b6f      	ldr	r3, [pc, #444]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02d      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f24:	4b6c      	ldr	r3, [pc, #432]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	08db      	lsrs	r3, r3, #3
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	4a6b      	ldr	r2, [pc, #428]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
 8002f34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f4e:	4b62      	ldr	r3, [pc, #392]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f62:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f7e:	e087      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80030ec <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f92:	4b51      	ldr	r3, [pc, #324]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fa6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fc2:	e065      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80030f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd6:	4b40      	ldr	r3, [pc, #256]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003006:	e043      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80030f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301a:	4b2f      	ldr	r3, [pc, #188]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302a:	ed97 6a02 	vldr	s12, [r7, #8]
 800302e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800303e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800304a:	e021      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80030f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800305a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305e:	4b1e      	ldr	r3, [pc, #120]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003072:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800307a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800308e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003090:	4b11      	ldr	r3, [pc, #68]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	0a5b      	lsrs	r3, r3, #9
 8003096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800309a:	3301      	adds	r3, #1
 800309c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80030ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b4:	ee17 3a90 	vmov	r3, s15
 80030b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80030ba:	e005      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
      break;
 80030c0:	e002      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80030c2:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030c4:	61bb      	str	r3, [r7, #24]
      break;
 80030c6:	bf00      	nop
  }

  return sysclockfreq;
 80030c8:	69bb      	ldr	r3, [r7, #24]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	@ 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	58024400 	.word	0x58024400
 80030dc:	03d09000 	.word	0x03d09000
 80030e0:	003d0900 	.word	0x003d0900
 80030e4:	02dc6c00 	.word	0x02dc6c00
 80030e8:	46000000 	.word	0x46000000
 80030ec:	4c742400 	.word	0x4c742400
 80030f0:	4a742400 	.word	0x4a742400
 80030f4:	4c371b00 	.word	0x4c371b00

080030f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030fc:	b0c6      	sub	sp, #280	@ 0x118
 80030fe:	af00      	add	r7, sp, #0
 8003100:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003104:	2300      	movs	r3, #0
 8003106:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800310a:	2300      	movs	r3, #0
 800310c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800311c:	2500      	movs	r5, #0
 800311e:	ea54 0305 	orrs.w	r3, r4, r5
 8003122:	d049      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800312a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800312e:	d02f      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003130:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003134:	d828      	bhi.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003136:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800313a:	d01a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800313c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003140:	d822      	bhi.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800314a:	d007      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800314c:	e01c      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800314e:	4bab      	ldr	r3, [pc, #684]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003152:	4aaa      	ldr	r2, [pc, #680]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003158:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800315a:	e01a      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800315c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003160:	3308      	adds	r3, #8
 8003162:	2102      	movs	r1, #2
 8003164:	4618      	mov	r0, r3
 8003166:	f001 f967 	bl	8004438 <RCCEx_PLL2_Config>
 800316a:	4603      	mov	r3, r0
 800316c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003170:	e00f      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003176:	3328      	adds	r3, #40	@ 0x28
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f001 fa0e 	bl	800459c <RCCEx_PLL3_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003186:	e004      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800318e:	e000      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003192:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800319a:	4b98      	ldr	r3, [pc, #608]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800319c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800319e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80031a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a8:	4a94      	ldr	r2, [pc, #592]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031aa:	430b      	orrs	r3, r1
 80031ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80031ae:	e003      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80031c4:	f04f 0900 	mov.w	r9, #0
 80031c8:	ea58 0309 	orrs.w	r3, r8, r9
 80031cc:	d047      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80031ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d82a      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031d8:	a201      	add	r2, pc, #4	@ (adr r2, 80031e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	080031f5 	.word	0x080031f5
 80031e4:	08003203 	.word	0x08003203
 80031e8:	08003219 	.word	0x08003219
 80031ec:	08003237 	.word	0x08003237
 80031f0:	08003237 	.word	0x08003237
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f4:	4b81      	ldr	r3, [pc, #516]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	4a80      	ldr	r2, [pc, #512]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003200:	e01a      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003206:	3308      	adds	r3, #8
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f001 f914 	bl	8004438 <RCCEx_PLL2_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003216:	e00f      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800321c:	3328      	adds	r3, #40	@ 0x28
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f001 f9bb 	bl	800459c <RCCEx_PLL3_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800322c:	e004      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003238:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003240:	4b6e      	ldr	r3, [pc, #440]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003244:	f023 0107 	bic.w	r1, r3, #7
 8003248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324e:	4a6b      	ldr	r2, [pc, #428]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003250:	430b      	orrs	r3, r1
 8003252:	6513      	str	r3, [r2, #80]	@ 0x50
 8003254:	e003      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003256:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800325a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800325e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800326a:	f04f 0b00 	mov.w	fp, #0
 800326e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003272:	d05b      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003278:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800327c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003280:	d03b      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003282:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003286:	d834      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003288:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800328c:	d037      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800328e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003292:	d82e      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003294:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003298:	d033      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800329a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800329e:	d828      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032a4:	d01a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80032a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032aa:	d822      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80032b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032b4:	d007      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80032b6:	e01c      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b8:	4b50      	ldr	r3, [pc, #320]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	4a4f      	ldr	r2, [pc, #316]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032c4:	e01e      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ca:	3308      	adds	r3, #8
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 f8b2 	bl	8004438 <RCCEx_PLL2_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032da:	e013      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e0:	3328      	adds	r3, #40	@ 0x28
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 f959 	bl	800459c <RCCEx_PLL3_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032f0:	e008      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032f8:	e004      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80032fa:	bf00      	nop
 80032fc:	e002      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800330c:	4b3b      	ldr	r3, [pc, #236]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003310:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800331c:	4a37      	ldr	r2, [pc, #220]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800331e:	430b      	orrs	r3, r1
 8003320:	6593      	str	r3, [r2, #88]	@ 0x58
 8003322:	e003      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800332c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003338:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003342:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003346:	460b      	mov	r3, r1
 8003348:	4313      	orrs	r3, r2
 800334a:	d05d      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800334c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003350:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003354:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003358:	d03b      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800335a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800335e:	d834      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003360:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003364:	d037      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003366:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800336a:	d82e      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800336c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003370:	d033      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003372:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003376:	d828      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003378:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800337c:	d01a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800337e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003382:	d822      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800338c:	d007      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800338e:	e01c      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003390:	4b1a      	ldr	r3, [pc, #104]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	4a19      	ldr	r2, [pc, #100]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800339a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800339c:	e01e      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800339e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a2:	3308      	adds	r3, #8
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 f846 	bl	8004438 <RCCEx_PLL2_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80033b2:	e013      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b8:	3328      	adds	r3, #40	@ 0x28
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f001 f8ed 	bl	800459c <RCCEx_PLL3_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033c8:	e008      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033d0:	e004      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80033d2:	bf00      	nop
 80033d4:	e002      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80033d6:	bf00      	nop
 80033d8:	e000      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80033da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033e4:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80033ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033f4:	4a01      	ldr	r2, [pc, #4]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033f6:	430b      	orrs	r3, r1
 80033f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80033fa:	e005      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80033fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003404:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003414:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003418:	2300      	movs	r3, #0
 800341a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800341e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003422:	460b      	mov	r3, r1
 8003424:	4313      	orrs	r3, r2
 8003426:	d03a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342e:	2b30      	cmp	r3, #48	@ 0x30
 8003430:	d01f      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003432:	2b30      	cmp	r3, #48	@ 0x30
 8003434:	d819      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003436:	2b20      	cmp	r3, #32
 8003438:	d00c      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800343a:	2b20      	cmp	r3, #32
 800343c:	d815      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d019      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003442:	2b10      	cmp	r3, #16
 8003444:	d111      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003446:	4baa      	ldr	r3, [pc, #680]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344a:	4aa9      	ldr	r2, [pc, #676]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800344c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003450:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003452:	e011      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003458:	3308      	adds	r3, #8
 800345a:	2102      	movs	r1, #2
 800345c:	4618      	mov	r0, r3
 800345e:	f000 ffeb 	bl	8004438 <RCCEx_PLL2_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003468:	e006      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003470:	e002      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003480:	4b9b      	ldr	r3, [pc, #620]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003484:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800348c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348e:	4a98      	ldr	r2, [pc, #608]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003490:	430b      	orrs	r3, r1
 8003492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003494:	e003      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003496:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800349a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800349e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80034aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80034b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80034b8:	460b      	mov	r3, r1
 80034ba:	4313      	orrs	r3, r2
 80034bc:	d051      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80034be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034c8:	d035      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80034ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034ce:	d82e      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80034d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034d4:	d031      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80034d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034da:	d828      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80034dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e0:	d01a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80034e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e6:	d822      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f0:	d007      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80034f2:	e01c      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f4:	4b7e      	ldr	r3, [pc, #504]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	4a7d      	ldr	r2, [pc, #500]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003500:	e01c      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003506:	3308      	adds	r3, #8
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f000 ff94 	bl	8004438 <RCCEx_PLL2_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003516:	e011      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800351c:	3328      	adds	r3, #40	@ 0x28
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f001 f83b 	bl	800459c <RCCEx_PLL3_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800352c:	e006      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003534:	e002      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800353a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003544:	4b6a      	ldr	r3, [pc, #424]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003548:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800354c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003552:	4a67      	ldr	r2, [pc, #412]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003554:	430b      	orrs	r3, r1
 8003556:	6513      	str	r3, [r2, #80]	@ 0x50
 8003558:	e003      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800355e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800356e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003572:	2300      	movs	r3, #0
 8003574:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003578:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800357c:	460b      	mov	r3, r1
 800357e:	4313      	orrs	r3, r2
 8003580:	d053      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800358c:	d033      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800358e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003592:	d82c      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003594:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003598:	d02f      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800359a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800359e:	d826      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035a4:	d02b      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80035a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035aa:	d820      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035b0:	d012      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80035b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035b6:	d81a      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d022      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c0:	d115      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035c6:	3308      	adds	r3, #8
 80035c8:	2101      	movs	r1, #1
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 ff34 	bl	8004438 <RCCEx_PLL2_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035d6:	e015      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035dc:	3328      	adds	r3, #40	@ 0x28
 80035de:	2101      	movs	r1, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 ffdb 	bl	800459c <RCCEx_PLL3_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035ec:	e00a      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035f4:	e006      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80035f6:	bf00      	nop
 80035f8:	e004      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80035fa:	bf00      	nop
 80035fc:	e002      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80035fe:	bf00      	nop
 8003600:	e000      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003604:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800360c:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800360e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003610:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361a:	4a35      	ldr	r2, [pc, #212]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800361c:	430b      	orrs	r3, r1
 800361e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003620:	e003      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003622:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003626:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800362a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003640:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003644:	460b      	mov	r3, r1
 8003646:	4313      	orrs	r3, r2
 8003648:	d058      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800364a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800364e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003652:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003656:	d033      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800365c:	d82c      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003662:	d02f      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003668:	d826      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800366a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800366e:	d02b      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003670:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003674:	d820      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800367a:	d012      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800367c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003680:	d81a      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003682:	2b00      	cmp	r3, #0
 8003684:	d022      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003686:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800368a:	d115      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800368c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003690:	3308      	adds	r3, #8
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fecf 	bl	8004438 <RCCEx_PLL2_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036a0:	e015      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a6:	3328      	adds	r3, #40	@ 0x28
 80036a8:	2101      	movs	r1, #1
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 ff76 	bl	800459c <RCCEx_PLL3_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036b6:	e00a      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036be:	e006      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036c0:	bf00      	nop
 80036c2:	e004      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036c4:	bf00      	nop
 80036c6:	e002      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10e      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036d6:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80036de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036e6:	4a02      	ldr	r2, [pc, #8]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ec:	e006      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80036ee:	bf00      	nop
 80036f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003712:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003716:	460b      	mov	r3, r1
 8003718:	4313      	orrs	r3, r2
 800371a:	d037      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800371c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003726:	d00e      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800372c:	d816      	bhi.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d018      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003736:	d111      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003738:	4bc4      	ldr	r3, [pc, #784]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	4ac3      	ldr	r2, [pc, #780]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003744:	e00f      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800374a:	3308      	adds	r3, #8
 800374c:	2101      	movs	r1, #1
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fe72 	bl	8004438 <RCCEx_PLL2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800375a:	e004      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003766:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800376e:	4bb7      	ldr	r3, [pc, #732]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003772:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800377c:	4ab3      	ldr	r2, [pc, #716]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800377e:	430b      	orrs	r3, r1
 8003780:	6513      	str	r3, [r2, #80]	@ 0x50
 8003782:	e003      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003784:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003788:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800378c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003798:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80037a6:	460b      	mov	r3, r1
 80037a8:	4313      	orrs	r3, r2
 80037aa:	d039      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80037ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d81c      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80037b6:	a201      	add	r2, pc, #4	@ (adr r2, 80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037f9 	.word	0x080037f9
 80037c0:	080037cd 	.word	0x080037cd
 80037c4:	080037db 	.word	0x080037db
 80037c8:	080037f9 	.word	0x080037f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037cc:	4b9f      	ldr	r3, [pc, #636]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	4a9e      	ldr	r2, [pc, #632]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037d8:	e00f      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037de:	3308      	adds	r3, #8
 80037e0:	2102      	movs	r1, #2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fe28 	bl	8004438 <RCCEx_PLL2_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037ee:	e004      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80037f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10a      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003802:	4b92      	ldr	r3, [pc, #584]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003806:	f023 0103 	bic.w	r1, r3, #3
 800380a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800380e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003810:	4a8e      	ldr	r2, [pc, #568]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003812:	430b      	orrs	r3, r1
 8003814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003816:	e003      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800381c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800382c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003836:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	f000 8099 	beq.w	8003974 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003842:	4b83      	ldr	r3, [pc, #524]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a82      	ldr	r2, [pc, #520]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800384c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800384e:	f7fd fe43 	bl	80014d8 <HAL_GetTick>
 8003852:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003856:	e00b      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003858:	f7fd fe3e 	bl	80014d8 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b64      	cmp	r3, #100	@ 0x64
 8003866:	d903      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800386e:	e005      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003870:	4b77      	ldr	r3, [pc, #476]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ed      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800387c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003880:	2b00      	cmp	r3, #0
 8003882:	d173      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003884:	4b71      	ldr	r3, [pc, #452]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003886:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003890:	4053      	eors	r3, r2
 8003892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003896:	2b00      	cmp	r3, #0
 8003898:	d015      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800389a:	4b6c      	ldr	r3, [pc, #432]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038a6:	4b69      	ldr	r3, [pc, #420]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038aa:	4a68      	ldr	r2, [pc, #416]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038b2:	4b66      	ldr	r3, [pc, #408]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b6:	4a65      	ldr	r2, [pc, #404]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038be:	4a63      	ldr	r2, [pc, #396]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d2:	d118      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd fe00 	bl	80014d8 <HAL_GetTick>
 80038d8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038dc:	e00d      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fd fdfb 	bl	80014d8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038e8:	1ad2      	subs	r2, r2, r3
 80038ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d903      	bls.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80038f8:	e005      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038fa:	4b54      	ldr	r3, [pc, #336]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0eb      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800390a:	2b00      	cmp	r3, #0
 800390c:	d129      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800390e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800391a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800391e:	d10e      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003920:	4b4a      	ldr	r3, [pc, #296]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003930:	091a      	lsrs	r2, r3, #4
 8003932:	4b48      	ldr	r3, [pc, #288]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003934:	4013      	ands	r3, r2
 8003936:	4a45      	ldr	r2, [pc, #276]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003938:	430b      	orrs	r3, r1
 800393a:	6113      	str	r3, [r2, #16]
 800393c:	e005      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800393e:	4b43      	ldr	r3, [pc, #268]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	4a42      	ldr	r2, [pc, #264]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003944:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003948:	6113      	str	r3, [r2, #16]
 800394a:	4b40      	ldr	r3, [pc, #256]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800394c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800394e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395a:	4a3c      	ldr	r2, [pc, #240]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800395c:	430b      	orrs	r3, r1
 800395e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003960:	e008      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003966:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800396a:	e003      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003970:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f002 0301 	and.w	r3, r2, #1
 8003980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800398a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800398e:	460b      	mov	r3, r1
 8003990:	4313      	orrs	r3, r2
 8003992:	f000 808f 	beq.w	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800399a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800399c:	2b28      	cmp	r3, #40	@ 0x28
 800399e:	d871      	bhi.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80039a0:	a201      	add	r2, pc, #4	@ (adr r2, 80039a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	08003a8d 	.word	0x08003a8d
 80039ac:	08003a85 	.word	0x08003a85
 80039b0:	08003a85 	.word	0x08003a85
 80039b4:	08003a85 	.word	0x08003a85
 80039b8:	08003a85 	.word	0x08003a85
 80039bc:	08003a85 	.word	0x08003a85
 80039c0:	08003a85 	.word	0x08003a85
 80039c4:	08003a85 	.word	0x08003a85
 80039c8:	08003a59 	.word	0x08003a59
 80039cc:	08003a85 	.word	0x08003a85
 80039d0:	08003a85 	.word	0x08003a85
 80039d4:	08003a85 	.word	0x08003a85
 80039d8:	08003a85 	.word	0x08003a85
 80039dc:	08003a85 	.word	0x08003a85
 80039e0:	08003a85 	.word	0x08003a85
 80039e4:	08003a85 	.word	0x08003a85
 80039e8:	08003a6f 	.word	0x08003a6f
 80039ec:	08003a85 	.word	0x08003a85
 80039f0:	08003a85 	.word	0x08003a85
 80039f4:	08003a85 	.word	0x08003a85
 80039f8:	08003a85 	.word	0x08003a85
 80039fc:	08003a85 	.word	0x08003a85
 8003a00:	08003a85 	.word	0x08003a85
 8003a04:	08003a85 	.word	0x08003a85
 8003a08:	08003a8d 	.word	0x08003a8d
 8003a0c:	08003a85 	.word	0x08003a85
 8003a10:	08003a85 	.word	0x08003a85
 8003a14:	08003a85 	.word	0x08003a85
 8003a18:	08003a85 	.word	0x08003a85
 8003a1c:	08003a85 	.word	0x08003a85
 8003a20:	08003a85 	.word	0x08003a85
 8003a24:	08003a85 	.word	0x08003a85
 8003a28:	08003a8d 	.word	0x08003a8d
 8003a2c:	08003a85 	.word	0x08003a85
 8003a30:	08003a85 	.word	0x08003a85
 8003a34:	08003a85 	.word	0x08003a85
 8003a38:	08003a85 	.word	0x08003a85
 8003a3c:	08003a85 	.word	0x08003a85
 8003a40:	08003a85 	.word	0x08003a85
 8003a44:	08003a85 	.word	0x08003a85
 8003a48:	08003a8d 	.word	0x08003a8d
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	58024800 	.word	0x58024800
 8003a54:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	2101      	movs	r1, #1
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fce9 	bl	8004438 <RCCEx_PLL2_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a6c:	e00f      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a72:	3328      	adds	r3, #40	@ 0x28
 8003a74:	2101      	movs	r1, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fd90 	bl	800459c <RCCEx_PLL3_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a82:	e004      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a8a:	e000      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a96:	4bbf      	ldr	r3, [pc, #764]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aa4:	4abb      	ldr	r2, [pc, #748]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003aaa:	e003      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ab0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f002 0302 	and.w	r3, r2, #2
 8003ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003aca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d041      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ada:	2b05      	cmp	r3, #5
 8003adc:	d824      	bhi.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003ade:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b31 	.word	0x08003b31
 8003ae8:	08003afd 	.word	0x08003afd
 8003aec:	08003b13 	.word	0x08003b13
 8003af0:	08003b31 	.word	0x08003b31
 8003af4:	08003b31 	.word	0x08003b31
 8003af8:	08003b31 	.word	0x08003b31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b00:	3308      	adds	r3, #8
 8003b02:	2101      	movs	r1, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fc97 	bl	8004438 <RCCEx_PLL2_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b10:	e00f      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b16:	3328      	adds	r3, #40	@ 0x28
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fd3e 	bl	800459c <RCCEx_PLL3_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b26:	e004      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b2e:	e000      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b3a:	4b96      	ldr	r3, [pc, #600]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	f023 0107 	bic.w	r1, r3, #7
 8003b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b48:	4a92      	ldr	r2, [pc, #584]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b4e:	e003      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f002 0304 	and.w	r3, r2, #4
 8003b64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b6e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d044      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	d825      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003b84:	a201      	add	r2, pc, #4	@ (adr r2, 8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bd9 	.word	0x08003bd9
 8003b90:	08003ba5 	.word	0x08003ba5
 8003b94:	08003bbb 	.word	0x08003bbb
 8003b98:	08003bd9 	.word	0x08003bd9
 8003b9c:	08003bd9 	.word	0x08003bd9
 8003ba0:	08003bd9 	.word	0x08003bd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba8:	3308      	adds	r3, #8
 8003baa:	2101      	movs	r1, #1
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fc43 	bl	8004438 <RCCEx_PLL2_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bb8:	e00f      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bbe:	3328      	adds	r3, #40	@ 0x28
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fcea 	bl	800459c <RCCEx_PLL3_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bce:	e004      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bd6:	e000      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003be2:	4b6c      	ldr	r3, [pc, #432]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	f023 0107 	bic.w	r1, r3, #7
 8003bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf2:	4a68      	ldr	r2, [pc, #416]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bf8:	e003      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	f002 0320 	and.w	r3, r2, #32
 8003c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c12:	2300      	movs	r3, #0
 8003c14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003c18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	d055      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c2e:	d033      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c34:	d82c      	bhi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3a:	d02f      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c40:	d826      	bhi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c46:	d02b      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003c48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c4c:	d820      	bhi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c52:	d012      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c58:	d81a      	bhi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d022      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003c5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c62:	d115      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c68:	3308      	adds	r3, #8
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fbe3 	bl	8004438 <RCCEx_PLL2_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c78:	e015      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c7e:	3328      	adds	r3, #40	@ 0x28
 8003c80:	2102      	movs	r1, #2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fc8a 	bl	800459c <RCCEx_PLL3_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c96:	e006      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c98:	bf00      	nop
 8003c9a:	e004      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c9c:	bf00      	nop
 8003c9e:	e002      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ca0:	bf00      	nop
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10b      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cae:	4b39      	ldr	r3, [pc, #228]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cbe:	4a35      	ldr	r2, [pc, #212]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003cda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ce4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4313      	orrs	r3, r2
 8003cec:	d058      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cf6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003cfa:	d033      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003cfc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d00:	d82c      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d06:	d02f      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d0c:	d826      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d12:	d02b      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003d14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d18:	d820      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d1e:	d012      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d24:	d81a      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d022      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d2e:	d115      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d34:	3308      	adds	r3, #8
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fb7d 	bl	8004438 <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d44:	e015      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d4a:	3328      	adds	r3, #40	@ 0x28
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fc24 	bl	800459c <RCCEx_PLL3_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d62:	e006      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d64:	bf00      	nop
 8003d66:	e004      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d68:	bf00      	nop
 8003d6a:	e002      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d6c:	bf00      	nop
 8003d6e:	e000      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10e      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d7a:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d8a:	4a02      	ldr	r2, [pc, #8]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d90:	e006      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003d92:	bf00      	nop
 8003d94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003dac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003db0:	2300      	movs	r3, #0
 8003db2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003db6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	d055      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dc8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003dcc:	d033      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003dce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003dd2:	d82c      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd8:	d02f      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dde:	d826      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003de0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003de4:	d02b      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003de6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003dea:	d820      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003df0:	d012      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003df2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003df6:	d81a      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d022      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e00:	d115      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e06:	3308      	adds	r3, #8
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fb14 	bl	8004438 <RCCEx_PLL2_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e16:	e015      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1c:	3328      	adds	r3, #40	@ 0x28
 8003e1e:	2102      	movs	r1, #2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fbbb 	bl	800459c <RCCEx_PLL3_Config>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e34:	e006      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e36:	bf00      	nop
 8003e38:	e004      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e3a:	bf00      	nop
 8003e3c:	e002      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e4c:	4ba0      	ldr	r3, [pc, #640]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e5c:	4a9c      	ldr	r2, [pc, #624]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e62:	e003      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f002 0308 	and.w	r3, r2, #8
 8003e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e82:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003e86:	460b      	mov	r3, r1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	d01e      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9e:	3328      	adds	r3, #40	@ 0x28
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fb7a 	bl	800459c <RCCEx_PLL3_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003eb4:	4b86      	ldr	r3, [pc, #536]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ec4:	4a82      	ldr	r2, [pc, #520]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f002 0310 	and.w	r3, r2, #16
 8003ed6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003eda:	2300      	movs	r3, #0
 8003edc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ee0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	d01e      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ef6:	d10c      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efc:	3328      	adds	r3, #40	@ 0x28
 8003efe:	2102      	movs	r1, #2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fb4b 	bl	800459c <RCCEx_PLL3_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f12:	4b6f      	ldr	r3, [pc, #444]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f22:	4a6b      	ldr	r2, [pc, #428]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f36:	2300      	movs	r3, #0
 8003f38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f3a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4313      	orrs	r3, r2
 8003f42:	d03e      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f50:	d022      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003f52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f56:	d81b      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f60:	d00b      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003f62:	e015      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f68:	3308      	adds	r3, #8
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fa63 	bl	8004438 <RCCEx_PLL2_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f78:	e00f      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7e:	3328      	adds	r3, #40	@ 0x28
 8003f80:	2102      	movs	r1, #2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fb0a 	bl	800459c <RCCEx_PLL3_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f8e:	e004      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fb2:	4a47      	ldr	r2, [pc, #284]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fb8:	e003      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003fce:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	d03b      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fea:	d01f      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003fec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ff0:	d818      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ff6:	d003      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003ff8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ffc:	d007      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003ffe:	e011      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004000:	4b33      	ldr	r3, [pc, #204]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	4a32      	ldr	r2, [pc, #200]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800400a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800400c:	e00f      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800400e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004012:	3328      	adds	r3, #40	@ 0x28
 8004014:	2101      	movs	r1, #1
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fac0 	bl	800459c <RCCEx_PLL3_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004022:	e004      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800402a:	e000      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800402c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10b      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004036:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800403e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004046:	4a22      	ldr	r2, [pc, #136]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004048:	430b      	orrs	r3, r1
 800404a:	6553      	str	r3, [r2, #84]	@ 0x54
 800404c:	e003      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004052:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004062:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004064:	2300      	movs	r3, #0
 8004066:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004068:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800406c:	460b      	mov	r3, r1
 800406e:	4313      	orrs	r3, r2
 8004070:	d034      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800407c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004080:	d007      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004082:	e011      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004084:	4b12      	ldr	r3, [pc, #72]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004088:	4a11      	ldr	r2, [pc, #68]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800408a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800408e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004090:	e00e      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004096:	3308      	adds	r3, #8
 8004098:	2102      	movs	r1, #2
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f9cc 	bl	8004438 <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040a6:	e003      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10d      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040b8:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c6:	4a02      	ldr	r2, [pc, #8]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040c8:	430b      	orrs	r3, r1
 80040ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040cc:	e006      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80040ce:	bf00      	nop
 80040d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80040e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ea:	2300      	movs	r3, #0
 80040ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80040ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80040f2:	460b      	mov	r3, r1
 80040f4:	4313      	orrs	r3, r2
 80040f6:	d00c      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fc:	3328      	adds	r3, #40	@ 0x28
 80040fe:	2102      	movs	r1, #2
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fa4b 	bl	800459c <RCCEx_PLL3_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800411e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004120:	2300      	movs	r3, #0
 8004122:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004124:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004128:	460b      	mov	r3, r1
 800412a:	4313      	orrs	r3, r2
 800412c:	d036      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800412e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004134:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004138:	d018      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800413a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800413e:	d811      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004144:	d014      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800414a:	d80b      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d011      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004154:	d106      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004156:	4bb7      	ldr	r3, [pc, #732]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	4ab6      	ldr	r2, [pc, #728]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800415c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004160:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004162:	e008      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800416c:	bf00      	nop
 800416e:	e002      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004170:	bf00      	nop
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004176:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800417e:	4bad      	ldr	r3, [pc, #692]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004182:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800418c:	4aa9      	ldr	r2, [pc, #676]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800418e:	430b      	orrs	r3, r1
 8004190:	6553      	str	r3, [r2, #84]	@ 0x54
 8004192:	e003      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800419c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80041a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80041aa:	2300      	movs	r3, #0
 80041ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80041ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80041b2:	460b      	mov	r3, r1
 80041b4:	4313      	orrs	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041b8:	4b9e      	ldr	r3, [pc, #632]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80041c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c6:	4a9b      	ldr	r2, [pc, #620]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041da:	2300      	movs	r3, #0
 80041dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80041e2:	460b      	mov	r3, r1
 80041e4:	4313      	orrs	r3, r2
 80041e6:	d009      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041e8:	4b92      	ldr	r3, [pc, #584]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ec:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80041f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041f6:	4a8f      	ldr	r2, [pc, #572]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004208:	643b      	str	r3, [r7, #64]	@ 0x40
 800420a:	2300      	movs	r3, #0
 800420c:	647b      	str	r3, [r7, #68]	@ 0x44
 800420e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004212:	460b      	mov	r3, r1
 8004214:	4313      	orrs	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004218:	4b86      	ldr	r3, [pc, #536]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	4a85      	ldr	r2, [pc, #532]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800421e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004222:	6113      	str	r3, [r2, #16]
 8004224:	4b83      	ldr	r3, [pc, #524]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004226:	6919      	ldr	r1, [r3, #16]
 8004228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004230:	4a80      	ldr	r2, [pc, #512]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004232:	430b      	orrs	r3, r1
 8004234:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004242:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004244:	2300      	movs	r3, #0
 8004246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004248:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800424c:	460b      	mov	r3, r1
 800424e:	4313      	orrs	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004252:	4b78      	ldr	r3, [pc, #480]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004256:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800425a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004260:	4a74      	ldr	r2, [pc, #464]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004262:	430b      	orrs	r3, r1
 8004264:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004272:	633b      	str	r3, [r7, #48]	@ 0x30
 8004274:	2300      	movs	r3, #0
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
 8004278:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004282:	4b6c      	ldr	r3, [pc, #432]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004286:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800428a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	4a68      	ldr	r2, [pc, #416]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004294:	430b      	orrs	r3, r1
 8004296:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	2100      	movs	r1, #0
 80042a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80042ae:	460b      	mov	r3, r1
 80042b0:	4313      	orrs	r3, r2
 80042b2:	d011      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b8:	3308      	adds	r3, #8
 80042ba:	2100      	movs	r1, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 f8bb 	bl	8004438 <RCCEx_PLL2_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	2100      	movs	r1, #0
 80042e2:	6239      	str	r1, [r7, #32]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042ee:	460b      	mov	r3, r1
 80042f0:	4313      	orrs	r3, r2
 80042f2:	d011      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f8:	3308      	adds	r3, #8
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f89b 	bl	8004438 <RCCEx_PLL2_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004314:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	2100      	movs	r1, #0
 8004322:	61b9      	str	r1, [r7, #24]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800432e:	460b      	mov	r3, r1
 8004330:	4313      	orrs	r3, r2
 8004332:	d011      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004338:	3308      	adds	r3, #8
 800433a:	2102      	movs	r1, #2
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f87b 	bl	8004438 <RCCEx_PLL2_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	2100      	movs	r1, #0
 8004362:	6139      	str	r1, [r7, #16]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800436e:	460b      	mov	r3, r1
 8004370:	4313      	orrs	r3, r2
 8004372:	d011      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004378:	3328      	adds	r3, #40	@ 0x28
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f000 f90d 	bl	800459c <RCCEx_PLL3_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004394:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	2100      	movs	r1, #0
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043ae:	460b      	mov	r3, r1
 80043b0:	4313      	orrs	r3, r2
 80043b2:	d011      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b8:	3328      	adds	r3, #40	@ 0x28
 80043ba:	2101      	movs	r1, #1
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f8ed 	bl	800459c <RCCEx_PLL3_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80043c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	2100      	movs	r1, #0
 80043e2:	6039      	str	r1, [r7, #0]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043ee:	460b      	mov	r3, r1
 80043f0:	4313      	orrs	r3, r2
 80043f2:	d011      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f8:	3328      	adds	r3, #40	@ 0x28
 80043fa:	2102      	movs	r1, #2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 f8cd 	bl	800459c <RCCEx_PLL3_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004414:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004418:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
}
 8004426:	4618      	mov	r0, r3
 8004428:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800442c:	46bd      	mov	sp, r7
 800442e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004432:	bf00      	nop
 8004434:	58024400 	.word	0x58024400

08004438 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004446:	4b53      	ldr	r3, [pc, #332]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b03      	cmp	r3, #3
 8004450:	d101      	bne.n	8004456 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e099      	b.n	800458a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004456:	4b4f      	ldr	r3, [pc, #316]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a4e      	ldr	r2, [pc, #312]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 800445c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004462:	f7fd f839 	bl	80014d8 <HAL_GetTick>
 8004466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004468:	e008      	b.n	800447c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800446a:	f7fd f835 	bl	80014d8 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e086      	b.n	800458a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800447c:	4b45      	ldr	r3, [pc, #276]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004488:	4b42      	ldr	r3, [pc, #264]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	031b      	lsls	r3, r3, #12
 8004496:	493f      	ldr	r1, [pc, #252]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 8004498:	4313      	orrs	r3, r2
 800449a:	628b      	str	r3, [r1, #40]	@ 0x28
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	025b      	lsls	r3, r3, #9
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	061b      	lsls	r3, r3, #24
 80044c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044cc:	4931      	ldr	r1, [pc, #196]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044d2:	4b30      	ldr	r3, [pc, #192]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	492d      	ldr	r1, [pc, #180]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	f023 0220 	bic.w	r2, r3, #32
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	4928      	ldr	r1, [pc, #160]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044f6:	4b27      	ldr	r3, [pc, #156]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fa:	4a26      	ldr	r2, [pc, #152]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 80044fc:	f023 0310 	bic.w	r3, r3, #16
 8004500:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004502:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 8004504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004506:	4b24      	ldr	r3, [pc, #144]	@ (8004598 <RCCEx_PLL2_Config+0x160>)
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	69d2      	ldr	r2, [r2, #28]
 800450e:	00d2      	lsls	r2, r2, #3
 8004510:	4920      	ldr	r1, [pc, #128]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004516:	4b1f      	ldr	r3, [pc, #124]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 8004518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451a:	4a1e      	ldr	r2, [pc, #120]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 800451c:	f043 0310 	orr.w	r3, r3, #16
 8004520:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004528:	4b1a      	ldr	r3, [pc, #104]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	4a19      	ldr	r2, [pc, #100]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 800452e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004532:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004534:	e00f      	b.n	8004556 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d106      	bne.n	800454a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800453c:	4b15      	ldr	r3, [pc, #84]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 8004542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004546:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004548:	e005      	b.n	8004556 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800454a:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	4a11      	ldr	r2, [pc, #68]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 8004550:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004554:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004556:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a0e      	ldr	r2, [pc, #56]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 800455c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004562:	f7fc ffb9 	bl	80014d8 <HAL_GetTick>
 8004566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004568:	e008      	b.n	800457c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800456a:	f7fc ffb5 	bl	80014d8 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e006      	b.n	800458a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <RCCEx_PLL2_Config+0x15c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	58024400 	.word	0x58024400
 8004598:	ffff0007 	.word	0xffff0007

0800459c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045aa:	4b53      	ldr	r3, [pc, #332]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d101      	bne.n	80045ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e099      	b.n	80046ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045ba:	4b4f      	ldr	r3, [pc, #316]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a4e      	ldr	r2, [pc, #312]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80045c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c6:	f7fc ff87 	bl	80014d8 <HAL_GetTick>
 80045ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045cc:	e008      	b.n	80045e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045ce:	f7fc ff83 	bl	80014d8 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e086      	b.n	80046ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045e0:	4b45      	ldr	r3, [pc, #276]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f0      	bne.n	80045ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045ec:	4b42      	ldr	r3, [pc, #264]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	051b      	lsls	r3, r3, #20
 80045fa:	493f      	ldr	r1, [pc, #252]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	3b01      	subs	r3, #1
 8004606:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	3b01      	subs	r3, #1
 8004610:	025b      	lsls	r3, r3, #9
 8004612:	b29b      	uxth	r3, r3
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	3b01      	subs	r3, #1
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	3b01      	subs	r3, #1
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004630:	4931      	ldr	r1, [pc, #196]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 8004632:	4313      	orrs	r3, r2
 8004634:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004636:	4b30      	ldr	r3, [pc, #192]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 8004638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	492d      	ldr	r1, [pc, #180]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 8004644:	4313      	orrs	r3, r2
 8004646:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004648:	4b2b      	ldr	r3, [pc, #172]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	4928      	ldr	r1, [pc, #160]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800465a:	4b27      	ldr	r3, [pc, #156]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 800465c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465e:	4a26      	ldr	r2, [pc, #152]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 8004660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004664:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004666:	4b24      	ldr	r3, [pc, #144]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 8004668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800466a:	4b24      	ldr	r3, [pc, #144]	@ (80046fc <RCCEx_PLL3_Config+0x160>)
 800466c:	4013      	ands	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	69d2      	ldr	r2, [r2, #28]
 8004672:	00d2      	lsls	r2, r2, #3
 8004674:	4920      	ldr	r1, [pc, #128]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800467a:	4b1f      	ldr	r3, [pc, #124]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	4a1e      	ldr	r2, [pc, #120]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 8004680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004684:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800468c:	4b1a      	ldr	r3, [pc, #104]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	4a19      	ldr	r2, [pc, #100]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 8004692:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004696:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004698:	e00f      	b.n	80046ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d106      	bne.n	80046ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046a0:	4b15      	ldr	r3, [pc, #84]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	4a14      	ldr	r2, [pc, #80]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80046a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046ac:	e005      	b.n	80046ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046ae:	4b12      	ldr	r3, [pc, #72]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	4a11      	ldr	r2, [pc, #68]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80046b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046ba:	4b0f      	ldr	r3, [pc, #60]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a0e      	ldr	r2, [pc, #56]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80046c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c6:	f7fc ff07 	bl	80014d8 <HAL_GetTick>
 80046ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046cc:	e008      	b.n	80046e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046ce:	f7fc ff03 	bl	80014d8 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e006      	b.n	80046ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046e0:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <RCCEx_PLL3_Config+0x15c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	58024400 	.word	0x58024400
 80046fc:	ffff0007 	.word	0xffff0007

08004700 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e10f      	b.n	8004932 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a87      	ldr	r2, [pc, #540]	@ (800493c <HAL_SPI_Init+0x23c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00f      	beq.n	8004742 <HAL_SPI_Init+0x42>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a86      	ldr	r2, [pc, #536]	@ (8004940 <HAL_SPI_Init+0x240>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00a      	beq.n	8004742 <HAL_SPI_Init+0x42>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a84      	ldr	r2, [pc, #528]	@ (8004944 <HAL_SPI_Init+0x244>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d005      	beq.n	8004742 <HAL_SPI_Init+0x42>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b0f      	cmp	r3, #15
 800473c:	d901      	bls.n	8004742 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e0f7      	b.n	8004932 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f900 	bl	8004948 <SPI_GetPacketSize>
 8004748:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a7b      	ldr	r2, [pc, #492]	@ (800493c <HAL_SPI_Init+0x23c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00c      	beq.n	800476e <HAL_SPI_Init+0x6e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a79      	ldr	r2, [pc, #484]	@ (8004940 <HAL_SPI_Init+0x240>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <HAL_SPI_Init+0x6e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a78      	ldr	r2, [pc, #480]	@ (8004944 <HAL_SPI_Init+0x244>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d002      	beq.n	800476e <HAL_SPI_Init+0x6e>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b08      	cmp	r3, #8
 800476c:	d811      	bhi.n	8004792 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004772:	4a72      	ldr	r2, [pc, #456]	@ (800493c <HAL_SPI_Init+0x23c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a70      	ldr	r2, [pc, #448]	@ (8004940 <HAL_SPI_Init+0x240>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_SPI_Init+0x8c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6f      	ldr	r2, [pc, #444]	@ (8004944 <HAL_SPI_Init+0x244>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d104      	bne.n	8004796 <HAL_SPI_Init+0x96>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b10      	cmp	r3, #16
 8004790:	d901      	bls.n	8004796 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e0cd      	b.n	8004932 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fc fb30 	bl	8000e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80047d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047dc:	d119      	bne.n	8004812 <HAL_SPI_Init+0x112>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047e6:	d103      	bne.n	80047f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10c      	bne.n	8004812 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80047fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004800:	d107      	bne.n	8004812 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004810:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00f      	beq.n	800483e <HAL_SPI_Init+0x13e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b06      	cmp	r3, #6
 8004824:	d90b      	bls.n	800483e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e007      	b.n	800484e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800484c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	431a      	orrs	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004860:	ea42 0103 	orr.w	r1, r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ae:	ea42 0103 	orr.w	r1, r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d113      	bne.n	80048ee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048d8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048ec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40013000 	.word	0x40013000
 8004940:	40003800 	.word	0x40003800
 8004944:	40003c00 	.word	0x40003c00

08004948 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	3301      	adds	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	3307      	adds	r3, #7
 8004966:	08db      	lsrs	r3, r3, #3
 8004968:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e049      	b.n	8004a24 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fc fb9f 	bl	80010e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f000 f949 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e0ff      	b.n	8004c4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b14      	cmp	r3, #20
 8004a56:	f200 80f0 	bhi.w	8004c3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004ab5 	.word	0x08004ab5
 8004a64:	08004c3b 	.word	0x08004c3b
 8004a68:	08004c3b 	.word	0x08004c3b
 8004a6c:	08004c3b 	.word	0x08004c3b
 8004a70:	08004af5 	.word	0x08004af5
 8004a74:	08004c3b 	.word	0x08004c3b
 8004a78:	08004c3b 	.word	0x08004c3b
 8004a7c:	08004c3b 	.word	0x08004c3b
 8004a80:	08004b37 	.word	0x08004b37
 8004a84:	08004c3b 	.word	0x08004c3b
 8004a88:	08004c3b 	.word	0x08004c3b
 8004a8c:	08004c3b 	.word	0x08004c3b
 8004a90:	08004b77 	.word	0x08004b77
 8004a94:	08004c3b 	.word	0x08004c3b
 8004a98:	08004c3b 	.word	0x08004c3b
 8004a9c:	08004c3b 	.word	0x08004c3b
 8004aa0:	08004bb9 	.word	0x08004bb9
 8004aa4:	08004c3b 	.word	0x08004c3b
 8004aa8:	08004c3b 	.word	0x08004c3b
 8004aac:	08004c3b 	.word	0x08004c3b
 8004ab0:	08004bf9 	.word	0x08004bf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f97c 	bl	8004db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0208 	orr.w	r2, r2, #8
 8004ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0204 	bic.w	r2, r2, #4
 8004ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6999      	ldr	r1, [r3, #24]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	619a      	str	r2, [r3, #24]
      break;
 8004af2:	e0a5      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f9ec 	bl	8004ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6999      	ldr	r1, [r3, #24]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	021a      	lsls	r2, r3, #8
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	619a      	str	r2, [r3, #24]
      break;
 8004b34:	e084      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fa55 	bl	8004fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0208 	orr.w	r2, r2, #8
 8004b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0204 	bic.w	r2, r2, #4
 8004b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69d9      	ldr	r1, [r3, #28]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	61da      	str	r2, [r3, #28]
      break;
 8004b74:	e064      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fabd 	bl	80050fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69d9      	ldr	r1, [r3, #28]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	021a      	lsls	r2, r3, #8
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	61da      	str	r2, [r3, #28]
      break;
 8004bb6:	e043      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fb06 	bl	80051d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0208 	orr.w	r2, r2, #8
 8004bd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0204 	bic.w	r2, r2, #4
 8004be2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bf6:	e023      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fb4a 	bl	8005298 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	021a      	lsls	r2, r3, #8
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c38:	e002      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop

08004c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a4a      	ldr	r2, [pc, #296]	@ (8004d90 <TIM_Base_SetConfig+0x13c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <TIM_Base_SetConfig+0x40>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c72:	d00f      	beq.n	8004c94 <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a47      	ldr	r2, [pc, #284]	@ (8004d94 <TIM_Base_SetConfig+0x140>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a46      	ldr	r2, [pc, #280]	@ (8004d98 <TIM_Base_SetConfig+0x144>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d007      	beq.n	8004c94 <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a45      	ldr	r2, [pc, #276]	@ (8004d9c <TIM_Base_SetConfig+0x148>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a44      	ldr	r2, [pc, #272]	@ (8004da0 <TIM_Base_SetConfig+0x14c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d108      	bne.n	8004ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a39      	ldr	r2, [pc, #228]	@ (8004d90 <TIM_Base_SetConfig+0x13c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d027      	beq.n	8004cfe <TIM_Base_SetConfig+0xaa>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb4:	d023      	beq.n	8004cfe <TIM_Base_SetConfig+0xaa>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a36      	ldr	r2, [pc, #216]	@ (8004d94 <TIM_Base_SetConfig+0x140>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d01f      	beq.n	8004cfe <TIM_Base_SetConfig+0xaa>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a35      	ldr	r2, [pc, #212]	@ (8004d98 <TIM_Base_SetConfig+0x144>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d01b      	beq.n	8004cfe <TIM_Base_SetConfig+0xaa>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a34      	ldr	r2, [pc, #208]	@ (8004d9c <TIM_Base_SetConfig+0x148>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d017      	beq.n	8004cfe <TIM_Base_SetConfig+0xaa>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a33      	ldr	r2, [pc, #204]	@ (8004da0 <TIM_Base_SetConfig+0x14c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d013      	beq.n	8004cfe <TIM_Base_SetConfig+0xaa>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a32      	ldr	r2, [pc, #200]	@ (8004da4 <TIM_Base_SetConfig+0x150>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00f      	beq.n	8004cfe <TIM_Base_SetConfig+0xaa>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a31      	ldr	r2, [pc, #196]	@ (8004da8 <TIM_Base_SetConfig+0x154>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <TIM_Base_SetConfig+0xaa>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a30      	ldr	r2, [pc, #192]	@ (8004dac <TIM_Base_SetConfig+0x158>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <TIM_Base_SetConfig+0xaa>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8004db0 <TIM_Base_SetConfig+0x15c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d003      	beq.n	8004cfe <TIM_Base_SetConfig+0xaa>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8004db4 <TIM_Base_SetConfig+0x160>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d108      	bne.n	8004d10 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a16      	ldr	r2, [pc, #88]	@ (8004d90 <TIM_Base_SetConfig+0x13c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00f      	beq.n	8004d5c <TIM_Base_SetConfig+0x108>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a18      	ldr	r2, [pc, #96]	@ (8004da0 <TIM_Base_SetConfig+0x14c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <TIM_Base_SetConfig+0x108>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a17      	ldr	r2, [pc, #92]	@ (8004da4 <TIM_Base_SetConfig+0x150>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d007      	beq.n	8004d5c <TIM_Base_SetConfig+0x108>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a16      	ldr	r2, [pc, #88]	@ (8004da8 <TIM_Base_SetConfig+0x154>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_Base_SetConfig+0x108>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a15      	ldr	r2, [pc, #84]	@ (8004dac <TIM_Base_SetConfig+0x158>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d103      	bne.n	8004d64 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d105      	bne.n	8004d82 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f023 0201 	bic.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	611a      	str	r2, [r3, #16]
  }
}
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	40010400 	.word	0x40010400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400
 8004dac:	40014800 	.word	0x40014800
 8004db0:	4000e000 	.word	0x4000e000
 8004db4:	4000e400 	.word	0x4000e400

08004db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f023 0201 	bic.w	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4b37      	ldr	r3, [pc, #220]	@ (8004ec0 <TIM_OC1_SetConfig+0x108>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0303 	bic.w	r3, r3, #3
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f023 0302 	bic.w	r3, r3, #2
 8004e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec4 <TIM_OC1_SetConfig+0x10c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00f      	beq.n	8004e34 <TIM_OC1_SetConfig+0x7c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec8 <TIM_OC1_SetConfig+0x110>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00b      	beq.n	8004e34 <TIM_OC1_SetConfig+0x7c>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004ecc <TIM_OC1_SetConfig+0x114>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_OC1_SetConfig+0x7c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed0 <TIM_OC1_SetConfig+0x118>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_OC1_SetConfig+0x7c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a29      	ldr	r2, [pc, #164]	@ (8004ed4 <TIM_OC1_SetConfig+0x11c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d10c      	bne.n	8004e4e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 0308 	bic.w	r3, r3, #8
 8004e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f023 0304 	bic.w	r3, r3, #4
 8004e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec4 <TIM_OC1_SetConfig+0x10c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00f      	beq.n	8004e76 <TIM_OC1_SetConfig+0xbe>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec8 <TIM_OC1_SetConfig+0x110>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <TIM_OC1_SetConfig+0xbe>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1a      	ldr	r2, [pc, #104]	@ (8004ecc <TIM_OC1_SetConfig+0x114>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d007      	beq.n	8004e76 <TIM_OC1_SetConfig+0xbe>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a19      	ldr	r2, [pc, #100]	@ (8004ed0 <TIM_OC1_SetConfig+0x118>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_OC1_SetConfig+0xbe>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a18      	ldr	r2, [pc, #96]	@ (8004ed4 <TIM_OC1_SetConfig+0x11c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d111      	bne.n	8004e9a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	fffeff8f 	.word	0xfffeff8f
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40010400 	.word	0x40010400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800

08004ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f023 0210 	bic.w	r2, r3, #16
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4b34      	ldr	r3, [pc, #208]	@ (8004fd4 <TIM_OC2_SetConfig+0xfc>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0320 	bic.w	r3, r3, #32
 8004f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a29      	ldr	r2, [pc, #164]	@ (8004fd8 <TIM_OC2_SetConfig+0x100>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC2_SetConfig+0x68>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a28      	ldr	r2, [pc, #160]	@ (8004fdc <TIM_OC2_SetConfig+0x104>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10d      	bne.n	8004f5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd8 <TIM_OC2_SetConfig+0x100>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00f      	beq.n	8004f84 <TIM_OC2_SetConfig+0xac>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a1d      	ldr	r2, [pc, #116]	@ (8004fdc <TIM_OC2_SetConfig+0x104>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_OC2_SetConfig+0xac>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe0 <TIM_OC2_SetConfig+0x108>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_OC2_SetConfig+0xac>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe4 <TIM_OC2_SetConfig+0x10c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_OC2_SetConfig+0xac>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe8 <TIM_OC2_SetConfig+0x110>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d113      	bne.n	8004fac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	feff8fff 	.word	0xfeff8fff
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40010400 	.word	0x40010400
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40014400 	.word	0x40014400
 8004fe8:	40014800 	.word	0x40014800

08004fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4b33      	ldr	r3, [pc, #204]	@ (80050e4 <TIM_OC3_SetConfig+0xf8>)
 8005018:	4013      	ands	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0303 	bic.w	r3, r3, #3
 8005022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a28      	ldr	r2, [pc, #160]	@ (80050e8 <TIM_OC3_SetConfig+0xfc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_OC3_SetConfig+0x66>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a27      	ldr	r2, [pc, #156]	@ (80050ec <TIM_OC3_SetConfig+0x100>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d10d      	bne.n	800506e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005058:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800506c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1d      	ldr	r2, [pc, #116]	@ (80050e8 <TIM_OC3_SetConfig+0xfc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00f      	beq.n	8005096 <TIM_OC3_SetConfig+0xaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1c      	ldr	r2, [pc, #112]	@ (80050ec <TIM_OC3_SetConfig+0x100>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <TIM_OC3_SetConfig+0xaa>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a1b      	ldr	r2, [pc, #108]	@ (80050f0 <TIM_OC3_SetConfig+0x104>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_OC3_SetConfig+0xaa>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a1a      	ldr	r2, [pc, #104]	@ (80050f4 <TIM_OC3_SetConfig+0x108>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_OC3_SetConfig+0xaa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a19      	ldr	r2, [pc, #100]	@ (80050f8 <TIM_OC3_SetConfig+0x10c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d113      	bne.n	80050be <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800509c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	621a      	str	r2, [r3, #32]
}
 80050d8:	bf00      	nop
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	fffeff8f 	.word	0xfffeff8f
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40010400 	.word	0x40010400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4b24      	ldr	r3, [pc, #144]	@ (80051b8 <TIM_OC4_SetConfig+0xbc>)
 8005128:	4013      	ands	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a19      	ldr	r2, [pc, #100]	@ (80051bc <TIM_OC4_SetConfig+0xc0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00f      	beq.n	800517c <TIM_OC4_SetConfig+0x80>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a18      	ldr	r2, [pc, #96]	@ (80051c0 <TIM_OC4_SetConfig+0xc4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_OC4_SetConfig+0x80>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a17      	ldr	r2, [pc, #92]	@ (80051c4 <TIM_OC4_SetConfig+0xc8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d007      	beq.n	800517c <TIM_OC4_SetConfig+0x80>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a16      	ldr	r2, [pc, #88]	@ (80051c8 <TIM_OC4_SetConfig+0xcc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_OC4_SetConfig+0x80>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a15      	ldr	r2, [pc, #84]	@ (80051cc <TIM_OC4_SetConfig+0xd0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d109      	bne.n	8005190 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	019b      	lsls	r3, r3, #6
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	621a      	str	r2, [r3, #32]
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	feff8fff 	.word	0xfeff8fff
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40010400 	.word	0x40010400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800

080051d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4b21      	ldr	r3, [pc, #132]	@ (8005280 <TIM_OC5_SetConfig+0xb0>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005210:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a18      	ldr	r2, [pc, #96]	@ (8005284 <TIM_OC5_SetConfig+0xb4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00f      	beq.n	8005246 <TIM_OC5_SetConfig+0x76>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a17      	ldr	r2, [pc, #92]	@ (8005288 <TIM_OC5_SetConfig+0xb8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00b      	beq.n	8005246 <TIM_OC5_SetConfig+0x76>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a16      	ldr	r2, [pc, #88]	@ (800528c <TIM_OC5_SetConfig+0xbc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d007      	beq.n	8005246 <TIM_OC5_SetConfig+0x76>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a15      	ldr	r2, [pc, #84]	@ (8005290 <TIM_OC5_SetConfig+0xc0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_OC5_SetConfig+0x76>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a14      	ldr	r2, [pc, #80]	@ (8005294 <TIM_OC5_SetConfig+0xc4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d109      	bne.n	800525a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800524c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	621a      	str	r2, [r3, #32]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	fffeff8f 	.word	0xfffeff8f
 8005284:	40010000 	.word	0x40010000
 8005288:	40010400 	.word	0x40010400
 800528c:	40014000 	.word	0x40014000
 8005290:	40014400 	.word	0x40014400
 8005294:	40014800 	.word	0x40014800

08005298 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4b22      	ldr	r3, [pc, #136]	@ (800534c <TIM_OC6_SetConfig+0xb4>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	051b      	lsls	r3, r3, #20
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a19      	ldr	r2, [pc, #100]	@ (8005350 <TIM_OC6_SetConfig+0xb8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00f      	beq.n	8005310 <TIM_OC6_SetConfig+0x78>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a18      	ldr	r2, [pc, #96]	@ (8005354 <TIM_OC6_SetConfig+0xbc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00b      	beq.n	8005310 <TIM_OC6_SetConfig+0x78>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a17      	ldr	r2, [pc, #92]	@ (8005358 <TIM_OC6_SetConfig+0xc0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d007      	beq.n	8005310 <TIM_OC6_SetConfig+0x78>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a16      	ldr	r2, [pc, #88]	@ (800535c <TIM_OC6_SetConfig+0xc4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_OC6_SetConfig+0x78>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a15      	ldr	r2, [pc, #84]	@ (8005360 <TIM_OC6_SetConfig+0xc8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d109      	bne.n	8005324 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005316:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	029b      	lsls	r3, r3, #10
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	feff8fff 	.word	0xfeff8fff
 8005350:	40010000 	.word	0x40010000
 8005354:	40010400 	.word	0x40010400
 8005358:	40014000 	.word	0x40014000
 800535c:	40014400 	.word	0x40014400
 8005360:	40014800 	.word	0x40014800

08005364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005378:	2302      	movs	r3, #2
 800537a:	e077      	b.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a35      	ldr	r2, [pc, #212]	@ (8005478 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a34      	ldr	r2, [pc, #208]	@ (800547c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d108      	bne.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80053b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a25      	ldr	r2, [pc, #148]	@ (8005478 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02c      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ee:	d027      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a22      	ldr	r2, [pc, #136]	@ (8005480 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d022      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a21      	ldr	r2, [pc, #132]	@ (8005484 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d01d      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1f      	ldr	r2, [pc, #124]	@ (8005488 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1a      	ldr	r2, [pc, #104]	@ (800547c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1b      	ldr	r2, [pc, #108]	@ (800548c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1a      	ldr	r2, [pc, #104]	@ (8005490 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a18      	ldr	r2, [pc, #96]	@ (8005494 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a17      	ldr	r2, [pc, #92]	@ (8005498 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10c      	bne.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005446:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	4313      	orrs	r3, r2
 8005450:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	40010000 	.word	0x40010000
 800547c:	40010400 	.word	0x40010400
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00
 800548c:	40001800 	.word	0x40001800
 8005490:	40014000 	.word	0x40014000
 8005494:	4000e000 	.word	0x4000e000
 8005498:	4000e400 	.word	0x4000e400

0800549c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e073      	b.n	80055a0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	041b      	lsls	r3, r3, #16
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a19      	ldr	r2, [pc, #100]	@ (80055ac <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a18      	ldr	r2, [pc, #96]	@ (80055b0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d11c      	bne.n	800558e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555e:	051b      	lsls	r3, r3, #20
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40010400 	.word	0x40010400

080055b4 <memset>:
 80055b4:	4402      	add	r2, r0
 80055b6:	4603      	mov	r3, r0
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d100      	bne.n	80055be <memset+0xa>
 80055bc:	4770      	bx	lr
 80055be:	f803 1b01 	strb.w	r1, [r3], #1
 80055c2:	e7f9      	b.n	80055b8 <memset+0x4>

080055c4 <__libc_init_array>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	4d0d      	ldr	r5, [pc, #52]	@ (80055fc <__libc_init_array+0x38>)
 80055c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005600 <__libc_init_array+0x3c>)
 80055ca:	1b64      	subs	r4, r4, r5
 80055cc:	10a4      	asrs	r4, r4, #2
 80055ce:	2600      	movs	r6, #0
 80055d0:	42a6      	cmp	r6, r4
 80055d2:	d109      	bne.n	80055e8 <__libc_init_array+0x24>
 80055d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005604 <__libc_init_array+0x40>)
 80055d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005608 <__libc_init_array+0x44>)
 80055d8:	f000 f826 	bl	8005628 <_init>
 80055dc:	1b64      	subs	r4, r4, r5
 80055de:	10a4      	asrs	r4, r4, #2
 80055e0:	2600      	movs	r6, #0
 80055e2:	42a6      	cmp	r6, r4
 80055e4:	d105      	bne.n	80055f2 <__libc_init_array+0x2e>
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ec:	4798      	blx	r3
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7ee      	b.n	80055d0 <__libc_init_array+0xc>
 80055f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f6:	4798      	blx	r3
 80055f8:	3601      	adds	r6, #1
 80055fa:	e7f2      	b.n	80055e2 <__libc_init_array+0x1e>
 80055fc:	0800569c 	.word	0x0800569c
 8005600:	0800569c 	.word	0x0800569c
 8005604:	0800569c 	.word	0x0800569c
 8005608:	080056a0 	.word	0x080056a0

0800560c <memcpy>:
 800560c:	440a      	add	r2, r1
 800560e:	4291      	cmp	r1, r2
 8005610:	f100 33ff 	add.w	r3, r0, #4294967295
 8005614:	d100      	bne.n	8005618 <memcpy+0xc>
 8005616:	4770      	bx	lr
 8005618:	b510      	push	{r4, lr}
 800561a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800561e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005622:	4291      	cmp	r1, r2
 8005624:	d1f9      	bne.n	800561a <memcpy+0xe>
 8005626:	bd10      	pop	{r4, pc}

08005628 <_init>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr

08005634 <_fini>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr
